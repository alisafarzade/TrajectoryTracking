
07 Loc usart speed controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e74  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08008060  08008060  00018060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008310  08008310  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008310  08008310  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008310  08008310  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008310  08008310  00018310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008314  08008314  00018314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000078  08008390  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08008390  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca2c  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e64  00000000  00000000  0002cacd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0002e938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  0002f6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fbe  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e78f  00000000  00000000  0004a33e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d88d  00000000  00000000  00058acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f635a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004150  00000000  00000000  000f63ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000078 	.word	0x20000078
 8000204:	00000000 	.word	0x00000000
 8000208:	08008044 	.word	0x08008044

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000007c 	.word	0x2000007c
 8000224:	08008044 	.word	0x08008044

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_d2f>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b58:	bf24      	itt	cs
 8000b5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b62:	d90d      	bls.n	8000b80 <__aeabi_d2f+0x30>
 8000b64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b78:	bf08      	it	eq
 8000b7a:	f020 0001 	biceq.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b84:	d121      	bne.n	8000bca <__aeabi_d2f+0x7a>
 8000b86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8a:	bfbc      	itt	lt
 8000b8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	4770      	bxlt	lr
 8000b92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9a:	f1c2 0218 	rsb	r2, r2, #24
 8000b9e:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ba6:	fa20 f002 	lsr.w	r0, r0, r2
 8000baa:	bf18      	it	ne
 8000bac:	f040 0001 	orrne.w	r0, r0, #1
 8000bb0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bbc:	ea40 000c 	orr.w	r0, r0, ip
 8000bc0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc8:	e7cc      	b.n	8000b64 <__aeabi_d2f+0x14>
 8000bca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bce:	d107      	bne.n	8000be0 <__aeabi_d2f+0x90>
 8000bd0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd4:	bf1e      	ittt	ne
 8000bd6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bda:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bde:	4770      	bxne	lr
 8000be0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	; 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fmul>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d06f      	beq.n	8000f04 <__aeabi_fmul+0xf8>
 8000e24:	441a      	add	r2, r3
 8000e26:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2a:	0240      	lsls	r0, r0, #9
 8000e2c:	bf18      	it	ne
 8000e2e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e32:	d01e      	beq.n	8000e72 <__aeabi_fmul+0x66>
 8000e34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e38:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e3c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e40:	fba0 3101 	umull	r3, r1, r0, r1
 8000e44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e48:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e4c:	bf3e      	ittt	cc
 8000e4e:	0049      	lslcc	r1, r1, #1
 8000e50:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e54:	005b      	lslcc	r3, r3, #1
 8000e56:	ea40 0001 	orr.w	r0, r0, r1
 8000e5a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e5e:	2afd      	cmp	r2, #253	; 0xfd
 8000e60:	d81d      	bhi.n	8000e9e <__aeabi_fmul+0x92>
 8000e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e6a:	bf08      	it	eq
 8000e6c:	f020 0001 	biceq.w	r0, r0, #1
 8000e70:	4770      	bx	lr
 8000e72:	f090 0f00 	teq	r0, #0
 8000e76:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e7a:	bf08      	it	eq
 8000e7c:	0249      	lsleq	r1, r1, #9
 8000e7e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e82:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e86:	3a7f      	subs	r2, #127	; 0x7f
 8000e88:	bfc2      	ittt	gt
 8000e8a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e8e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e92:	4770      	bxgt	lr
 8000e94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	3a01      	subs	r2, #1
 8000e9e:	dc5d      	bgt.n	8000f5c <__aeabi_fmul+0x150>
 8000ea0:	f112 0f19 	cmn.w	r2, #25
 8000ea4:	bfdc      	itt	le
 8000ea6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eaa:	4770      	bxle	lr
 8000eac:	f1c2 0200 	rsb	r2, r2, #0
 8000eb0:	0041      	lsls	r1, r0, #1
 8000eb2:	fa21 f102 	lsr.w	r1, r1, r2
 8000eb6:	f1c2 0220 	rsb	r2, r2, #32
 8000eba:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ebe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ec2:	f140 0000 	adc.w	r0, r0, #0
 8000ec6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eca:	bf08      	it	eq
 8000ecc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed0:	4770      	bx	lr
 8000ed2:	f092 0f00 	teq	r2, #0
 8000ed6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eda:	bf02      	ittt	eq
 8000edc:	0040      	lsleq	r0, r0, #1
 8000ede:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ee2:	3a01      	subeq	r2, #1
 8000ee4:	d0f9      	beq.n	8000eda <__aeabi_fmul+0xce>
 8000ee6:	ea40 000c 	orr.w	r0, r0, ip
 8000eea:	f093 0f00 	teq	r3, #0
 8000eee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	bf02      	ittt	eq
 8000ef4:	0049      	lsleq	r1, r1, #1
 8000ef6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000efa:	3b01      	subeq	r3, #1
 8000efc:	d0f9      	beq.n	8000ef2 <__aeabi_fmul+0xe6>
 8000efe:	ea41 010c 	orr.w	r1, r1, ip
 8000f02:	e78f      	b.n	8000e24 <__aeabi_fmul+0x18>
 8000f04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f08:	ea92 0f0c 	teq	r2, ip
 8000f0c:	bf18      	it	ne
 8000f0e:	ea93 0f0c 	teqne	r3, ip
 8000f12:	d00a      	beq.n	8000f2a <__aeabi_fmul+0x11e>
 8000f14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f18:	bf18      	it	ne
 8000f1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f1e:	d1d8      	bne.n	8000ed2 <__aeabi_fmul+0xc6>
 8000f20:	ea80 0001 	eor.w	r0, r0, r1
 8000f24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f28:	4770      	bx	lr
 8000f2a:	f090 0f00 	teq	r0, #0
 8000f2e:	bf17      	itett	ne
 8000f30:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f34:	4608      	moveq	r0, r1
 8000f36:	f091 0f00 	teqne	r1, #0
 8000f3a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f3e:	d014      	beq.n	8000f6a <__aeabi_fmul+0x15e>
 8000f40:	ea92 0f0c 	teq	r2, ip
 8000f44:	d101      	bne.n	8000f4a <__aeabi_fmul+0x13e>
 8000f46:	0242      	lsls	r2, r0, #9
 8000f48:	d10f      	bne.n	8000f6a <__aeabi_fmul+0x15e>
 8000f4a:	ea93 0f0c 	teq	r3, ip
 8000f4e:	d103      	bne.n	8000f58 <__aeabi_fmul+0x14c>
 8000f50:	024b      	lsls	r3, r1, #9
 8000f52:	bf18      	it	ne
 8000f54:	4608      	movne	r0, r1
 8000f56:	d108      	bne.n	8000f6a <__aeabi_fmul+0x15e>
 8000f58:	ea80 0001 	eor.w	r0, r0, r1
 8000f5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f68:	4770      	bx	lr
 8000f6a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f6e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f72:	4770      	bx	lr

08000f74 <__aeabi_fdiv>:
 8000f74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f7c:	bf1e      	ittt	ne
 8000f7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f82:	ea92 0f0c 	teqne	r2, ip
 8000f86:	ea93 0f0c 	teqne	r3, ip
 8000f8a:	d069      	beq.n	8001060 <__aeabi_fdiv+0xec>
 8000f8c:	eba2 0203 	sub.w	r2, r2, r3
 8000f90:	ea80 0c01 	eor.w	ip, r0, r1
 8000f94:	0249      	lsls	r1, r1, #9
 8000f96:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f9a:	d037      	beq.n	800100c <__aeabi_fdiv+0x98>
 8000f9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fa0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fa4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fa8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fac:	428b      	cmp	r3, r1
 8000fae:	bf38      	it	cc
 8000fb0:	005b      	lslcc	r3, r3, #1
 8000fb2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fb6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	bf24      	itt	cs
 8000fbe:	1a5b      	subcs	r3, r3, r1
 8000fc0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fc4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fc8:	bf24      	itt	cs
 8000fca:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fce:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fd2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fd6:	bf24      	itt	cs
 8000fd8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fdc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fe4:	bf24      	itt	cs
 8000fe6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fea:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fee:	011b      	lsls	r3, r3, #4
 8000ff0:	bf18      	it	ne
 8000ff2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ff6:	d1e0      	bne.n	8000fba <__aeabi_fdiv+0x46>
 8000ff8:	2afd      	cmp	r2, #253	; 0xfd
 8000ffa:	f63f af50 	bhi.w	8000e9e <__aeabi_fmul+0x92>
 8000ffe:	428b      	cmp	r3, r1
 8001000:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001004:	bf08      	it	eq
 8001006:	f020 0001 	biceq.w	r0, r0, #1
 800100a:	4770      	bx	lr
 800100c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001010:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001014:	327f      	adds	r2, #127	; 0x7f
 8001016:	bfc2      	ittt	gt
 8001018:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800101c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001020:	4770      	bxgt	lr
 8001022:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001026:	f04f 0300 	mov.w	r3, #0
 800102a:	3a01      	subs	r2, #1
 800102c:	e737      	b.n	8000e9e <__aeabi_fmul+0x92>
 800102e:	f092 0f00 	teq	r2, #0
 8001032:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001036:	bf02      	ittt	eq
 8001038:	0040      	lsleq	r0, r0, #1
 800103a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800103e:	3a01      	subeq	r2, #1
 8001040:	d0f9      	beq.n	8001036 <__aeabi_fdiv+0xc2>
 8001042:	ea40 000c 	orr.w	r0, r0, ip
 8001046:	f093 0f00 	teq	r3, #0
 800104a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800104e:	bf02      	ittt	eq
 8001050:	0049      	lsleq	r1, r1, #1
 8001052:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001056:	3b01      	subeq	r3, #1
 8001058:	d0f9      	beq.n	800104e <__aeabi_fdiv+0xda>
 800105a:	ea41 010c 	orr.w	r1, r1, ip
 800105e:	e795      	b.n	8000f8c <__aeabi_fdiv+0x18>
 8001060:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001064:	ea92 0f0c 	teq	r2, ip
 8001068:	d108      	bne.n	800107c <__aeabi_fdiv+0x108>
 800106a:	0242      	lsls	r2, r0, #9
 800106c:	f47f af7d 	bne.w	8000f6a <__aeabi_fmul+0x15e>
 8001070:	ea93 0f0c 	teq	r3, ip
 8001074:	f47f af70 	bne.w	8000f58 <__aeabi_fmul+0x14c>
 8001078:	4608      	mov	r0, r1
 800107a:	e776      	b.n	8000f6a <__aeabi_fmul+0x15e>
 800107c:	ea93 0f0c 	teq	r3, ip
 8001080:	d104      	bne.n	800108c <__aeabi_fdiv+0x118>
 8001082:	024b      	lsls	r3, r1, #9
 8001084:	f43f af4c 	beq.w	8000f20 <__aeabi_fmul+0x114>
 8001088:	4608      	mov	r0, r1
 800108a:	e76e      	b.n	8000f6a <__aeabi_fmul+0x15e>
 800108c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001090:	bf18      	it	ne
 8001092:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001096:	d1ca      	bne.n	800102e <__aeabi_fdiv+0xba>
 8001098:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800109c:	f47f af5c 	bne.w	8000f58 <__aeabi_fmul+0x14c>
 80010a0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010a4:	f47f af3c 	bne.w	8000f20 <__aeabi_fmul+0x114>
 80010a8:	e75f      	b.n	8000f6a <__aeabi_fmul+0x15e>
 80010aa:	bf00      	nop

080010ac <__gesf2>:
 80010ac:	f04f 3cff 	mov.w	ip, #4294967295
 80010b0:	e006      	b.n	80010c0 <__cmpsf2+0x4>
 80010b2:	bf00      	nop

080010b4 <__lesf2>:
 80010b4:	f04f 0c01 	mov.w	ip, #1
 80010b8:	e002      	b.n	80010c0 <__cmpsf2+0x4>
 80010ba:	bf00      	nop

080010bc <__cmpsf2>:
 80010bc:	f04f 0c01 	mov.w	ip, #1
 80010c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d0:	bf18      	it	ne
 80010d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010d6:	d011      	beq.n	80010fc <__cmpsf2+0x40>
 80010d8:	b001      	add	sp, #4
 80010da:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010de:	bf18      	it	ne
 80010e0:	ea90 0f01 	teqne	r0, r1
 80010e4:	bf58      	it	pl
 80010e6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010ea:	bf88      	it	hi
 80010ec:	17c8      	asrhi	r0, r1, #31
 80010ee:	bf38      	it	cc
 80010f0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010f4:	bf18      	it	ne
 80010f6:	f040 0001 	orrne.w	r0, r0, #1
 80010fa:	4770      	bx	lr
 80010fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001100:	d102      	bne.n	8001108 <__cmpsf2+0x4c>
 8001102:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001106:	d105      	bne.n	8001114 <__cmpsf2+0x58>
 8001108:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800110c:	d1e4      	bne.n	80010d8 <__cmpsf2+0x1c>
 800110e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001112:	d0e1      	beq.n	80010d8 <__cmpsf2+0x1c>
 8001114:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <__aeabi_cfrcmple>:
 800111c:	4684      	mov	ip, r0
 800111e:	4608      	mov	r0, r1
 8001120:	4661      	mov	r1, ip
 8001122:	e7ff      	b.n	8001124 <__aeabi_cfcmpeq>

08001124 <__aeabi_cfcmpeq>:
 8001124:	b50f      	push	{r0, r1, r2, r3, lr}
 8001126:	f7ff ffc9 	bl	80010bc <__cmpsf2>
 800112a:	2800      	cmp	r0, #0
 800112c:	bf48      	it	mi
 800112e:	f110 0f00 	cmnmi.w	r0, #0
 8001132:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001134 <__aeabi_fcmpeq>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff fff4 	bl	8001124 <__aeabi_cfcmpeq>
 800113c:	bf0c      	ite	eq
 800113e:	2001      	moveq	r0, #1
 8001140:	2000      	movne	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_fcmplt>:
 8001148:	f84d ed08 	str.w	lr, [sp, #-8]!
 800114c:	f7ff ffea 	bl	8001124 <__aeabi_cfcmpeq>
 8001150:	bf34      	ite	cc
 8001152:	2001      	movcc	r0, #1
 8001154:	2000      	movcs	r0, #0
 8001156:	f85d fb08 	ldr.w	pc, [sp], #8
 800115a:	bf00      	nop

0800115c <__aeabi_fcmple>:
 800115c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001160:	f7ff ffe0 	bl	8001124 <__aeabi_cfcmpeq>
 8001164:	bf94      	ite	ls
 8001166:	2001      	movls	r0, #1
 8001168:	2000      	movhi	r0, #0
 800116a:	f85d fb08 	ldr.w	pc, [sp], #8
 800116e:	bf00      	nop

08001170 <__aeabi_fcmpge>:
 8001170:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001174:	f7ff ffd2 	bl	800111c <__aeabi_cfrcmple>
 8001178:	bf94      	ite	ls
 800117a:	2001      	movls	r0, #1
 800117c:	2000      	movhi	r0, #0
 800117e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001182:	bf00      	nop

08001184 <__aeabi_fcmpgt>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff ffc8 	bl	800111c <__aeabi_cfrcmple>
 800118c:	bf34      	ite	cc
 800118e:	2001      	movcc	r0, #1
 8001190:	2000      	movcs	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_f2iz>:
 8001198:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800119c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011a0:	d30f      	bcc.n	80011c2 <__aeabi_f2iz+0x2a>
 80011a2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011a6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011aa:	d90d      	bls.n	80011c8 <__aeabi_f2iz+0x30>
 80011ac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011b4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011b8:	fa23 f002 	lsr.w	r0, r3, r2
 80011bc:	bf18      	it	ne
 80011be:	4240      	negne	r0, r0
 80011c0:	4770      	bx	lr
 80011c2:	f04f 0000 	mov.w	r0, #0
 80011c6:	4770      	bx	lr
 80011c8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011cc:	d101      	bne.n	80011d2 <__aeabi_f2iz+0x3a>
 80011ce:	0242      	lsls	r2, r0, #9
 80011d0:	d105      	bne.n	80011de <__aeabi_f2iz+0x46>
 80011d2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011d6:	bf08      	it	eq
 80011d8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011dc:	4770      	bx	lr
 80011de:	f04f 0000 	mov.w	r0, #0
 80011e2:	4770      	bx	lr

080011e4 <ADC_Select_CHA3>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_Select_CHA3 (void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011f4:	2303      	movs	r3, #3
 80011f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <ADC_Select_CHA3+0x38>)
 8001206:	f001 fe03 	bl	8002e10 <HAL_ADC_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <ADC_Select_CHA3+0x30>
  {
    Error_Handler();
 8001210:	f001 f876 	bl	8002300 <Error_Handler>
  }
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000094 	.word	0x20000094

08001220 <ADC_Select_CHC0>:

void ADC_Select_CHC0 (void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001230:	230a      	movs	r3, #10
 8001232:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001234:	2301      	movs	r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <ADC_Select_CHC0+0x38>)
 8001242:	f001 fde5 	bl	8002e10 <HAL_ADC_ConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <ADC_Select_CHC0+0x30>
  {
    Error_Handler();
 800124c:	f001 f858 	bl	8002300 <Error_Handler>
  }
}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000094 	.word	0x20000094

0800125c <Motor_PWM_Right>:


void Motor_PWM_Right(int PWM){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

	if(PWM >= 0){
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	db10      	blt.n	800128c <Motor_PWM_Right+0x30>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001270:	4812      	ldr	r0, [pc, #72]	; (80012bc <Motor_PWM_Right+0x60>)
 8001272:	f002 fb5c 	bl	800392e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800127c:	480f      	ldr	r0, [pc, #60]	; (80012bc <Motor_PWM_Right+0x60>)
 800127e:	f002 fb56 	bl	800392e <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM);
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <Motor_PWM_Right+0x64>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM);

	}

}
 800128a:	e012      	b.n	80012b2 <Motor_PWM_Right+0x56>
		PWM = -PWM;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	425b      	negs	r3, r3
 8001290:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <Motor_PWM_Right+0x60>)
 800129a:	f002 fb48 	bl	800392e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <Motor_PWM_Right+0x60>)
 80012a6:	f002 fb42 	bl	800392e <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM);
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <Motor_PWM_Right+0x64>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40010800 	.word	0x40010800
 80012c0:	2000010c 	.word	0x2000010c

080012c4 <Motor_PWM_Left>:

void Motor_PWM_Left(int PWM){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

	if(PWM >= 0){
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	db10      	blt.n	80012f4 <Motor_PWM_Left+0x30>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012d8:	4812      	ldr	r0, [pc, #72]	; (8001324 <Motor_PWM_Left+0x60>)
 80012da:	f002 fb28 	bl	800392e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e4:	480f      	ldr	r0, [pc, #60]	; (8001324 <Motor_PWM_Left+0x60>)
 80012e6:	f002 fb22 	bl	800392e <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, PWM);
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <Motor_PWM_Left+0x64>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, PWM);

	}

}
 80012f2:	e012      	b.n	800131a <Motor_PWM_Left+0x56>
		PWM = -PWM;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	425b      	negs	r3, r3
 80012f8:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001300:	4808      	ldr	r0, [pc, #32]	; (8001324 <Motor_PWM_Left+0x60>)
 8001302:	f002 fb14 	bl	800392e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <Motor_PWM_Left+0x60>)
 800130e:	f002 fb0e 	bl	800392e <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, PWM);
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <Motor_PWM_Left+0x64>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	641a      	str	r2, [r3, #64]	; 0x40
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40010800 	.word	0x40010800
 8001328:	20000154 	.word	0x20000154

0800132c <nearPoint>:
	int x;
	int y;
	int angle;
};
float nearPoint(struct position point1,struct position point2)
{
 800132c:	b082      	sub	sp, #8
 800132e:	b5b0      	push	{r4, r5, r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	1d3c      	adds	r4, r7, #4
 8001336:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
	float dist = sqrt(pow(point1.x-point2.x,2)+pow(point1.y-point2.y,2));
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f8c2 	bl	80004cc <__aeabi_i2d>
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001350:	f004 fde2 	bl	8005f18 <pow>
 8001354:	4604      	mov	r4, r0
 8001356:	460d      	mov	r5, r1
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f8b4 	bl	80004cc <__aeabi_i2d>
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800136c:	f004 fdd4 	bl	8005f18 <pow>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4620      	mov	r0, r4
 8001376:	4629      	mov	r1, r5
 8001378:	f7fe ff5c 	bl	8000234 <__adddf3>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f004 fe30 	bl	8005fe8 <sqrt>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fbde 	bl	8000b50 <__aeabi_d2f>
 8001394:	4603      	mov	r3, r0
 8001396:	617b      	str	r3, [r7, #20]
	return dist;
 8001398:	697b      	ldr	r3, [r7, #20]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80013a4:	b002      	add	sp, #8
 80013a6:	4770      	bx	lr

080013a8 <circle>:

struct position circle(int r,struct position robot,struct position center,int point)
{
 80013a8:	b082      	sub	sp, #8
 80013aa:	b5b0      	push	{r4, r5, r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	6039      	str	r1, [r7, #0]
 80013b4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80013b8:	e881 000c 	stmia.w	r1, {r2, r3}
	struct position goPoint;
	goPoint.x = sin(point) * r + center.x;
 80013bc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80013be:	f7ff f885 	bl	80004cc <__aeabi_i2d>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	f004 fd5d 	bl	8005e88 <sin>
 80013ce:	4604      	mov	r4, r0
 80013d0:	460d      	mov	r5, r1
 80013d2:	6838      	ldr	r0, [r7, #0]
 80013d4:	f7ff f87a 	bl	80004cc <__aeabi_i2d>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4620      	mov	r0, r4
 80013de:	4629      	mov	r1, r5
 80013e0:	f7ff f8de 	bl	80005a0 <__aeabi_dmul>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4614      	mov	r4, r2
 80013ea:	461d      	mov	r5, r3
 80013ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f86c 	bl	80004cc <__aeabi_i2d>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4620      	mov	r0, r4
 80013fa:	4629      	mov	r1, r5
 80013fc:	f7fe ff1a 	bl	8000234 <__adddf3>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f7ff fb7a 	bl	8000b00 <__aeabi_d2iz>
 800140c:	4603      	mov	r3, r0
 800140e:	60fb      	str	r3, [r7, #12]
	goPoint.y = cos(point) * r + center.y;
 8001410:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001412:	f7ff f85b 	bl	80004cc <__aeabi_i2d>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	f004 fced 	bl	8005dfc <cos>
 8001422:	4604      	mov	r4, r0
 8001424:	460d      	mov	r5, r1
 8001426:	6838      	ldr	r0, [r7, #0]
 8001428:	f7ff f850 	bl	80004cc <__aeabi_i2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4620      	mov	r0, r4
 8001432:	4629      	mov	r1, r5
 8001434:	f7ff f8b4 	bl	80005a0 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4614      	mov	r4, r2
 800143e:	461d      	mov	r5, r3
 8001440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f842 	bl	80004cc <__aeabi_i2d>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4620      	mov	r0, r4
 800144e:	4629      	mov	r1, r5
 8001450:	f7fe fef0 	bl	8000234 <__adddf3>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff fb50 	bl	8000b00 <__aeabi_d2iz>
 8001460:	4603      	mov	r3, r0
 8001462:	613b      	str	r3, [r7, #16]
	goPoint.angle = (atan2(goPoint.y - robot.y, goPoint.x - robot.x)*180.0/3.14);
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f82e 	bl	80004cc <__aeabi_i2d>
 8001470:	4604      	mov	r4, r0
 8001472:	460d      	mov	r5, r1
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f826 	bl	80004cc <__aeabi_i2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4620      	mov	r0, r4
 8001486:	4629      	mov	r1, r5
 8001488:	f004 fd44 	bl	8005f14 <atan2>
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <circle+0x148>)
 8001492:	f7ff f885 	bl	80005a0 <__aeabi_dmul>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	a312      	add	r3, pc, #72	; (adr r3, 80014e8 <circle+0x140>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7ff f9a6 	bl	80007f4 <__aeabi_ddiv>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff fb26 	bl	8000b00 <__aeabi_d2iz>
 80014b4:	4603      	mov	r3, r0
 80014b6:	617b      	str	r3, [r7, #20]
	if(goPoint.angle < 0 )
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	da03      	bge.n	80014c6 <circle+0x11e>
		goPoint.angle = goPoint.angle + 360;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014c4:	617b      	str	r3, [r7, #20]
	return goPoint;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	461c      	mov	r4, r3
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80014e0:	b002      	add	sp, #8
 80014e2:	4770      	bx	lr
 80014e4:	f3af 8000 	nop.w
 80014e8:	51eb851f 	.word	0x51eb851f
 80014ec:	40091eb8 	.word	0x40091eb8
 80014f0:	40668000 	.word	0x40668000

080014f4 <turnPID>:
int turnPID(float kc,float kp,int dangle,int angleRobot)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	603b      	str	r3, [r7, #0]
float error = dangle-angleRobot;
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fc2b 	bl	8000d64 <__aeabi_i2f>
 800150e:	4603      	mov	r3, r0
 8001510:	61fb      	str	r3, [r7, #28]
	if(error > 180)
 8001512:	4936      	ldr	r1, [pc, #216]	; (80015ec <turnPID+0xf8>)
 8001514:	69f8      	ldr	r0, [r7, #28]
 8001516:	f7ff fe35 	bl	8001184 <__aeabi_fcmpgt>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d006      	beq.n	800152e <turnPID+0x3a>
		error = -360 + error;
 8001520:	4933      	ldr	r1, [pc, #204]	; (80015f0 <turnPID+0xfc>)
 8001522:	69f8      	ldr	r0, [r7, #28]
 8001524:	f7ff fb68 	bl	8000bf8 <__aeabi_fsub>
 8001528:	4603      	mov	r3, r0
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	e00c      	b.n	8001548 <turnPID+0x54>
	else if (error < -180)
 800152e:	4931      	ldr	r1, [pc, #196]	; (80015f4 <turnPID+0x100>)
 8001530:	69f8      	ldr	r0, [r7, #28]
 8001532:	f7ff fe09 	bl	8001148 <__aeabi_fcmplt>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <turnPID+0x54>
		error = error + 360;
 800153c:	492c      	ldr	r1, [pc, #176]	; (80015f0 <turnPID+0xfc>)
 800153e:	69f8      	ldr	r0, [r7, #28]
 8001540:	f7ff fb5c 	bl	8000bfc <__addsf3>
 8001544:	4603      	mov	r3, r0
 8001546:	61fb      	str	r3, [r7, #28]
	if(error > 45 || error < -45)
 8001548:	492b      	ldr	r1, [pc, #172]	; (80015f8 <turnPID+0x104>)
 800154a:	69f8      	ldr	r0, [r7, #28]
 800154c:	f7ff fe1a 	bl	8001184 <__aeabi_fcmpgt>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d106      	bne.n	8001564 <turnPID+0x70>
 8001556:	4929      	ldr	r1, [pc, #164]	; (80015fc <turnPID+0x108>)
 8001558:	69f8      	ldr	r0, [r7, #28]
 800155a:	f7ff fdf5 	bl	8001148 <__aeabi_fcmplt>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <turnPID+0x7e>
		kc /= 2;
 8001564:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff fd03 	bl	8000f74 <__aeabi_fdiv>
 800156e:	4603      	mov	r3, r0
 8001570:	60fb      	str	r3, [r7, #12]
allError[loopNumber] = error;
 8001572:	4b23      	ldr	r3, [pc, #140]	; (8001600 <turnPID+0x10c>)
 8001574:	681c      	ldr	r4, [r3, #0]
 8001576:	69f8      	ldr	r0, [r7, #28]
 8001578:	f7ff fe0e 	bl	8001198 <__aeabi_f2iz>
 800157c:	4603      	mov	r3, r0
 800157e:	4a21      	ldr	r2, [pc, #132]	; (8001604 <turnPID+0x110>)
 8001580:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

float sum=0;
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
for(int i=0;i<totalError;i++)
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	e010      	b.n	80015b2 <turnPID+0xbe>
{
	sum = allError[i]+sum;
 8001590:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <turnPID+0x110>)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fbe3 	bl	8000d64 <__aeabi_i2f>
 800159e:	4603      	mov	r3, r0
 80015a0:	4619      	mov	r1, r3
 80015a2:	69b8      	ldr	r0, [r7, #24]
 80015a4:	f7ff fb2a 	bl	8000bfc <__addsf3>
 80015a8:	4603      	mov	r3, r0
 80015aa:	61bb      	str	r3, [r7, #24]
for(int i=0;i<totalError;i++)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3301      	adds	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2b0e      	cmp	r3, #14
 80015b6:	ddeb      	ble.n	8001590 <turnPID+0x9c>
}
int turn = (error * kc) + (kp *sum);
 80015b8:	68f9      	ldr	r1, [r7, #12]
 80015ba:	69f8      	ldr	r0, [r7, #28]
 80015bc:	f7ff fc26 	bl	8000e0c <__aeabi_fmul>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461c      	mov	r4, r3
 80015c4:	69b9      	ldr	r1, [r7, #24]
 80015c6:	68b8      	ldr	r0, [r7, #8]
 80015c8:	f7ff fc20 	bl	8000e0c <__aeabi_fmul>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4620      	mov	r0, r4
 80015d2:	f7ff fb13 	bl	8000bfc <__addsf3>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fddd 	bl	8001198 <__aeabi_f2iz>
 80015de:	4603      	mov	r3, r0
 80015e0:	613b      	str	r3, [r7, #16]
return turn;
 80015e2:	693b      	ldr	r3, [r7, #16]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3724      	adds	r7, #36	; 0x24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd90      	pop	{r4, r7, pc}
 80015ec:	43340000 	.word	0x43340000
 80015f0:	43b40000 	.word	0x43b40000
 80015f4:	c3340000 	.word	0xc3340000
 80015f8:	42340000 	.word	0x42340000
 80015fc:	c2340000 	.word	0xc2340000
 8001600:	20000288 	.word	0x20000288
 8001604:	200002b4 	.word	0x200002b4

08001608 <HAL_UART_RxCpltCallback>:
//	currentFlag = 1;
//
//}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

	locFlag = 1;
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <HAL_UART_RxCpltCallback+0x18>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]

}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	200002f0 	.word	0x200002f0

08001624 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
if(htim -> Instance == TIM1){
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0a      	ldr	r2, [pc, #40]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d102      	bne.n	800163c <HAL_TIM_PeriodElapsedCallback+0x18>
	speedFlag = 1;
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
}

if(htim -> Instance == TIM4){
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a08      	ldr	r2, [pc, #32]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d104      	bne.n	8001650 <HAL_TIM_PeriodElapsedCallback+0x2c>

		second++;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	4a06      	ldr	r2, [pc, #24]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800164e:	6013      	str	r3, [r2, #0]
//  }


}

}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40012c00 	.word	0x40012c00
 8001660:	20000284 	.word	0x20000284
 8001664:	40000800 	.word	0x40000800
 8001668:	20000280 	.word	0x20000280

0800166c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]

	/////////// Right //////////
	if(GPIO_Pin == GPIO_PIN_6){
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	2b40      	cmp	r3, #64	; 0x40
 800167a:	d117      	bne.n	80016ac <HAL_GPIO_EXTI_Callback+0x40>

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7)){
 800167c:	2180      	movs	r1, #128	; 0x80
 800167e:	481b      	ldr	r0, [pc, #108]	; (80016ec <HAL_GPIO_EXTI_Callback+0x80>)
 8001680:	f002 f93e 	bl	8003900 <HAL_GPIO_ReadPin>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_GPIO_EXTI_Callback+0x30>
			counterRight++;
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x84>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	4a17      	ldr	r2, [pc, #92]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x84>)
 8001692:	6013      	str	r3, [r2, #0]
			forwardR = 1;
 8001694:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <HAL_GPIO_EXTI_Callback+0x88>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e007      	b.n	80016ac <HAL_GPIO_EXTI_Callback+0x40>
		}
		else{
			counterBackRight++;
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x8c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3301      	adds	r3, #1
 80016a2:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x8c>)
 80016a4:	6013      	str	r3, [r2, #0]
			forwardR = 0;
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_GPIO_EXTI_Callback+0x88>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
	}


	/////////// Left //////////

	if(GPIO_Pin == GPIO_PIN_7){
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	2b80      	cmp	r3, #128	; 0x80
 80016b0:	d117      	bne.n	80016e2 <HAL_GPIO_EXTI_Callback+0x76>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){
 80016b2:	2140      	movs	r1, #64	; 0x40
 80016b4:	4811      	ldr	r0, [pc, #68]	; (80016fc <HAL_GPIO_EXTI_Callback+0x90>)
 80016b6:	f002 f923 	bl	8003900 <HAL_GPIO_ReadPin>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <HAL_GPIO_EXTI_Callback+0x66>
			counterLeft++;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_GPIO_EXTI_Callback+0x94>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_GPIO_EXTI_Callback+0x94>)
 80016c8:	6013      	str	r3, [r2, #0]
			forwardL = 1;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_GPIO_EXTI_Callback+0x98>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
		else{
			counterBackLeft++;
			forwardL = 0;
		}
	}
}
 80016d0:	e007      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x76>
			counterBackLeft++;
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HAL_GPIO_EXTI_Callback+0x9c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <HAL_GPIO_EXTI_Callback+0x9c>)
 80016da:	6013      	str	r3, [r2, #0]
			forwardL = 0;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_GPIO_EXTI_Callback+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40011000 	.word	0x40011000
 80016f0:	20000228 	.word	0x20000228
 80016f4:	2000027c 	.word	0x2000027c
 80016f8:	20000238 	.word	0x20000238
 80016fc:	40010800 	.word	0x40010800
 8001700:	2000022c 	.word	0x2000022c
 8001704:	2000027d 	.word	0x2000027d
 8001708:	2000023c 	.word	0x2000023c
 800170c:	00000000 	.word	0x00000000

08001710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b090      	sub	sp, #64	; 0x40
 8001714:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
//	int a = 0;
	lPWM = 0;
 8001716:	4bae      	ldr	r3, [pc, #696]	; (80019d0 <main+0x2c0>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
//	rPWM = 1.3*lPWM;
	rPWM = 0;
 800171c:	4bad      	ldr	r3, [pc, #692]	; (80019d4 <main+0x2c4>)
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]

	rpmRightD = 30;
 8001722:	4bad      	ldr	r3, [pc, #692]	; (80019d8 <main+0x2c8>)
 8001724:	221e      	movs	r2, #30
 8001726:	601a      	str	r2, [r3, #0]
	rpmLeftD = 30;
 8001728:	4bac      	ldr	r3, [pc, #688]	; (80019dc <main+0x2cc>)
 800172a:	221e      	movs	r2, #30
 800172c:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800172e:	f001 f813 	bl	8002758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001732:	f000 fb19 	bl	8001d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001736:	f000 fd5b 	bl	80021f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800173a:	f000 fbf5 	bl	8001f28 <MX_TIM2_Init>
  MX_TIM3_Init();
 800173e:	f000 fc69 	bl	8002014 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001742:	f000 fba1 	bl	8001e88 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001746:	f000 fb6f 	bl	8001e28 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800174a:	f000 fd27 	bl	800219c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800174e:	f000 fcd7 	bl	8002100 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001752:	2104      	movs	r1, #4
 8001754:	48a2      	ldr	r0, [pc, #648]	; (80019e0 <main+0x2d0>)
 8001756:	f002 fffd 	bl	8004754 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800175a:	210c      	movs	r1, #12
 800175c:	48a1      	ldr	r0, [pc, #644]	; (80019e4 <main+0x2d4>)
 800175e:	f002 fff9 	bl	8004754 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim1);
 8001762:	48a1      	ldr	r0, [pc, #644]	; (80019e8 <main+0x2d8>)
 8001764:	f002 ff3e 	bl	80045e4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8001768:	48a0      	ldr	r0, [pc, #640]	; (80019ec <main+0x2dc>)
 800176a:	f002 ff3b 	bl	80045e4 <HAL_TIM_Base_Start_IT>

//	HAL_ADC_Start_DMA(&hadc1, &AD_RES, 1);

	////////////// left /////////////////////////////
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001774:	489e      	ldr	r0, [pc, #632]	; (80019f0 <main+0x2e0>)
 8001776:	f002 f8da 	bl	800392e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800177a:	2201      	movs	r2, #1
 800177c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001780:	489b      	ldr	r0, [pc, #620]	; (80019f0 <main+0x2e0>)
 8001782:	f002 f8d4 	bl	800392e <HAL_GPIO_WritePin>

	////////////// Right /////////////////////////////
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800178c:	4898      	ldr	r0, [pc, #608]	; (80019f0 <main+0x2e0>)
 800178e:	f002 f8ce 	bl	800392e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001792:	2201      	movs	r2, #1
 8001794:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001798:	4895      	ldr	r0, [pc, #596]	; (80019f0 <main+0x2e0>)
 800179a:	f002 f8c8 	bl	800392e <HAL_GPIO_WritePin>


	HAL_UART_Receive_IT(&huart1, Rx_data, 6);
 800179e:	2206      	movs	r2, #6
 80017a0:	4994      	ldr	r1, [pc, #592]	; (80019f4 <main+0x2e4>)
 80017a2:	4895      	ldr	r0, [pc, #596]	; (80019f8 <main+0x2e8>)
 80017a4:	f003 fee9 	bl	800557a <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		ADC_Select_CHA3();
 80017a8:	f7ff fd1c 	bl	80011e4 <ADC_Select_CHA3>
		HAL_ADC_Start(&hadc1);
 80017ac:	4893      	ldr	r0, [pc, #588]	; (80019fc <main+0x2ec>)
 80017ae:	f001 f943 	bl	8002a38 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1);
 80017b2:	2101      	movs	r1, #1
 80017b4:	4891      	ldr	r0, [pc, #580]	; (80019fc <main+0x2ec>)
 80017b6:	f001 fa19 	bl	8002bec <HAL_ADC_PollForConversion>
		readValueL = HAL_ADC_GetValue(&hadc1);
 80017ba:	4890      	ldr	r0, [pc, #576]	; (80019fc <main+0x2ec>)
 80017bc:	f001 fb1c 	bl	8002df8 <HAL_ADC_GetValue>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b8e      	ldr	r3, [pc, #568]	; (8001a00 <main+0x2f0>)
 80017c6:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 80017c8:	488c      	ldr	r0, [pc, #560]	; (80019fc <main+0x2ec>)
 80017ca:	f001 f9e3 	bl	8002b94 <HAL_ADC_Stop>

//		currentL = (float) readValueL * 3.3 / 4095 ;
		sumL += (float) readValueL * 3.3 / 4095 ;
 80017ce:	4b8d      	ldr	r3, [pc, #564]	; (8001a04 <main+0x2f4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fe8c 	bl	80004f0 <__aeabi_f2d>
 80017d8:	4604      	mov	r4, r0
 80017da:	460d      	mov	r5, r1
 80017dc:	4b88      	ldr	r3, [pc, #544]	; (8001a00 <main+0x2f0>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fabb 	bl	8000d5c <__aeabi_ui2f>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fe81 	bl	80004f0 <__aeabi_f2d>
 80017ee:	a374      	add	r3, pc, #464	; (adr r3, 80019c0 <main+0x2b0>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7fe fed4 	bl	80005a0 <__aeabi_dmul>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	a371      	add	r3, pc, #452	; (adr r3, 80019c8 <main+0x2b8>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7fe fff5 	bl	80007f4 <__aeabi_ddiv>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4620      	mov	r0, r4
 8001810:	4629      	mov	r1, r5
 8001812:	f7fe fd0f 	bl	8000234 <__adddf3>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff f997 	bl	8000b50 <__aeabi_d2f>
 8001822:	4603      	mov	r3, r0
 8001824:	4a77      	ldr	r2, [pc, #476]	; (8001a04 <main+0x2f4>)
 8001826:	6013      	str	r3, [r2, #0]
		contL++;
 8001828:	4b77      	ldr	r3, [pc, #476]	; (8001a08 <main+0x2f8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	4a76      	ldr	r2, [pc, #472]	; (8001a08 <main+0x2f8>)
 8001830:	6013      	str	r3, [r2, #0]
		if(contL >= 40){
 8001832:	4b75      	ldr	r3, [pc, #468]	; (8001a08 <main+0x2f8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b27      	cmp	r3, #39	; 0x27
 8001838:	dd14      	ble.n	8001864 <main+0x154>
			rawVoltageL = (float)sumL / 40;
 800183a:	4b72      	ldr	r3, [pc, #456]	; (8001a04 <main+0x2f4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4973      	ldr	r1, [pc, #460]	; (8001a0c <main+0x2fc>)
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fb97 	bl	8000f74 <__aeabi_fdiv>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	4b71      	ldr	r3, [pc, #452]	; (8001a10 <main+0x300>)
 800184c:	601a      	str	r2, [r3, #0]
			contL = 0;
 800184e:	4b6e      	ldr	r3, [pc, #440]	; (8001a08 <main+0x2f8>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
			sumL = 0;
 8001854:	4b6b      	ldr	r3, [pc, #428]	; (8001a04 <main+0x2f4>)
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
			currentL = rawVoltageL;
 800185c:	4b6c      	ldr	r3, [pc, #432]	; (8001a10 <main+0x300>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a6c      	ldr	r2, [pc, #432]	; (8001a14 <main+0x304>)
 8001862:	6013      	str	r3, [r2, #0]
		}

		ADC_Select_CHC0();
 8001864:	f7ff fcdc 	bl	8001220 <ADC_Select_CHC0>
		HAL_ADC_Start(&hadc1);
 8001868:	4864      	ldr	r0, [pc, #400]	; (80019fc <main+0x2ec>)
 800186a:	f001 f8e5 	bl	8002a38 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1);
 800186e:	2101      	movs	r1, #1
 8001870:	4862      	ldr	r0, [pc, #392]	; (80019fc <main+0x2ec>)
 8001872:	f001 f9bb 	bl	8002bec <HAL_ADC_PollForConversion>
		readValueR = HAL_ADC_GetValue(&hadc1);
 8001876:	4861      	ldr	r0, [pc, #388]	; (80019fc <main+0x2ec>)
 8001878:	f001 fabe 	bl	8002df8 <HAL_ADC_GetValue>
 800187c:	4603      	mov	r3, r0
 800187e:	b29a      	uxth	r2, r3
 8001880:	4b65      	ldr	r3, [pc, #404]	; (8001a18 <main+0x308>)
 8001882:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 8001884:	485d      	ldr	r0, [pc, #372]	; (80019fc <main+0x2ec>)
 8001886:	f001 f985 	bl	8002b94 <HAL_ADC_Stop>

//		currentR = (float) readValueR * 3.3 / 4095 ;
		sumR += (float) readValueR * 3.3 / 4095 ;
 800188a:	4b64      	ldr	r3, [pc, #400]	; (8001a1c <main+0x30c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe2e 	bl	80004f0 <__aeabi_f2d>
 8001894:	4604      	mov	r4, r0
 8001896:	460d      	mov	r5, r1
 8001898:	4b5f      	ldr	r3, [pc, #380]	; (8001a18 <main+0x308>)
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fa5d 	bl	8000d5c <__aeabi_ui2f>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe23 	bl	80004f0 <__aeabi_f2d>
 80018aa:	a345      	add	r3, pc, #276	; (adr r3, 80019c0 <main+0x2b0>)
 80018ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b0:	f7fe fe76 	bl	80005a0 <__aeabi_dmul>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	a342      	add	r3, pc, #264	; (adr r3, 80019c8 <main+0x2b8>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7fe ff97 	bl	80007f4 <__aeabi_ddiv>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4620      	mov	r0, r4
 80018cc:	4629      	mov	r1, r5
 80018ce:	f7fe fcb1 	bl	8000234 <__adddf3>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	f7ff f939 	bl	8000b50 <__aeabi_d2f>
 80018de:	4603      	mov	r3, r0
 80018e0:	4a4e      	ldr	r2, [pc, #312]	; (8001a1c <main+0x30c>)
 80018e2:	6013      	str	r3, [r2, #0]
		contR++;
 80018e4:	4b4e      	ldr	r3, [pc, #312]	; (8001a20 <main+0x310>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	3301      	adds	r3, #1
 80018ea:	4a4d      	ldr	r2, [pc, #308]	; (8001a20 <main+0x310>)
 80018ec:	6013      	str	r3, [r2, #0]
		if(contR >= 40){
 80018ee:	4b4c      	ldr	r3, [pc, #304]	; (8001a20 <main+0x310>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b27      	cmp	r3, #39	; 0x27
 80018f4:	dd14      	ble.n	8001920 <main+0x210>
			rawVoltageR = (float)sumR / 40;
 80018f6:	4b49      	ldr	r3, [pc, #292]	; (8001a1c <main+0x30c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4944      	ldr	r1, [pc, #272]	; (8001a0c <main+0x2fc>)
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fb39 	bl	8000f74 <__aeabi_fdiv>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <main+0x314>)
 8001908:	601a      	str	r2, [r3, #0]
			contR = 0;
 800190a:	4b45      	ldr	r3, [pc, #276]	; (8001a20 <main+0x310>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
			sumR = 0;
 8001910:	4b42      	ldr	r3, [pc, #264]	; (8001a1c <main+0x30c>)
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
			currentR = rawVoltageR;
 8001918:	4b42      	ldr	r3, [pc, #264]	; (8001a24 <main+0x314>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a42      	ldr	r2, [pc, #264]	; (8001a28 <main+0x318>)
 800191e:	6013      	str	r3, [r2, #0]
		}


if(speedFlag){
 8001920:	4b42      	ldr	r3, [pc, #264]	; (8001a2c <main+0x31c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d040      	beq.n	80019aa <main+0x29a>

	//60000/(TIM1_PERIOD+1)
	if(forwardR){
 8001928:	4b41      	ldr	r3, [pc, #260]	; (8001a30 <main+0x320>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d007      	beq.n	8001940 <main+0x230>
	rpmRight = (counterRight * 60000/(TIM1_PERIOD+1))/NUM_OF_HOLES;
 8001930:	4b40      	ldr	r3, [pc, #256]	; (8001a34 <main+0x324>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	0fda      	lsrs	r2, r3, #31
 8001936:	4413      	add	r3, r2
 8001938:	105b      	asrs	r3, r3, #1
 800193a:	461a      	mov	r2, r3
 800193c:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <main+0x328>)
 800193e:	601a      	str	r2, [r3, #0]
	}
	if(forwardL){
 8001940:	4b3e      	ldr	r3, [pc, #248]	; (8001a3c <main+0x32c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <main+0x248>
	rpmLeft = (counterLeft *  60000/(TIM1_PERIOD+1))/NUM_OF_HOLES;
 8001948:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <main+0x330>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	0fda      	lsrs	r2, r3, #31
 800194e:	4413      	add	r3, r2
 8001950:	105b      	asrs	r3, r3, #1
 8001952:	461a      	mov	r2, r3
 8001954:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <main+0x334>)
 8001956:	601a      	str	r2, [r3, #0]
	}

	if(!forwardR){
 8001958:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <main+0x320>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d108      	bne.n	8001972 <main+0x262>
	rpmRight = -(counterBackRight *  60000/(TIM1_PERIOD+1))/NUM_OF_HOLES;
 8001960:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <main+0x338>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0fda      	lsrs	r2, r3, #31
 8001966:	4413      	add	r3, r2
 8001968:	105b      	asrs	r3, r3, #1
 800196a:	425b      	negs	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <main+0x328>)
 8001970:	601a      	str	r2, [r3, #0]
	}
	if(!forwardL){
 8001972:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <main+0x32c>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d108      	bne.n	800198c <main+0x27c>
	rpmLeft = -(counterBackLeft *  60000/(TIM1_PERIOD+1))/NUM_OF_HOLES;
 800197a:	4b34      	ldr	r3, [pc, #208]	; (8001a4c <main+0x33c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	0fda      	lsrs	r2, r3, #31
 8001980:	4413      	add	r3, r2
 8001982:	105b      	asrs	r3, r3, #1
 8001984:	425b      	negs	r3, r3
 8001986:	461a      	mov	r2, r3
 8001988:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <main+0x334>)
 800198a:	601a      	str	r2, [r3, #0]
	}


	counterBackRight = 0;
 800198c:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <main+0x338>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
	counterBackLeft = 0;
 8001992:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <main+0x33c>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
	counterRight = 0;
 8001998:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <main+0x324>)
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
	counterLeft = 0;
 800199e:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <main+0x330>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
	speedFlag = 0;
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <main+0x31c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]

}

if(locFlag){
 80019aa:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <main+0x340>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d07c      	beq.n	8001aac <main+0x39c>

	x = Rx_data[0];
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <main+0x2e4>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <main+0x344>)
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e04c      	b.n	8001a58 <main+0x348>
 80019be:	bf00      	nop
 80019c0:	66666666 	.word	0x66666666
 80019c4:	400a6666 	.word	0x400a6666
 80019c8:	00000000 	.word	0x00000000
 80019cc:	40affe00 	.word	0x40affe00
 80019d0:	2000024c 	.word	0x2000024c
 80019d4:	20000248 	.word	0x20000248
 80019d8:	20000240 	.word	0x20000240
 80019dc:	20000244 	.word	0x20000244
 80019e0:	2000010c 	.word	0x2000010c
 80019e4:	20000154 	.word	0x20000154
 80019e8:	200000c4 	.word	0x200000c4
 80019ec:	2000019c 	.word	0x2000019c
 80019f0:	40010800 	.word	0x40010800
 80019f4:	200002a8 	.word	0x200002a8
 80019f8:	200001e4 	.word	0x200001e4
 80019fc:	20000094 	.word	0x20000094
 8001a00:	20000260 	.word	0x20000260
 8001a04:	2000026c 	.word	0x2000026c
 8001a08:	20000258 	.word	0x20000258
 8001a0c:	42200000 	.word	0x42200000
 8001a10:	20000264 	.word	0x20000264
 8001a14:	20000274 	.word	0x20000274
 8001a18:	20000262 	.word	0x20000262
 8001a1c:	20000270 	.word	0x20000270
 8001a20:	2000025c 	.word	0x2000025c
 8001a24:	20000268 	.word	0x20000268
 8001a28:	20000278 	.word	0x20000278
 8001a2c:	20000284 	.word	0x20000284
 8001a30:	2000027c 	.word	0x2000027c
 8001a34:	20000228 	.word	0x20000228
 8001a38:	20000230 	.word	0x20000230
 8001a3c:	2000027d 	.word	0x2000027d
 8001a40:	2000022c 	.word	0x2000022c
 8001a44:	20000234 	.word	0x20000234
 8001a48:	20000238 	.word	0x20000238
 8001a4c:	2000023c 	.word	0x2000023c
 8001a50:	200002f0 	.word	0x200002f0
 8001a54:	200002f4 	.word	0x200002f4
	x |= Rx_data[1]<<8;
 8001a58:	4b9d      	ldr	r3, [pc, #628]	; (8001cd0 <main+0x5c0>)
 8001a5a:	785b      	ldrb	r3, [r3, #1]
 8001a5c:	021a      	lsls	r2, r3, #8
 8001a5e:	4b9d      	ldr	r3, [pc, #628]	; (8001cd4 <main+0x5c4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	4a9b      	ldr	r2, [pc, #620]	; (8001cd4 <main+0x5c4>)
 8001a66:	6013      	str	r3, [r2, #0]
	y = Rx_data[2];
 8001a68:	4b99      	ldr	r3, [pc, #612]	; (8001cd0 <main+0x5c0>)
 8001a6a:	789b      	ldrb	r3, [r3, #2]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b9a      	ldr	r3, [pc, #616]	; (8001cd8 <main+0x5c8>)
 8001a70:	601a      	str	r2, [r3, #0]
	y |= Rx_data[3]<<8;
 8001a72:	4b97      	ldr	r3, [pc, #604]	; (8001cd0 <main+0x5c0>)
 8001a74:	78db      	ldrb	r3, [r3, #3]
 8001a76:	021a      	lsls	r2, r3, #8
 8001a78:	4b97      	ldr	r3, [pc, #604]	; (8001cd8 <main+0x5c8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	4a96      	ldr	r2, [pc, #600]	; (8001cd8 <main+0x5c8>)
 8001a80:	6013      	str	r3, [r2, #0]
	angle = Rx_data[4];
 8001a82:	4b93      	ldr	r3, [pc, #588]	; (8001cd0 <main+0x5c0>)
 8001a84:	791b      	ldrb	r3, [r3, #4]
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b94      	ldr	r3, [pc, #592]	; (8001cdc <main+0x5cc>)
 8001a8a:	601a      	str	r2, [r3, #0]
	angle |= Rx_data[5]<<8;
 8001a8c:	4b90      	ldr	r3, [pc, #576]	; (8001cd0 <main+0x5c0>)
 8001a8e:	795b      	ldrb	r3, [r3, #5]
 8001a90:	021a      	lsls	r2, r3, #8
 8001a92:	4b92      	ldr	r3, [pc, #584]	; (8001cdc <main+0x5cc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	4a90      	ldr	r2, [pc, #576]	; (8001cdc <main+0x5cc>)
 8001a9a:	6013      	str	r3, [r2, #0]

//	HAL_UART_Transmit(&huart1, Rx_data, sizeof(Rx_data), 10);
	HAL_UART_Receive_IT(&huart1, Rx_data, 6);
 8001a9c:	2206      	movs	r2, #6
 8001a9e:	498c      	ldr	r1, [pc, #560]	; (8001cd0 <main+0x5c0>)
 8001aa0:	488f      	ldr	r0, [pc, #572]	; (8001ce0 <main+0x5d0>)
 8001aa2:	f003 fd6a 	bl	800557a <HAL_UART_Receive_IT>
	locFlag = 0;
 8001aa6:	4b8f      	ldr	r3, [pc, #572]	; (8001ce4 <main+0x5d4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]

//dangle = (atan2((370.0-y),(470.0-x)))*180.0/3.14;
//	if(dangle < 0 )
//		dangle = dangle + 360;
//speedAngle = turnPID(0.6,0.0015,dangle,angle);
loopNumber = loopNumber+1;
 8001aac:	4b8e      	ldr	r3, [pc, #568]	; (8001ce8 <main+0x5d8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	4a8d      	ldr	r2, [pc, #564]	; (8001ce8 <main+0x5d8>)
 8001ab4:	6013      	str	r3, [r2, #0]
if(loopNumber>=totalError)
 8001ab6:	4b8c      	ldr	r3, [pc, #560]	; (8001ce8 <main+0x5d8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b0e      	cmp	r3, #14
 8001abc:	dd02      	ble.n	8001ac4 <main+0x3b4>
	loopNumber=0;
 8001abe:	4b8a      	ldr	r3, [pc, #552]	; (8001ce8 <main+0x5d8>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
struct position robot;
robot.x =x;
 8001ac4:	4b83      	ldr	r3, [pc, #524]	; (8001cd4 <main+0x5c4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
robot.y = y;
 8001aca:	4b83      	ldr	r3, [pc, #524]	; (8001cd8 <main+0x5c8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	61fb      	str	r3, [r7, #28]
robot.angle=angle;
 8001ad0:	4b82      	ldr	r3, [pc, #520]	; (8001cdc <main+0x5cc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	623b      	str	r3, [r7, #32]
struct position center;
center.x = 470;
 8001ad6:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8001ada:	60fb      	str	r3, [r7, #12]
center.y = 370;
 8001adc:	f44f 73b9 	mov.w	r3, #370	; 0x172
 8001ae0:	613b      	str	r3, [r7, #16]


struct position goPoint = circle(100,robot,center,loopNumberPoint*(2*3.14/circlePoint));
 8001ae2:	4b82      	ldr	r3, [pc, #520]	; (8001cec <main+0x5dc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fcf0 	bl	80004cc <__aeabi_i2d>
 8001aec:	a374      	add	r3, pc, #464	; (adr r3, 8001cc0 <main+0x5b0>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe fd55 	bl	80005a0 <__aeabi_dmul>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7fe ffff 	bl	8000b00 <__aeabi_d2iz>
 8001b02:	4603      	mov	r3, r0
 8001b04:	463d      	mov	r5, r7
 8001b06:	9304      	str	r3, [sp, #16]
 8001b08:	ac01      	add	r4, sp, #4
 8001b0a:	f107 030c 	add.w	r3, r7, #12
 8001b0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	f107 0318 	add.w	r3, r7, #24
 8001b1e:	cb0c      	ldmia	r3, {r2, r3}
 8001b20:	2164      	movs	r1, #100	; 0x64
 8001b22:	4628      	mov	r0, r5
 8001b24:	f7ff fc40 	bl	80013a8 <circle>
if(nearPoint(goPoint,robot)<20)
 8001b28:	466a      	mov	r2, sp
 8001b2a:	f107 031c 	add.w	r3, r7, #28
 8001b2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b32:	e882 0003 	stmia.w	r2, {r0, r1}
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	463a      	mov	r2, r7
 8001b3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b3c:	f7ff fbf6 	bl	800132c <nearPoint>
 8001b40:	4603      	mov	r3, r0
 8001b42:	496b      	ldr	r1, [pc, #428]	; (8001cf0 <main+0x5e0>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff faff 	bl	8001148 <__aeabi_fcmplt>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d004      	beq.n	8001b5a <main+0x44a>
{
	loopNumberPoint = loopNumberPoint+1;
 8001b50:	4b66      	ldr	r3, [pc, #408]	; (8001cec <main+0x5dc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	4a65      	ldr	r2, [pc, #404]	; (8001cec <main+0x5dc>)
 8001b58:	6013      	str	r3, [r2, #0]
}
if(loopNumberPoint>circlePoint)
 8001b5a:	4b64      	ldr	r3, [pc, #400]	; (8001cec <main+0x5dc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b14      	cmp	r3, #20
 8001b60:	dd02      	ble.n	8001b68 <main+0x458>
{
	loopNumberPoint = 0;
 8001b62:	4b62      	ldr	r3, [pc, #392]	; (8001cec <main+0x5dc>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
}
speedAngle = turnPID(0.6,0.0015,goPoint.angle,robot.angle);
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	4961      	ldr	r1, [pc, #388]	; (8001cf4 <main+0x5e4>)
 8001b6e:	4862      	ldr	r0, [pc, #392]	; (8001cf8 <main+0x5e8>)
 8001b70:	f7ff fcc0 	bl	80014f4 <turnPID>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4a61      	ldr	r2, [pc, #388]	; (8001cfc <main+0x5ec>)
 8001b78:	6013      	str	r3, [r2, #0]
//loopNumber = loopNumber+1;
//if(loopNumber>=totalError)
//	loopNumber=0;
//Motor_PWM_Right(speedAngle);
//Motor_PWM_Left(-speedAngle);
int addSpeed = 30;
 8001b7a:	231e      	movs	r3, #30
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24




/////////////////// Torque Control /////////////////////////////////////
	torRightD = 400;
 8001b7e:	4b60      	ldr	r3, [pc, #384]	; (8001d00 <main+0x5f0>)
 8001b80:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001b84:	601a      	str	r2, [r3, #0]
	torLeftD = 400;
 8001b86:	4b5f      	ldr	r3, [pc, #380]	; (8001d04 <main+0x5f4>)
 8001b88:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001b8c:	601a      	str	r2, [r3, #0]

		if(rPWM < 0)
 8001b8e:	4b5e      	ldr	r3, [pc, #376]	; (8001d08 <main+0x5f8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	da05      	bge.n	8001ba2 <main+0x492>
			currentR = -currentR;
 8001b96:	4b5d      	ldr	r3, [pc, #372]	; (8001d0c <main+0x5fc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b9e:	4a5b      	ldr	r2, [pc, #364]	; (8001d0c <main+0x5fc>)
 8001ba0:	6013      	str	r3, [r2, #0]
		torRight = currentR * KTR;
 8001ba2:	4b5a      	ldr	r3, [pc, #360]	; (8001d0c <main+0x5fc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a5a      	ldr	r2, [pc, #360]	; (8001d10 <main+0x600>)
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff f92d 	bl	8000e0c <__aeabi_fmul>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff faef 	bl	8001198 <__aeabi_f2iz>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4a55      	ldr	r2, [pc, #340]	; (8001d14 <main+0x604>)
 8001bbe:	6013      	str	r3, [r2, #0]
		errorTorRight = torRightD - torRight;
 8001bc0:	4b4f      	ldr	r3, [pc, #316]	; (8001d00 <main+0x5f0>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b53      	ldr	r3, [pc, #332]	; (8001d14 <main+0x604>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	4a53      	ldr	r2, [pc, #332]	; (8001d18 <main+0x608>)
 8001bcc:	6013      	str	r3, [r2, #0]

		delta_rPWM = 0.01*errorTorRight;
 8001bce:	4b52      	ldr	r3, [pc, #328]	; (8001d18 <main+0x608>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fc7a 	bl	80004cc <__aeabi_i2d>
 8001bd8:	a33b      	add	r3, pc, #236	; (adr r3, 8001cc8 <main+0x5b8>)
 8001bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bde:	f7fe fcdf 	bl	80005a0 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f7fe ff89 	bl	8000b00 <__aeabi_d2iz>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4a4a      	ldr	r2, [pc, #296]	; (8001d1c <main+0x60c>)
 8001bf2:	6013      	str	r3, [r2, #0]

		rPWM = rPWM + delta_rPWM;
 8001bf4:	4b44      	ldr	r3, [pc, #272]	; (8001d08 <main+0x5f8>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b48      	ldr	r3, [pc, #288]	; (8001d1c <main+0x60c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4a42      	ldr	r2, [pc, #264]	; (8001d08 <main+0x5f8>)
 8001c00:	6013      	str	r3, [r2, #0]
		if(rPWM > PWM_PERIOD)
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <main+0x5f8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c0a:	db04      	blt.n	8001c16 <main+0x506>
			rPWM = PWM_PERIOD;
 8001c0c:	4b3e      	ldr	r3, [pc, #248]	; (8001d08 <main+0x5f8>)
 8001c0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e007      	b.n	8001c26 <main+0x516>
		else if(rPWM < -PWM_PERIOD)
 8001c16:	4b3c      	ldr	r3, [pc, #240]	; (8001d08 <main+0x5f8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001c1e:	dc02      	bgt.n	8001c26 <main+0x516>
			rPWM = -PWM_PERIOD;
 8001c20:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <main+0x5f8>)
 8001c22:	4a3f      	ldr	r2, [pc, #252]	; (8001d20 <main+0x610>)
 8001c24:	601a      	str	r2, [r3, #0]

		HAL_Delay(3);
 8001c26:	2003      	movs	r0, #3
 8001c28:	f000 fdf8 	bl	800281c <HAL_Delay>
		Motor_PWM_Right(rPWM);
 8001c2c:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <main+0x5f8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fb13 	bl	800125c <Motor_PWM_Right>


		if(lPWM < 0)
 8001c36:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <main+0x614>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	da05      	bge.n	8001c4a <main+0x53a>
			currentL = -currentL;
 8001c3e:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <main+0x618>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c46:	4a38      	ldr	r2, [pc, #224]	; (8001d28 <main+0x618>)
 8001c48:	6013      	str	r3, [r2, #0]
		torLeft = currentL * KTL;
 8001c4a:	4b37      	ldr	r3, [pc, #220]	; (8001d28 <main+0x618>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a37      	ldr	r2, [pc, #220]	; (8001d2c <main+0x61c>)
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff f8d9 	bl	8000e0c <__aeabi_fmul>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fa9b 	bl	8001198 <__aeabi_f2iz>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4a32      	ldr	r2, [pc, #200]	; (8001d30 <main+0x620>)
 8001c66:	6013      	str	r3, [r2, #0]
		errorTorLeft = torLeftD - torLeft;
 8001c68:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <main+0x5f4>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b30      	ldr	r3, [pc, #192]	; (8001d30 <main+0x620>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	4a30      	ldr	r2, [pc, #192]	; (8001d34 <main+0x624>)
 8001c74:	6013      	str	r3, [r2, #0]

		delta_lPWM = 0.01*errorTorLeft;
 8001c76:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <main+0x624>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fc26 	bl	80004cc <__aeabi_i2d>
 8001c80:	a311      	add	r3, pc, #68	; (adr r3, 8001cc8 <main+0x5b8>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	f7fe fc8b 	bl	80005a0 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe ff35 	bl	8000b00 <__aeabi_d2iz>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4a27      	ldr	r2, [pc, #156]	; (8001d38 <main+0x628>)
 8001c9a:	6013      	str	r3, [r2, #0]

		lPWM = lPWM + delta_lPWM;
 8001c9c:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <main+0x614>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <main+0x628>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <main+0x614>)
 8001ca8:	6013      	str	r3, [r2, #0]
		if(lPWM > PWM_PERIOD)
 8001caa:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <main+0x614>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cb2:	db43      	blt.n	8001d3c <main+0x62c>
			lPWM = PWM_PERIOD;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <main+0x614>)
 8001cb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e046      	b.n	8001d4c <main+0x63c>
 8001cbe:	bf00      	nop
 8001cc0:	74bc6a7f 	.word	0x74bc6a7f
 8001cc4:	3fd41893 	.word	0x3fd41893
 8001cc8:	47ae147b 	.word	0x47ae147b
 8001ccc:	3f847ae1 	.word	0x3f847ae1
 8001cd0:	200002a8 	.word	0x200002a8
 8001cd4:	200002f4 	.word	0x200002f4
 8001cd8:	200002f8 	.word	0x200002f8
 8001cdc:	200002fc 	.word	0x200002fc
 8001ce0:	200001e4 	.word	0x200001e4
 8001ce4:	200002f0 	.word	0x200002f0
 8001ce8:	20000288 	.word	0x20000288
 8001cec:	200002b0 	.word	0x200002b0
 8001cf0:	41a00000 	.word	0x41a00000
 8001cf4:	3ac49ba6 	.word	0x3ac49ba6
 8001cf8:	3f19999a 	.word	0x3f19999a
 8001cfc:	200002a4 	.word	0x200002a4
 8001d00:	20000294 	.word	0x20000294
 8001d04:	20000298 	.word	0x20000298
 8001d08:	20000248 	.word	0x20000248
 8001d0c:	20000278 	.word	0x20000278
 8001d10:	20000004 	.word	0x20000004
 8001d14:	2000029c 	.word	0x2000029c
 8001d18:	2000028c 	.word	0x2000028c
 8001d1c:	20000250 	.word	0x20000250
 8001d20:	fffffc19 	.word	0xfffffc19
 8001d24:	2000024c 	.word	0x2000024c
 8001d28:	20000274 	.word	0x20000274
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	200002a0 	.word	0x200002a0
 8001d34:	20000290 	.word	0x20000290
 8001d38:	20000254 	.word	0x20000254
		else if(lPWM < -PWM_PERIOD)
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <main+0x650>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001d44:	dc02      	bgt.n	8001d4c <main+0x63c>
			lPWM = -PWM_PERIOD;
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <main+0x650>)
 8001d48:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <main+0x654>)
 8001d4a:	601a      	str	r2, [r3, #0]

		HAL_Delay(3);
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	f000 fd65 	bl	800281c <HAL_Delay>
		Motor_PWM_Left(lPWM);
 8001d52:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <main+0x650>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fab4 	bl	80012c4 <Motor_PWM_Left>
  {
 8001d5c:	e524      	b.n	80017a8 <main+0x98>
 8001d5e:	bf00      	nop
 8001d60:	2000024c 	.word	0x2000024c
 8001d64:	fffffc19 	.word	0xfffffc19

08001d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b096      	sub	sp, #88	; 0x58
 8001d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d72:	2228      	movs	r2, #40	; 0x28
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f004 f838 	bl	8005dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
 8001d98:	611a      	str	r2, [r3, #16]
 8001d9a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001da0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001da6:	2300      	movs	r3, #0
 8001da8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001daa:	2301      	movs	r3, #1
 8001dac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dae:	2302      	movs	r3, #2
 8001db0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001db6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001db8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001dbc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f001 fde4 	bl	8003990 <HAL_RCC_OscConfig>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001dce:	f000 fa97 	bl	8002300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd2:	230f      	movs	r3, #15
 8001dd4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	2102      	movs	r1, #2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f002 f850 	bl	8003e94 <HAL_RCC_ClockConfig>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001dfa:	f000 fa81 	bl	8002300 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e06:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f002 fa00 	bl	8004210 <HAL_RCCEx_PeriphCLKConfig>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001e16:	f000 fa73 	bl	8002300 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001e1a:	f002 f925 	bl	8004068 <HAL_RCC_EnableCSS>
}
 8001e1e:	bf00      	nop
 8001e20:	3758      	adds	r7, #88	; 0x58
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <MX_ADC1_Init+0x58>)
 8001e3a:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <MX_ADC1_Init+0x5c>)
 8001e3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <MX_ADC1_Init+0x58>)
 8001e40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <MX_ADC1_Init+0x58>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <MX_ADC1_Init+0x58>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <MX_ADC1_Init+0x58>)
 8001e54:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001e58:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <MX_ADC1_Init+0x58>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <MX_ADC1_Init+0x58>)
 8001e62:	2202      	movs	r2, #2
 8001e64:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e66:	4806      	ldr	r0, [pc, #24]	; (8001e80 <MX_ADC1_Init+0x58>)
 8001e68:	f000 fcfc 	bl	8002864 <HAL_ADC_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001e72:	f000 fa45 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000094 	.word	0x20000094
 8001e84:	40012400 	.word	0x40012400

08001e88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <MX_TIM1_Init+0x98>)
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <MX_TIM1_Init+0x9c>)
 8001ea8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 23999;
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <MX_TIM1_Init+0x98>)
 8001eac:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8001eb0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <MX_TIM1_Init+0x98>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_PERIOD;
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <MX_TIM1_Init+0x98>)
 8001eba:	2209      	movs	r2, #9
 8001ebc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <MX_TIM1_Init+0x98>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ec4:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <MX_TIM1_Init+0x98>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <MX_TIM1_Init+0x98>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ed0:	4813      	ldr	r0, [pc, #76]	; (8001f20 <MX_TIM1_Init+0x98>)
 8001ed2:	f002 fb37 	bl	8004544 <HAL_TIM_Base_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001edc:	f000 fa10 	bl	8002300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ee6:	f107 0308 	add.w	r3, r7, #8
 8001eea:	4619      	mov	r1, r3
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <MX_TIM1_Init+0x98>)
 8001eee:	f002 feb1 	bl	8004c54 <HAL_TIM_ConfigClockSource>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ef8:	f000 fa02 	bl	8002300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efc:	2300      	movs	r3, #0
 8001efe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f04:	463b      	mov	r3, r7
 8001f06:	4619      	mov	r1, r3
 8001f08:	4805      	ldr	r0, [pc, #20]	; (8001f20 <MX_TIM1_Init+0x98>)
 8001f0a:	f003 fa6b 	bl	80053e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f14:	f000 f9f4 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f18:	bf00      	nop
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200000c4 	.word	0x200000c4
 8001f24:	40012c00 	.word	0x40012c00

08001f28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08e      	sub	sp, #56	; 0x38
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f3c:	f107 0320 	add.w	r3, r7, #32
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
 8001f54:	615a      	str	r2, [r3, #20]
 8001f56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f58:	4b2d      	ldr	r3, [pc, #180]	; (8002010 <MX_TIM2_Init+0xe8>)
 8001f5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PRESCALER;
 8001f60:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <MX_TIM2_Init+0xe8>)
 8001f62:	2202      	movs	r2, #2
 8001f64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f66:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <MX_TIM2_Init+0xe8>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_PERIOD;
 8001f6c:	4b28      	ldr	r3, [pc, #160]	; (8002010 <MX_TIM2_Init+0xe8>)
 8001f6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f74:	4b26      	ldr	r3, [pc, #152]	; (8002010 <MX_TIM2_Init+0xe8>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7a:	4b25      	ldr	r3, [pc, #148]	; (8002010 <MX_TIM2_Init+0xe8>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f80:	4823      	ldr	r0, [pc, #140]	; (8002010 <MX_TIM2_Init+0xe8>)
 8001f82:	f002 fadf 	bl	8004544 <HAL_TIM_Base_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001f8c:	f000 f9b8 	bl	8002300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	481c      	ldr	r0, [pc, #112]	; (8002010 <MX_TIM2_Init+0xe8>)
 8001f9e:	f002 fe59 	bl	8004c54 <HAL_TIM_ConfigClockSource>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001fa8:	f000 f9aa 	bl	8002300 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fac:	4818      	ldr	r0, [pc, #96]	; (8002010 <MX_TIM2_Init+0xe8>)
 8001fae:	f002 fb79 	bl	80046a4 <HAL_TIM_PWM_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001fb8:	f000 f9a2 	bl	8002300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fc4:	f107 0320 	add.w	r3, r7, #32
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4811      	ldr	r0, [pc, #68]	; (8002010 <MX_TIM2_Init+0xe8>)
 8001fcc:	f003 fa0a 	bl	80053e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001fd6:	f000 f993 	bl	8002300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fda:	2360      	movs	r3, #96	; 0x60
 8001fdc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	2204      	movs	r2, #4
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4807      	ldr	r0, [pc, #28]	; (8002010 <MX_TIM2_Init+0xe8>)
 8001ff2:	f002 fd71 	bl	8004ad8 <HAL_TIM_PWM_ConfigChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001ffc:	f000 f980 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002000:	4803      	ldr	r0, [pc, #12]	; (8002010 <MX_TIM2_Init+0xe8>)
 8002002:	f000 fa71 	bl	80024e8 <HAL_TIM_MspPostInit>

}
 8002006:	bf00      	nop
 8002008:	3738      	adds	r7, #56	; 0x38
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2000010c 	.word	0x2000010c

08002014 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08e      	sub	sp, #56	; 0x38
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002028:	f107 0320 	add.w	r3, r7, #32
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
 8002040:	615a      	str	r2, [r3, #20]
 8002042:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002044:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <MX_TIM3_Init+0xe4>)
 8002046:	4a2d      	ldr	r2, [pc, #180]	; (80020fc <MX_TIM3_Init+0xe8>)
 8002048:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = PRESCALER;
 800204a:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <MX_TIM3_Init+0xe4>)
 800204c:	2202      	movs	r2, #2
 800204e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002050:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <MX_TIM3_Init+0xe4>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PWM_PERIOD;
 8002056:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <MX_TIM3_Init+0xe4>)
 8002058:	f240 32e7 	movw	r2, #999	; 0x3e7
 800205c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205e:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <MX_TIM3_Init+0xe4>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002064:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <MX_TIM3_Init+0xe4>)
 8002066:	2200      	movs	r2, #0
 8002068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800206a:	4823      	ldr	r0, [pc, #140]	; (80020f8 <MX_TIM3_Init+0xe4>)
 800206c:	f002 fa6a 	bl	8004544 <HAL_TIM_Base_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002076:	f000 f943 	bl	8002300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002080:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002084:	4619      	mov	r1, r3
 8002086:	481c      	ldr	r0, [pc, #112]	; (80020f8 <MX_TIM3_Init+0xe4>)
 8002088:	f002 fde4 	bl	8004c54 <HAL_TIM_ConfigClockSource>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002092:	f000 f935 	bl	8002300 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002096:	4818      	ldr	r0, [pc, #96]	; (80020f8 <MX_TIM3_Init+0xe4>)
 8002098:	f002 fb04 	bl	80046a4 <HAL_TIM_PWM_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80020a2:	f000 f92d 	bl	8002300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020ae:	f107 0320 	add.w	r3, r7, #32
 80020b2:	4619      	mov	r1, r3
 80020b4:	4810      	ldr	r0, [pc, #64]	; (80020f8 <MX_TIM3_Init+0xe4>)
 80020b6:	f003 f995 	bl	80053e4 <HAL_TIMEx_MasterConfigSynchronization>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80020c0:	f000 f91e 	bl	8002300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c4:	2360      	movs	r3, #96	; 0x60
 80020c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	220c      	movs	r2, #12
 80020d8:	4619      	mov	r1, r3
 80020da:	4807      	ldr	r0, [pc, #28]	; (80020f8 <MX_TIM3_Init+0xe4>)
 80020dc:	f002 fcfc 	bl	8004ad8 <HAL_TIM_PWM_ConfigChannel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80020e6:	f000 f90b 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020ea:	4803      	ldr	r0, [pc, #12]	; (80020f8 <MX_TIM3_Init+0xe4>)
 80020ec:	f000 f9fc 	bl	80024e8 <HAL_TIM_MspPostInit>

}
 80020f0:	bf00      	nop
 80020f2:	3738      	adds	r7, #56	; 0x38
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20000154 	.word	0x20000154
 80020fc:	40000400 	.word	0x40000400

08002100 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002106:	f107 0308 	add.w	r3, r7, #8
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002114:	463b      	mov	r3, r7
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <MX_TIM4_Init+0x94>)
 800211e:	4a1e      	ldr	r2, [pc, #120]	; (8002198 <MX_TIM4_Init+0x98>)
 8002120:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 23999;
 8002122:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <MX_TIM4_Init+0x94>)
 8002124:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8002128:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212a:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <MX_TIM4_Init+0x94>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_PERIOD;
 8002130:	4b18      	ldr	r3, [pc, #96]	; (8002194 <MX_TIM4_Init+0x94>)
 8002132:	f240 5277 	movw	r2, #1399	; 0x577
 8002136:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002138:	4b16      	ldr	r3, [pc, #88]	; (8002194 <MX_TIM4_Init+0x94>)
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <MX_TIM4_Init+0x94>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002144:	4813      	ldr	r0, [pc, #76]	; (8002194 <MX_TIM4_Init+0x94>)
 8002146:	f002 f9fd 	bl	8004544 <HAL_TIM_Base_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002150:	f000 f8d6 	bl	8002300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002158:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800215a:	f107 0308 	add.w	r3, r7, #8
 800215e:	4619      	mov	r1, r3
 8002160:	480c      	ldr	r0, [pc, #48]	; (8002194 <MX_TIM4_Init+0x94>)
 8002162:	f002 fd77 	bl	8004c54 <HAL_TIM_ConfigClockSource>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800216c:	f000 f8c8 	bl	8002300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002170:	2300      	movs	r3, #0
 8002172:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002178:	463b      	mov	r3, r7
 800217a:	4619      	mov	r1, r3
 800217c:	4805      	ldr	r0, [pc, #20]	; (8002194 <MX_TIM4_Init+0x94>)
 800217e:	f003 f931 	bl	80053e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002188:	f000 f8ba 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800218c:	bf00      	nop
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	2000019c 	.word	0x2000019c
 8002198:	40000800 	.word	0x40000800

0800219c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <MX_USART1_UART_Init+0x4c>)
 80021a2:	4a12      	ldr	r2, [pc, #72]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <MX_USART1_UART_Init+0x4c>)
 80021a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <MX_USART1_UART_Init+0x4c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <MX_USART1_UART_Init+0x4c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <MX_USART1_UART_Init+0x4c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021c0:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <MX_USART1_UART_Init+0x4c>)
 80021c2:	220c      	movs	r2, #12
 80021c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <MX_USART1_UART_Init+0x4c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <MX_USART1_UART_Init+0x4c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021d2:	4805      	ldr	r0, [pc, #20]	; (80021e8 <MX_USART1_UART_Init+0x4c>)
 80021d4:	f003 f984 	bl	80054e0 <HAL_UART_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021de:	f000 f88f 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200001e4 	.word	0x200001e4
 80021ec:	40013800 	.word	0x40013800

080021f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f6:	f107 0310 	add.w	r3, r7, #16
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002204:	4b3a      	ldr	r3, [pc, #232]	; (80022f0 <MX_GPIO_Init+0x100>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	4a39      	ldr	r2, [pc, #228]	; (80022f0 <MX_GPIO_Init+0x100>)
 800220a:	f043 0320 	orr.w	r3, r3, #32
 800220e:	6193      	str	r3, [r2, #24]
 8002210:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <MX_GPIO_Init+0x100>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800221c:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <MX_GPIO_Init+0x100>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4a33      	ldr	r2, [pc, #204]	; (80022f0 <MX_GPIO_Init+0x100>)
 8002222:	f043 0310 	orr.w	r3, r3, #16
 8002226:	6193      	str	r3, [r2, #24]
 8002228:	4b31      	ldr	r3, [pc, #196]	; (80022f0 <MX_GPIO_Init+0x100>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002234:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <MX_GPIO_Init+0x100>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	4a2d      	ldr	r2, [pc, #180]	; (80022f0 <MX_GPIO_Init+0x100>)
 800223a:	f043 0304 	orr.w	r3, r3, #4
 800223e:	6193      	str	r3, [r2, #24]
 8002240:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <MX_GPIO_Init+0x100>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800224c:	4b28      	ldr	r3, [pc, #160]	; (80022f0 <MX_GPIO_Init+0x100>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a27      	ldr	r2, [pc, #156]	; (80022f0 <MX_GPIO_Init+0x100>)
 8002252:	f043 0308 	orr.w	r3, r3, #8
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <MX_GPIO_Init+0x100>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	603b      	str	r3, [r7, #0]
 8002262:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8002264:	2200      	movs	r2, #0
 8002266:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800226a:	4822      	ldr	r0, [pc, #136]	; (80022f4 <MX_GPIO_Init+0x104>)
 800226c:	f001 fb5f 	bl	800392e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002270:	2320      	movs	r3, #32
 8002272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002274:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <MX_GPIO_Init+0x108>)
 8002276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	f107 0310 	add.w	r3, r7, #16
 8002280:	4619      	mov	r1, r3
 8002282:	481c      	ldr	r0, [pc, #112]	; (80022f4 <MX_GPIO_Init+0x104>)
 8002284:	f001 f9a8 	bl	80035d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800228c:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <MX_GPIO_Init+0x108>)
 800228e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002290:	2302      	movs	r3, #2
 8002292:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002294:	f107 0310 	add.w	r3, r7, #16
 8002298:	4619      	mov	r1, r3
 800229a:	4816      	ldr	r0, [pc, #88]	; (80022f4 <MX_GPIO_Init+0x104>)
 800229c:	f001 f99c 	bl	80035d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80022a0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80022a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022a6:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <MX_GPIO_Init+0x108>)
 80022a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ae:	f107 0310 	add.w	r3, r7, #16
 80022b2:	4619      	mov	r1, r3
 80022b4:	4811      	ldr	r0, [pc, #68]	; (80022fc <MX_GPIO_Init+0x10c>)
 80022b6:	f001 f98f 	bl	80035d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80022ba:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80022be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c0:	2301      	movs	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2302      	movs	r3, #2
 80022ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022cc:	f107 0310 	add.w	r3, r7, #16
 80022d0:	4619      	mov	r1, r3
 80022d2:	4808      	ldr	r0, [pc, #32]	; (80022f4 <MX_GPIO_Init+0x104>)
 80022d4:	f001 f980 	bl	80035d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 80022d8:	2200      	movs	r2, #0
 80022da:	2102      	movs	r1, #2
 80022dc:	2017      	movs	r0, #23
 80022de:	f001 f802 	bl	80032e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022e2:	2017      	movs	r0, #23
 80022e4:	f001 f81b 	bl	800331e <HAL_NVIC_EnableIRQ>

}
 80022e8:	bf00      	nop
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40010800 	.word	0x40010800
 80022f8:	10110000 	.word	0x10110000
 80022fc:	40011000 	.word	0x40011000

08002300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002304:	b672      	cpsid	i
}
 8002306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002308:	e7fe      	b.n	8002308 <Error_Handler+0x8>
	...

0800230c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <HAL_MspInit+0x5c>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	4a14      	ldr	r2, [pc, #80]	; (8002368 <HAL_MspInit+0x5c>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6193      	str	r3, [r2, #24]
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_MspInit+0x5c>)
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_MspInit+0x5c>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	4a0e      	ldr	r2, [pc, #56]	; (8002368 <HAL_MspInit+0x5c>)
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002334:	61d3      	str	r3, [r2, #28]
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <HAL_MspInit+0x5c>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_MspInit+0x60>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	4a04      	ldr	r2, [pc, #16]	; (800236c <HAL_MspInit+0x60>)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	40021000 	.word	0x40021000
 800236c:	40010000 	.word	0x40010000

08002370 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 0318 	add.w	r3, r7, #24
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1f      	ldr	r2, [pc, #124]	; (8002408 <HAL_ADC_MspInit+0x98>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d137      	bne.n	8002400 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002390:	4b1e      	ldr	r3, [pc, #120]	; (800240c <HAL_ADC_MspInit+0x9c>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a1d      	ldr	r2, [pc, #116]	; (800240c <HAL_ADC_MspInit+0x9c>)
 8002396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <HAL_ADC_MspInit+0x9c>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_ADC_MspInit+0x9c>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	4a17      	ldr	r2, [pc, #92]	; (800240c <HAL_ADC_MspInit+0x9c>)
 80023ae:	f043 0310 	orr.w	r3, r3, #16
 80023b2:	6193      	str	r3, [r2, #24]
 80023b4:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_ADC_MspInit+0x9c>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0310 	and.w	r3, r3, #16
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_ADC_MspInit+0x9c>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	4a11      	ldr	r2, [pc, #68]	; (800240c <HAL_ADC_MspInit+0x9c>)
 80023c6:	f043 0304 	orr.w	r3, r3, #4
 80023ca:	6193      	str	r3, [r2, #24]
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_ADC_MspInit+0x9c>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023d8:	2301      	movs	r3, #1
 80023da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023dc:	2303      	movs	r3, #3
 80023de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e0:	f107 0318 	add.w	r3, r7, #24
 80023e4:	4619      	mov	r1, r3
 80023e6:	480a      	ldr	r0, [pc, #40]	; (8002410 <HAL_ADC_MspInit+0xa0>)
 80023e8:	f001 f8f6 	bl	80035d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023ec:	2308      	movs	r3, #8
 80023ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023f0:	2303      	movs	r3, #3
 80023f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f4:	f107 0318 	add.w	r3, r7, #24
 80023f8:	4619      	mov	r1, r3
 80023fa:	4806      	ldr	r0, [pc, #24]	; (8002414 <HAL_ADC_MspInit+0xa4>)
 80023fc:	f001 f8ec 	bl	80035d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002400:	bf00      	nop
 8002402:	3728      	adds	r7, #40	; 0x28
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40012400 	.word	0x40012400
 800240c:	40021000 	.word	0x40021000
 8002410:	40011000 	.word	0x40011000
 8002414:	40010800 	.word	0x40010800

08002418 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a2c      	ldr	r2, [pc, #176]	; (80024d8 <HAL_TIM_Base_MspInit+0xc0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d114      	bne.n	8002454 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800242a:	4b2c      	ldr	r3, [pc, #176]	; (80024dc <HAL_TIM_Base_MspInit+0xc4>)
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	4a2b      	ldr	r2, [pc, #172]	; (80024dc <HAL_TIM_Base_MspInit+0xc4>)
 8002430:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002434:	6193      	str	r3, [r2, #24]
 8002436:	4b29      	ldr	r3, [pc, #164]	; (80024dc <HAL_TIM_Base_MspInit+0xc4>)
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002442:	2200      	movs	r2, #0
 8002444:	2100      	movs	r1, #0
 8002446:	2019      	movs	r0, #25
 8002448:	f000 ff4d 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800244c:	2019      	movs	r0, #25
 800244e:	f000 ff66 	bl	800331e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002452:	e03c      	b.n	80024ce <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245c:	d10c      	bne.n	8002478 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800245e:	4b1f      	ldr	r3, [pc, #124]	; (80024dc <HAL_TIM_Base_MspInit+0xc4>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4a1e      	ldr	r2, [pc, #120]	; (80024dc <HAL_TIM_Base_MspInit+0xc4>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	61d3      	str	r3, [r2, #28]
 800246a:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <HAL_TIM_Base_MspInit+0xc4>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]
}
 8002476:	e02a      	b.n	80024ce <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a18      	ldr	r2, [pc, #96]	; (80024e0 <HAL_TIM_Base_MspInit+0xc8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d10c      	bne.n	800249c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002482:	4b16      	ldr	r3, [pc, #88]	; (80024dc <HAL_TIM_Base_MspInit+0xc4>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4a15      	ldr	r2, [pc, #84]	; (80024dc <HAL_TIM_Base_MspInit+0xc4>)
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	61d3      	str	r3, [r2, #28]
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <HAL_TIM_Base_MspInit+0xc4>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
}
 800249a:	e018      	b.n	80024ce <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a10      	ldr	r2, [pc, #64]	; (80024e4 <HAL_TIM_Base_MspInit+0xcc>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d113      	bne.n	80024ce <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <HAL_TIM_Base_MspInit+0xc4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	4a0c      	ldr	r2, [pc, #48]	; (80024dc <HAL_TIM_Base_MspInit+0xc4>)
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	61d3      	str	r3, [r2, #28]
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_TIM_Base_MspInit+0xc4>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	2101      	movs	r1, #1
 80024c2:	201e      	movs	r0, #30
 80024c4:	f000 ff0f 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80024c8:	201e      	movs	r0, #30
 80024ca:	f000 ff28 	bl	800331e <HAL_NVIC_EnableIRQ>
}
 80024ce:	bf00      	nop
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40012c00 	.word	0x40012c00
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40000400 	.word	0x40000400
 80024e4:	40000800 	.word	0x40000800

080024e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f0:	f107 0310 	add.w	r3, r7, #16
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002506:	d118      	bne.n	800253a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002508:	4b1c      	ldr	r3, [pc, #112]	; (800257c <HAL_TIM_MspPostInit+0x94>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	4a1b      	ldr	r2, [pc, #108]	; (800257c <HAL_TIM_MspPostInit+0x94>)
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	6193      	str	r3, [r2, #24]
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_TIM_MspPostInit+0x94>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002520:	2302      	movs	r3, #2
 8002522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	2302      	movs	r3, #2
 800252a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	4619      	mov	r1, r3
 8002532:	4813      	ldr	r0, [pc, #76]	; (8002580 <HAL_TIM_MspPostInit+0x98>)
 8002534:	f001 f850 	bl	80035d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002538:	e01c      	b.n	8002574 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM3)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a11      	ldr	r2, [pc, #68]	; (8002584 <HAL_TIM_MspPostInit+0x9c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d117      	bne.n	8002574 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_TIM_MspPostInit+0x94>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	4a0c      	ldr	r2, [pc, #48]	; (800257c <HAL_TIM_MspPostInit+0x94>)
 800254a:	f043 0308 	orr.w	r3, r3, #8
 800254e:	6193      	str	r3, [r2, #24]
 8002550:	4b0a      	ldr	r3, [pc, #40]	; (800257c <HAL_TIM_MspPostInit+0x94>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800255c:	2302      	movs	r3, #2
 800255e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002560:	2302      	movs	r3, #2
 8002562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002564:	2302      	movs	r3, #2
 8002566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002568:	f107 0310 	add.w	r3, r7, #16
 800256c:	4619      	mov	r1, r3
 800256e:	4806      	ldr	r0, [pc, #24]	; (8002588 <HAL_TIM_MspPostInit+0xa0>)
 8002570:	f001 f832 	bl	80035d8 <HAL_GPIO_Init>
}
 8002574:	bf00      	nop
 8002576:	3720      	adds	r7, #32
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	40010800 	.word	0x40010800
 8002584:	40000400 	.word	0x40000400
 8002588:	40010c00 	.word	0x40010c00

0800258c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	; 0x28
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a26      	ldr	r2, [pc, #152]	; (8002640 <HAL_UART_MspInit+0xb4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d145      	bne.n	8002638 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025ac:	4b25      	ldr	r3, [pc, #148]	; (8002644 <HAL_UART_MspInit+0xb8>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	4a24      	ldr	r2, [pc, #144]	; (8002644 <HAL_UART_MspInit+0xb8>)
 80025b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b6:	6193      	str	r3, [r2, #24]
 80025b8:	4b22      	ldr	r3, [pc, #136]	; (8002644 <HAL_UART_MspInit+0xb8>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <HAL_UART_MspInit+0xb8>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	4a1e      	ldr	r2, [pc, #120]	; (8002644 <HAL_UART_MspInit+0xb8>)
 80025ca:	f043 0308 	orr.w	r3, r3, #8
 80025ce:	6193      	str	r3, [r2, #24]
 80025d0:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <HAL_UART_MspInit+0xb8>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025dc:	2340      	movs	r3, #64	; 0x40
 80025de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025e4:	2303      	movs	r3, #3
 80025e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	4619      	mov	r1, r3
 80025ee:	4816      	ldr	r0, [pc, #88]	; (8002648 <HAL_UART_MspInit+0xbc>)
 80025f0:	f000 fff2 	bl	80035d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	4619      	mov	r1, r3
 8002606:	4810      	ldr	r0, [pc, #64]	; (8002648 <HAL_UART_MspInit+0xbc>)
 8002608:	f000 ffe6 	bl	80035d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800260c:	4b0f      	ldr	r3, [pc, #60]	; (800264c <HAL_UART_MspInit+0xc0>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	f043 0304 	orr.w	r3, r3, #4
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
 8002622:	4a0a      	ldr	r2, [pc, #40]	; (800264c <HAL_UART_MspInit+0xc0>)
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002628:	2200      	movs	r2, #0
 800262a:	2100      	movs	r1, #0
 800262c:	2025      	movs	r0, #37	; 0x25
 800262e:	f000 fe5a 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002632:	2025      	movs	r0, #37	; 0x25
 8002634:	f000 fe73 	bl	800331e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002638:	bf00      	nop
 800263a:	3728      	adds	r7, #40	; 0x28
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40013800 	.word	0x40013800
 8002644:	40021000 	.word	0x40021000
 8002648:	40010c00 	.word	0x40010c00
 800264c:	40010000 	.word	0x40010000

08002650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002654:	f001 fda4 	bl	80041a0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <NMI_Handler+0x8>

0800265a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800265e:	e7fe      	b.n	800265e <HardFault_Handler+0x4>

08002660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002664:	e7fe      	b.n	8002664 <MemManage_Handler+0x4>

08002666 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800266a:	e7fe      	b.n	800266a <BusFault_Handler+0x4>

0800266c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002670:	e7fe      	b.n	8002670 <UsageFault_Handler+0x4>

08002672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800269a:	f000 f8a3 	bl	80027e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80026a6:	2020      	movs	r0, #32
 80026a8:	f001 f95a 	bl	8003960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80026ac:	2040      	movs	r0, #64	; 0x40
 80026ae:	f001 f957 	bl	8003960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80026b2:	2080      	movs	r0, #128	; 0x80
 80026b4:	f001 f954 	bl	8003960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80026b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026bc:	f001 f950 	bl	8003960 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026c8:	4802      	ldr	r0, [pc, #8]	; (80026d4 <TIM1_UP_IRQHandler+0x10>)
 80026ca:	f002 f8fd 	bl	80048c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200000c4 	.word	0x200000c4

080026d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80026dc:	4802      	ldr	r0, [pc, #8]	; (80026e8 <TIM4_IRQHandler+0x10>)
 80026de:	f002 f8f3 	bl	80048c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	2000019c 	.word	0x2000019c

080026ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026f0:	4802      	ldr	r0, [pc, #8]	; (80026fc <USART1_IRQHandler+0x10>)
 80026f2:	f002 ff73 	bl	80055dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200001e4 	.word	0x200001e4

08002700 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800270c:	480c      	ldr	r0, [pc, #48]	; (8002740 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800270e:	490d      	ldr	r1, [pc, #52]	; (8002744 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002710:	4a0d      	ldr	r2, [pc, #52]	; (8002748 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002714:	e002      	b.n	800271c <LoopCopyDataInit>

08002716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800271a:	3304      	adds	r3, #4

0800271c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800271c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002720:	d3f9      	bcc.n	8002716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002724:	4c0a      	ldr	r4, [pc, #40]	; (8002750 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002728:	e001      	b.n	800272e <LoopFillZerobss>

0800272a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800272a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800272c:	3204      	adds	r2, #4

0800272e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002730:	d3fb      	bcc.n	800272a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002732:	f7ff ffe5 	bl	8002700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002736:	f003 fb35 	bl	8005da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800273a:	f7fe ffe9 	bl	8001710 <main>
  bx lr
 800273e:	4770      	bx	lr
  ldr r0, =_sdata
 8002740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002744:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002748:	08008318 	.word	0x08008318
  ldr r2, =_sbss
 800274c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002750:	20000304 	.word	0x20000304

08002754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002754:	e7fe      	b.n	8002754 <ADC1_2_IRQHandler>
	...

08002758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <HAL_Init+0x28>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a07      	ldr	r2, [pc, #28]	; (8002780 <HAL_Init+0x28>)
 8002762:	f043 0310 	orr.w	r3, r3, #16
 8002766:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002768:	2003      	movs	r0, #3
 800276a:	f000 fdb1 	bl	80032d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800276e:	200f      	movs	r0, #15
 8002770:	f000 f808 	bl	8002784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002774:	f7ff fdca 	bl	800230c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40022000 	.word	0x40022000

08002784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800278c:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <HAL_InitTick+0x54>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_InitTick+0x58>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	4619      	mov	r1, r3
 8002796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800279a:	fbb3 f3f1 	udiv	r3, r3, r1
 800279e:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fdc9 	bl	800333a <HAL_SYSTICK_Config>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e00e      	b.n	80027d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b0f      	cmp	r3, #15
 80027b6:	d80a      	bhi.n	80027ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027b8:	2200      	movs	r2, #0
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295
 80027c0:	f000 fd91 	bl	80032e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027c4:	4a06      	ldr	r2, [pc, #24]	; (80027e0 <HAL_InitTick+0x5c>)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	e000      	b.n	80027d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000008 	.word	0x20000008
 80027dc:	20000010 	.word	0x20000010
 80027e0:	2000000c 	.word	0x2000000c

080027e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_IncTick+0x1c>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_IncTick+0x20>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	4a03      	ldr	r2, [pc, #12]	; (8002804 <HAL_IncTick+0x20>)
 80027f6:	6013      	str	r3, [r2, #0]
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	20000010 	.word	0x20000010
 8002804:	20000300 	.word	0x20000300

08002808 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return uwTick;
 800280c:	4b02      	ldr	r3, [pc, #8]	; (8002818 <HAL_GetTick+0x10>)
 800280e:	681b      	ldr	r3, [r3, #0]
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	20000300 	.word	0x20000300

0800281c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002824:	f7ff fff0 	bl	8002808 <HAL_GetTick>
 8002828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d005      	beq.n	8002842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <HAL_Delay+0x44>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002842:	bf00      	nop
 8002844:	f7ff ffe0 	bl	8002808 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	429a      	cmp	r2, r3
 8002852:	d8f7      	bhi.n	8002844 <HAL_Delay+0x28>
  {
  }
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000010 	.word	0x20000010

08002864 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e0ce      	b.n	8002a24 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff fd64 	bl	8002370 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fc03 	bl	80030b4 <ADC_ConversionStop_Disable>
 80028ae:	4603      	mov	r3, r0
 80028b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 80a9 	bne.w	8002a12 <HAL_ADC_Init+0x1ae>
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f040 80a5 	bne.w	8002a12 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028d0:	f023 0302 	bic.w	r3, r3, #2
 80028d4:	f043 0202 	orr.w	r2, r3, #2
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4951      	ldr	r1, [pc, #324]	; (8002a2c <HAL_ADC_Init+0x1c8>)
 80028e6:	428b      	cmp	r3, r1
 80028e8:	d10a      	bne.n	8002900 <HAL_ADC_Init+0x9c>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028f2:	d002      	beq.n	80028fa <HAL_ADC_Init+0x96>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	e004      	b.n	8002904 <HAL_ADC_Init+0xa0>
 80028fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80028fe:	e001      	b.n	8002904 <HAL_ADC_Init+0xa0>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002904:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7b1b      	ldrb	r3, [r3, #12]
 800290a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800290c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	4313      	orrs	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291c:	d003      	beq.n	8002926 <HAL_ADC_Init+0xc2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d102      	bne.n	800292c <HAL_ADC_Init+0xc8>
 8002926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800292a:	e000      	b.n	800292e <HAL_ADC_Init+0xca>
 800292c:	2300      	movs	r3, #0
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	7d1b      	ldrb	r3, [r3, #20]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d119      	bne.n	8002970 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7b1b      	ldrb	r3, [r3, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d109      	bne.n	8002958 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	3b01      	subs	r3, #1
 800294a:	035a      	lsls	r2, r3, #13
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	e00b      	b.n	8002970 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	f043 0220 	orr.w	r2, r3, #32
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	f043 0201 	orr.w	r2, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	430a      	orrs	r2, r1
 8002982:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <HAL_ADC_Init+0x1cc>)
 800298c:	4013      	ands	r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	68b9      	ldr	r1, [r7, #8]
 8002994:	430b      	orrs	r3, r1
 8002996:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a0:	d003      	beq.n	80029aa <HAL_ADC_Init+0x146>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d104      	bne.n	80029b4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	051b      	lsls	r3, r3, #20
 80029b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_ADC_Init+0x1d0>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d10b      	bne.n	80029f0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	f023 0303 	bic.w	r3, r3, #3
 80029e6:	f043 0201 	orr.w	r2, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029ee:	e018      	b.n	8002a22 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	f023 0312 	bic.w	r3, r3, #18
 80029f8:	f043 0210 	orr.w	r2, r3, #16
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	f043 0201 	orr.w	r2, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a10:	e007      	b.n	8002a22 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	f043 0210 	orr.w	r2, r3, #16
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40013c00 	.word	0x40013c00
 8002a30:	ffe1f7fd 	.word	0xffe1f7fd
 8002a34:	ff1f0efe 	.word	0xff1f0efe

08002a38 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_ADC_Start+0x1a>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e098      	b.n	8002b84 <HAL_ADC_Start+0x14c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fad0 	bl	8003000 <ADC_Enable>
 8002a60:	4603      	mov	r3, r0
 8002a62:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 8087 	bne.w	8002b7a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a74:	f023 0301 	bic.w	r3, r3, #1
 8002a78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a41      	ldr	r2, [pc, #260]	; (8002b8c <HAL_ADC_Start+0x154>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d105      	bne.n	8002a96 <HAL_ADC_Start+0x5e>
 8002a8a:	4b41      	ldr	r3, [pc, #260]	; (8002b90 <HAL_ADC_Start+0x158>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d115      	bne.n	8002ac2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d026      	beq.n	8002afe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ab8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ac0:	e01d      	b.n	8002afe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a2f      	ldr	r2, [pc, #188]	; (8002b90 <HAL_ADC_Start+0x158>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_ADC_Start+0xaa>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a2b      	ldr	r2, [pc, #172]	; (8002b8c <HAL_ADC_Start+0x154>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d10d      	bne.n	8002afe <HAL_ADC_Start+0xc6>
 8002ae2:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <HAL_ADC_Start+0x158>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d007      	beq.n	8002afe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002af6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d006      	beq.n	8002b18 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	f023 0206 	bic.w	r2, r3, #6
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b16:	e002      	b.n	8002b1e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f06f 0202 	mvn.w	r2, #2
 8002b2e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002b3a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b3e:	d113      	bne.n	8002b68 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b44:	4a11      	ldr	r2, [pc, #68]	; (8002b8c <HAL_ADC_Start+0x154>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d105      	bne.n	8002b56 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002b4a:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <HAL_ADC_Start+0x158>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d108      	bne.n	8002b68 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	e00c      	b.n	8002b82 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	e003      	b.n	8002b82 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40012800 	.word	0x40012800
 8002b90:	40012400 	.word	0x40012400

08002b94 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_Stop+0x1a>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e01a      	b.n	8002be4 <HAL_ADC_Stop+0x50>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fa7c 	bl	80030b4 <ADC_ConversionStop_Disable>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	f043 0201 	orr.w	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002c02:	f7ff fe01 	bl	8002808 <HAL_GetTick>
 8002c06:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	f043 0220 	orr.w	r2, r3, #32
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0d3      	b.n	8002dd6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d131      	bne.n	8002ca0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d12a      	bne.n	8002ca0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c4a:	e021      	b.n	8002c90 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c52:	d01d      	beq.n	8002c90 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <HAL_ADC_PollForConversion+0x7e>
 8002c5a:	f7ff fdd5 	bl	8002808 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d212      	bcs.n	8002c90 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10b      	bne.n	8002c90 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	f043 0204 	orr.w	r2, r3, #4
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e0a2      	b.n	8002dd6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0d6      	beq.n	8002c4c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002c9e:	e070      	b.n	8002d82 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002ca0:	4b4f      	ldr	r3, [pc, #316]	; (8002de0 <HAL_ADC_PollForConversion+0x1f4>)
 8002ca2:	681c      	ldr	r4, [r3, #0]
 8002ca4:	2002      	movs	r0, #2
 8002ca6:	f001 fb69 	bl	800437c <HAL_RCCEx_GetPeriphCLKFreq>
 8002caa:	4603      	mov	r3, r0
 8002cac:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6919      	ldr	r1, [r3, #16]
 8002cb6:	4b4b      	ldr	r3, [pc, #300]	; (8002de4 <HAL_ADC_PollForConversion+0x1f8>)
 8002cb8:	400b      	ands	r3, r1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d118      	bne.n	8002cf0 <HAL_ADC_PollForConversion+0x104>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68d9      	ldr	r1, [r3, #12]
 8002cc4:	4b48      	ldr	r3, [pc, #288]	; (8002de8 <HAL_ADC_PollForConversion+0x1fc>)
 8002cc6:	400b      	ands	r3, r1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d111      	bne.n	8002cf0 <HAL_ADC_PollForConversion+0x104>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6919      	ldr	r1, [r3, #16]
 8002cd2:	4b46      	ldr	r3, [pc, #280]	; (8002dec <HAL_ADC_PollForConversion+0x200>)
 8002cd4:	400b      	ands	r3, r1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d108      	bne.n	8002cec <HAL_ADC_PollForConversion+0x100>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68d9      	ldr	r1, [r3, #12]
 8002ce0:	4b43      	ldr	r3, [pc, #268]	; (8002df0 <HAL_ADC_PollForConversion+0x204>)
 8002ce2:	400b      	ands	r3, r1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_ADC_PollForConversion+0x100>
 8002ce8:	2314      	movs	r3, #20
 8002cea:	e020      	b.n	8002d2e <HAL_ADC_PollForConversion+0x142>
 8002cec:	2329      	movs	r3, #41	; 0x29
 8002cee:	e01e      	b.n	8002d2e <HAL_ADC_PollForConversion+0x142>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6919      	ldr	r1, [r3, #16]
 8002cf6:	4b3d      	ldr	r3, [pc, #244]	; (8002dec <HAL_ADC_PollForConversion+0x200>)
 8002cf8:	400b      	ands	r3, r1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_ADC_PollForConversion+0x120>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68d9      	ldr	r1, [r3, #12]
 8002d04:	4b3a      	ldr	r3, [pc, #232]	; (8002df0 <HAL_ADC_PollForConversion+0x204>)
 8002d06:	400b      	ands	r3, r1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00d      	beq.n	8002d28 <HAL_ADC_PollForConversion+0x13c>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6919      	ldr	r1, [r3, #16]
 8002d12:	4b38      	ldr	r3, [pc, #224]	; (8002df4 <HAL_ADC_PollForConversion+0x208>)
 8002d14:	400b      	ands	r3, r1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d108      	bne.n	8002d2c <HAL_ADC_PollForConversion+0x140>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68d9      	ldr	r1, [r3, #12]
 8002d20:	4b34      	ldr	r3, [pc, #208]	; (8002df4 <HAL_ADC_PollForConversion+0x208>)
 8002d22:	400b      	ands	r3, r1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_ADC_PollForConversion+0x140>
 8002d28:	2354      	movs	r3, #84	; 0x54
 8002d2a:	e000      	b.n	8002d2e <HAL_ADC_PollForConversion+0x142>
 8002d2c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002d34:	e021      	b.n	8002d7a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3c:	d01a      	beq.n	8002d74 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d007      	beq.n	8002d54 <HAL_ADC_PollForConversion+0x168>
 8002d44:	f7ff fd60 	bl	8002808 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d20f      	bcs.n	8002d74 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d90b      	bls.n	8002d74 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	f043 0204 	orr.w	r2, r3, #4
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e030      	b.n	8002dd6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3301      	adds	r3, #1
 8002d78:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d8d9      	bhi.n	8002d36 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f06f 0212 	mvn.w	r2, #18
 8002d8a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002da2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002da6:	d115      	bne.n	8002dd4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d111      	bne.n	8002dd4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d105      	bne.n	8002dd4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	f043 0201 	orr.w	r2, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	371c      	adds	r7, #28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd90      	pop	{r4, r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000008 	.word	0x20000008
 8002de4:	24924924 	.word	0x24924924
 8002de8:	00924924 	.word	0x00924924
 8002dec:	12492492 	.word	0x12492492
 8002df0:	00492492 	.word	0x00492492
 8002df4:	00249249 	.word	0x00249249

08002df8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x20>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e0dc      	b.n	8002fea <HAL_ADC_ConfigChannel+0x1da>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b06      	cmp	r3, #6
 8002e3e:	d81c      	bhi.n	8002e7a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	3b05      	subs	r3, #5
 8002e52:	221f      	movs	r2, #31
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	4019      	ands	r1, r3
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	3b05      	subs	r3, #5
 8002e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	635a      	str	r2, [r3, #52]	; 0x34
 8002e78:	e03c      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	d81c      	bhi.n	8002ebc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	3b23      	subs	r3, #35	; 0x23
 8002e94:	221f      	movs	r2, #31
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	4019      	ands	r1, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	3b23      	subs	r3, #35	; 0x23
 8002eae:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
 8002eba:	e01b      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	3b41      	subs	r3, #65	; 0x41
 8002ece:	221f      	movs	r2, #31
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	4019      	ands	r1, r3
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3b41      	subs	r3, #65	; 0x41
 8002ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b09      	cmp	r3, #9
 8002efa:	d91c      	bls.n	8002f36 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68d9      	ldr	r1, [r3, #12]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3b1e      	subs	r3, #30
 8002f0e:	2207      	movs	r2, #7
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	4019      	ands	r1, r3
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	6898      	ldr	r0, [r3, #8]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	3b1e      	subs	r3, #30
 8002f28:	fa00 f203 	lsl.w	r2, r0, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	e019      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6919      	ldr	r1, [r3, #16]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4613      	mov	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4413      	add	r3, r2
 8002f46:	2207      	movs	r2, #7
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	4019      	ands	r1, r3
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	6898      	ldr	r0, [r3, #8]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b10      	cmp	r3, #16
 8002f70:	d003      	beq.n	8002f7a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f76:	2b11      	cmp	r3, #17
 8002f78:	d132      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d125      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d126      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002fa0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b10      	cmp	r3, #16
 8002fa8:	d11a      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002faa:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a13      	ldr	r2, [pc, #76]	; (8002ffc <HAL_ADC_ConfigChannel+0x1ec>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	0c9a      	lsrs	r2, r3, #18
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fc0:	e002      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f9      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x1b2>
 8002fce:	e007      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	f043 0220 	orr.w	r2, r3, #32
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	40012400 	.word	0x40012400
 8002ff8:	20000008 	.word	0x20000008
 8002ffc:	431bde83 	.word	0x431bde83

08003000 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b01      	cmp	r3, #1
 800301c:	d040      	beq.n	80030a0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0201 	orr.w	r2, r2, #1
 800302c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800302e:	4b1f      	ldr	r3, [pc, #124]	; (80030ac <ADC_Enable+0xac>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <ADC_Enable+0xb0>)
 8003034:	fba2 2303 	umull	r2, r3, r2, r3
 8003038:	0c9b      	lsrs	r3, r3, #18
 800303a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800303c:	e002      	b.n	8003044 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	3b01      	subs	r3, #1
 8003042:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f9      	bne.n	800303e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800304a:	f7ff fbdd 	bl	8002808 <HAL_GetTick>
 800304e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003050:	e01f      	b.n	8003092 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003052:	f7ff fbd9 	bl	8002808 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d918      	bls.n	8003092 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b01      	cmp	r3, #1
 800306c:	d011      	beq.n	8003092 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	f043 0210 	orr.w	r2, r3, #16
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	f043 0201 	orr.w	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e007      	b.n	80030a2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b01      	cmp	r3, #1
 800309e:	d1d8      	bne.n	8003052 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000008 	.word	0x20000008
 80030b0:	431bde83 	.word	0x431bde83

080030b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d12e      	bne.n	800312c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0201 	bic.w	r2, r2, #1
 80030dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030de:	f7ff fb93 	bl	8002808 <HAL_GetTick>
 80030e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030e4:	e01b      	b.n	800311e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030e6:	f7ff fb8f 	bl	8002808 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d914      	bls.n	800311e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d10d      	bne.n	800311e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	f043 0210 	orr.w	r2, r3, #16
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	f043 0201 	orr.w	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e007      	b.n	800312e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b01      	cmp	r3, #1
 800312a:	d0dc      	beq.n	80030e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <__NVIC_SetPriorityGrouping+0x44>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003154:	4013      	ands	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800316a:	4a04      	ldr	r2, [pc, #16]	; (800317c <__NVIC_SetPriorityGrouping+0x44>)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	60d3      	str	r3, [r2, #12]
}
 8003170:	bf00      	nop
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003184:	4b04      	ldr	r3, [pc, #16]	; (8003198 <__NVIC_GetPriorityGrouping+0x18>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	0a1b      	lsrs	r3, r3, #8
 800318a:	f003 0307 	and.w	r3, r3, #7
}
 800318e:	4618      	mov	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	db0b      	blt.n	80031c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	f003 021f 	and.w	r2, r3, #31
 80031b4:	4906      	ldr	r1, [pc, #24]	; (80031d0 <__NVIC_EnableIRQ+0x34>)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	2001      	movs	r0, #1
 80031be:	fa00 f202 	lsl.w	r2, r0, r2
 80031c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	e000e100 	.word	0xe000e100

080031d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	6039      	str	r1, [r7, #0]
 80031de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	db0a      	blt.n	80031fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	490c      	ldr	r1, [pc, #48]	; (8003220 <__NVIC_SetPriority+0x4c>)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	0112      	lsls	r2, r2, #4
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	440b      	add	r3, r1
 80031f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031fc:	e00a      	b.n	8003214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	b2da      	uxtb	r2, r3
 8003202:	4908      	ldr	r1, [pc, #32]	; (8003224 <__NVIC_SetPriority+0x50>)
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	3b04      	subs	r3, #4
 800320c:	0112      	lsls	r2, r2, #4
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	440b      	add	r3, r1
 8003212:	761a      	strb	r2, [r3, #24]
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	e000e100 	.word	0xe000e100
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003228:	b480      	push	{r7}
 800322a:	b089      	sub	sp, #36	; 0x24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f1c3 0307 	rsb	r3, r3, #7
 8003242:	2b04      	cmp	r3, #4
 8003244:	bf28      	it	cs
 8003246:	2304      	movcs	r3, #4
 8003248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3304      	adds	r3, #4
 800324e:	2b06      	cmp	r3, #6
 8003250:	d902      	bls.n	8003258 <NVIC_EncodePriority+0x30>
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3b03      	subs	r3, #3
 8003256:	e000      	b.n	800325a <NVIC_EncodePriority+0x32>
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800325c:	f04f 32ff 	mov.w	r2, #4294967295
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43da      	mvns	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	401a      	ands	r2, r3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003270:	f04f 31ff 	mov.w	r1, #4294967295
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	fa01 f303 	lsl.w	r3, r1, r3
 800327a:	43d9      	mvns	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003280:	4313      	orrs	r3, r2
         );
}
 8003282:	4618      	mov	r0, r3
 8003284:	3724      	adds	r7, #36	; 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3b01      	subs	r3, #1
 8003298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800329c:	d301      	bcc.n	80032a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800329e:	2301      	movs	r3, #1
 80032a0:	e00f      	b.n	80032c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032a2:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <SysTick_Config+0x40>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032aa:	210f      	movs	r1, #15
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295
 80032b0:	f7ff ff90 	bl	80031d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <SysTick_Config+0x40>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ba:	4b04      	ldr	r3, [pc, #16]	; (80032cc <SysTick_Config+0x40>)
 80032bc:	2207      	movs	r2, #7
 80032be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	e000e010 	.word	0xe000e010

080032d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff ff2d 	bl	8003138 <__NVIC_SetPriorityGrouping>
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b086      	sub	sp, #24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4603      	mov	r3, r0
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032f8:	f7ff ff42 	bl	8003180 <__NVIC_GetPriorityGrouping>
 80032fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	6978      	ldr	r0, [r7, #20]
 8003304:	f7ff ff90 	bl	8003228 <NVIC_EncodePriority>
 8003308:	4602      	mov	r2, r0
 800330a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff ff5f 	bl	80031d4 <__NVIC_SetPriority>
}
 8003316:	bf00      	nop
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	4603      	mov	r3, r0
 8003326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff ff35 	bl	800319c <__NVIC_EnableIRQ>
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ffa2 	bl	800328c <SysTick_Config>
 8003348:	4603      	mov	r3, r0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003352:	b480      	push	{r7}
 8003354:	b085      	sub	sp, #20
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003364:	2b02      	cmp	r3, #2
 8003366:	d008      	beq.n	800337a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2204      	movs	r2, #4
 800336c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e020      	b.n	80033bc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 020e 	bic.w	r2, r2, #14
 8003388:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0201 	bic.w	r2, r2, #1
 8003398:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a2:	2101      	movs	r1, #1
 80033a4:	fa01 f202 	lsl.w	r2, r1, r2
 80033a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr
	...

080033c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d005      	beq.n	80033ea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2204      	movs	r2, #4
 80033e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
 80033e8:	e0d6      	b.n	8003598 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 020e 	bic.w	r2, r2, #14
 80033f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0201 	bic.w	r2, r2, #1
 8003408:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	4b64      	ldr	r3, [pc, #400]	; (80035a4 <HAL_DMA_Abort_IT+0x1dc>)
 8003412:	429a      	cmp	r2, r3
 8003414:	d958      	bls.n	80034c8 <HAL_DMA_Abort_IT+0x100>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a63      	ldr	r2, [pc, #396]	; (80035a8 <HAL_DMA_Abort_IT+0x1e0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d04f      	beq.n	80034c0 <HAL_DMA_Abort_IT+0xf8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a61      	ldr	r2, [pc, #388]	; (80035ac <HAL_DMA_Abort_IT+0x1e4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d048      	beq.n	80034bc <HAL_DMA_Abort_IT+0xf4>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a60      	ldr	r2, [pc, #384]	; (80035b0 <HAL_DMA_Abort_IT+0x1e8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d040      	beq.n	80034b6 <HAL_DMA_Abort_IT+0xee>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a5e      	ldr	r2, [pc, #376]	; (80035b4 <HAL_DMA_Abort_IT+0x1ec>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d038      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xe8>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a5d      	ldr	r2, [pc, #372]	; (80035b8 <HAL_DMA_Abort_IT+0x1f0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d030      	beq.n	80034aa <HAL_DMA_Abort_IT+0xe2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a5b      	ldr	r2, [pc, #364]	; (80035bc <HAL_DMA_Abort_IT+0x1f4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d028      	beq.n	80034a4 <HAL_DMA_Abort_IT+0xdc>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a53      	ldr	r2, [pc, #332]	; (80035a4 <HAL_DMA_Abort_IT+0x1dc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d020      	beq.n	800349e <HAL_DMA_Abort_IT+0xd6>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a57      	ldr	r2, [pc, #348]	; (80035c0 <HAL_DMA_Abort_IT+0x1f8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d019      	beq.n	800349a <HAL_DMA_Abort_IT+0xd2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a56      	ldr	r2, [pc, #344]	; (80035c4 <HAL_DMA_Abort_IT+0x1fc>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d012      	beq.n	8003496 <HAL_DMA_Abort_IT+0xce>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a54      	ldr	r2, [pc, #336]	; (80035c8 <HAL_DMA_Abort_IT+0x200>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00a      	beq.n	8003490 <HAL_DMA_Abort_IT+0xc8>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a53      	ldr	r2, [pc, #332]	; (80035cc <HAL_DMA_Abort_IT+0x204>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d102      	bne.n	800348a <HAL_DMA_Abort_IT+0xc2>
 8003484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003488:	e01b      	b.n	80034c2 <HAL_DMA_Abort_IT+0xfa>
 800348a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800348e:	e018      	b.n	80034c2 <HAL_DMA_Abort_IT+0xfa>
 8003490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003494:	e015      	b.n	80034c2 <HAL_DMA_Abort_IT+0xfa>
 8003496:	2310      	movs	r3, #16
 8003498:	e013      	b.n	80034c2 <HAL_DMA_Abort_IT+0xfa>
 800349a:	2301      	movs	r3, #1
 800349c:	e011      	b.n	80034c2 <HAL_DMA_Abort_IT+0xfa>
 800349e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034a2:	e00e      	b.n	80034c2 <HAL_DMA_Abort_IT+0xfa>
 80034a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034a8:	e00b      	b.n	80034c2 <HAL_DMA_Abort_IT+0xfa>
 80034aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034ae:	e008      	b.n	80034c2 <HAL_DMA_Abort_IT+0xfa>
 80034b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034b4:	e005      	b.n	80034c2 <HAL_DMA_Abort_IT+0xfa>
 80034b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ba:	e002      	b.n	80034c2 <HAL_DMA_Abort_IT+0xfa>
 80034bc:	2310      	movs	r3, #16
 80034be:	e000      	b.n	80034c2 <HAL_DMA_Abort_IT+0xfa>
 80034c0:	2301      	movs	r3, #1
 80034c2:	4a43      	ldr	r2, [pc, #268]	; (80035d0 <HAL_DMA_Abort_IT+0x208>)
 80034c4:	6053      	str	r3, [r2, #4]
 80034c6:	e057      	b.n	8003578 <HAL_DMA_Abort_IT+0x1b0>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a36      	ldr	r2, [pc, #216]	; (80035a8 <HAL_DMA_Abort_IT+0x1e0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d04f      	beq.n	8003572 <HAL_DMA_Abort_IT+0x1aa>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a35      	ldr	r2, [pc, #212]	; (80035ac <HAL_DMA_Abort_IT+0x1e4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d048      	beq.n	800356e <HAL_DMA_Abort_IT+0x1a6>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a33      	ldr	r2, [pc, #204]	; (80035b0 <HAL_DMA_Abort_IT+0x1e8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d040      	beq.n	8003568 <HAL_DMA_Abort_IT+0x1a0>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a32      	ldr	r2, [pc, #200]	; (80035b4 <HAL_DMA_Abort_IT+0x1ec>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d038      	beq.n	8003562 <HAL_DMA_Abort_IT+0x19a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a30      	ldr	r2, [pc, #192]	; (80035b8 <HAL_DMA_Abort_IT+0x1f0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d030      	beq.n	800355c <HAL_DMA_Abort_IT+0x194>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a2f      	ldr	r2, [pc, #188]	; (80035bc <HAL_DMA_Abort_IT+0x1f4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d028      	beq.n	8003556 <HAL_DMA_Abort_IT+0x18e>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a26      	ldr	r2, [pc, #152]	; (80035a4 <HAL_DMA_Abort_IT+0x1dc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d020      	beq.n	8003550 <HAL_DMA_Abort_IT+0x188>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2b      	ldr	r2, [pc, #172]	; (80035c0 <HAL_DMA_Abort_IT+0x1f8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d019      	beq.n	800354c <HAL_DMA_Abort_IT+0x184>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a29      	ldr	r2, [pc, #164]	; (80035c4 <HAL_DMA_Abort_IT+0x1fc>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d012      	beq.n	8003548 <HAL_DMA_Abort_IT+0x180>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a28      	ldr	r2, [pc, #160]	; (80035c8 <HAL_DMA_Abort_IT+0x200>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00a      	beq.n	8003542 <HAL_DMA_Abort_IT+0x17a>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a26      	ldr	r2, [pc, #152]	; (80035cc <HAL_DMA_Abort_IT+0x204>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d102      	bne.n	800353c <HAL_DMA_Abort_IT+0x174>
 8003536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800353a:	e01b      	b.n	8003574 <HAL_DMA_Abort_IT+0x1ac>
 800353c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003540:	e018      	b.n	8003574 <HAL_DMA_Abort_IT+0x1ac>
 8003542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003546:	e015      	b.n	8003574 <HAL_DMA_Abort_IT+0x1ac>
 8003548:	2310      	movs	r3, #16
 800354a:	e013      	b.n	8003574 <HAL_DMA_Abort_IT+0x1ac>
 800354c:	2301      	movs	r3, #1
 800354e:	e011      	b.n	8003574 <HAL_DMA_Abort_IT+0x1ac>
 8003550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003554:	e00e      	b.n	8003574 <HAL_DMA_Abort_IT+0x1ac>
 8003556:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800355a:	e00b      	b.n	8003574 <HAL_DMA_Abort_IT+0x1ac>
 800355c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003560:	e008      	b.n	8003574 <HAL_DMA_Abort_IT+0x1ac>
 8003562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003566:	e005      	b.n	8003574 <HAL_DMA_Abort_IT+0x1ac>
 8003568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800356c:	e002      	b.n	8003574 <HAL_DMA_Abort_IT+0x1ac>
 800356e:	2310      	movs	r3, #16
 8003570:	e000      	b.n	8003574 <HAL_DMA_Abort_IT+0x1ac>
 8003572:	2301      	movs	r3, #1
 8003574:	4a17      	ldr	r2, [pc, #92]	; (80035d4 <HAL_DMA_Abort_IT+0x20c>)
 8003576:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4798      	blx	r3
    } 
  }
  return status;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40020080 	.word	0x40020080
 80035a8:	40020008 	.word	0x40020008
 80035ac:	4002001c 	.word	0x4002001c
 80035b0:	40020030 	.word	0x40020030
 80035b4:	40020044 	.word	0x40020044
 80035b8:	40020058 	.word	0x40020058
 80035bc:	4002006c 	.word	0x4002006c
 80035c0:	40020408 	.word	0x40020408
 80035c4:	4002041c 	.word	0x4002041c
 80035c8:	40020430 	.word	0x40020430
 80035cc:	40020444 	.word	0x40020444
 80035d0:	40020400 	.word	0x40020400
 80035d4:	40020000 	.word	0x40020000

080035d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035d8:	b480      	push	{r7}
 80035da:	b08b      	sub	sp, #44	; 0x2c
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035e2:	2300      	movs	r3, #0
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035e6:	2300      	movs	r3, #0
 80035e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ea:	e179      	b.n	80038e0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035ec:	2201      	movs	r2, #1
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	429a      	cmp	r2, r3
 8003606:	f040 8168 	bne.w	80038da <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	4a96      	ldr	r2, [pc, #600]	; (8003868 <HAL_GPIO_Init+0x290>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d05e      	beq.n	80036d2 <HAL_GPIO_Init+0xfa>
 8003614:	4a94      	ldr	r2, [pc, #592]	; (8003868 <HAL_GPIO_Init+0x290>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d875      	bhi.n	8003706 <HAL_GPIO_Init+0x12e>
 800361a:	4a94      	ldr	r2, [pc, #592]	; (800386c <HAL_GPIO_Init+0x294>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d058      	beq.n	80036d2 <HAL_GPIO_Init+0xfa>
 8003620:	4a92      	ldr	r2, [pc, #584]	; (800386c <HAL_GPIO_Init+0x294>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d86f      	bhi.n	8003706 <HAL_GPIO_Init+0x12e>
 8003626:	4a92      	ldr	r2, [pc, #584]	; (8003870 <HAL_GPIO_Init+0x298>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d052      	beq.n	80036d2 <HAL_GPIO_Init+0xfa>
 800362c:	4a90      	ldr	r2, [pc, #576]	; (8003870 <HAL_GPIO_Init+0x298>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d869      	bhi.n	8003706 <HAL_GPIO_Init+0x12e>
 8003632:	4a90      	ldr	r2, [pc, #576]	; (8003874 <HAL_GPIO_Init+0x29c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d04c      	beq.n	80036d2 <HAL_GPIO_Init+0xfa>
 8003638:	4a8e      	ldr	r2, [pc, #568]	; (8003874 <HAL_GPIO_Init+0x29c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d863      	bhi.n	8003706 <HAL_GPIO_Init+0x12e>
 800363e:	4a8e      	ldr	r2, [pc, #568]	; (8003878 <HAL_GPIO_Init+0x2a0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d046      	beq.n	80036d2 <HAL_GPIO_Init+0xfa>
 8003644:	4a8c      	ldr	r2, [pc, #560]	; (8003878 <HAL_GPIO_Init+0x2a0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d85d      	bhi.n	8003706 <HAL_GPIO_Init+0x12e>
 800364a:	2b12      	cmp	r3, #18
 800364c:	d82a      	bhi.n	80036a4 <HAL_GPIO_Init+0xcc>
 800364e:	2b12      	cmp	r3, #18
 8003650:	d859      	bhi.n	8003706 <HAL_GPIO_Init+0x12e>
 8003652:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <HAL_GPIO_Init+0x80>)
 8003654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003658:	080036d3 	.word	0x080036d3
 800365c:	080036ad 	.word	0x080036ad
 8003660:	080036bf 	.word	0x080036bf
 8003664:	08003701 	.word	0x08003701
 8003668:	08003707 	.word	0x08003707
 800366c:	08003707 	.word	0x08003707
 8003670:	08003707 	.word	0x08003707
 8003674:	08003707 	.word	0x08003707
 8003678:	08003707 	.word	0x08003707
 800367c:	08003707 	.word	0x08003707
 8003680:	08003707 	.word	0x08003707
 8003684:	08003707 	.word	0x08003707
 8003688:	08003707 	.word	0x08003707
 800368c:	08003707 	.word	0x08003707
 8003690:	08003707 	.word	0x08003707
 8003694:	08003707 	.word	0x08003707
 8003698:	08003707 	.word	0x08003707
 800369c:	080036b5 	.word	0x080036b5
 80036a0:	080036c9 	.word	0x080036c9
 80036a4:	4a75      	ldr	r2, [pc, #468]	; (800387c <HAL_GPIO_Init+0x2a4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d013      	beq.n	80036d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036aa:	e02c      	b.n	8003706 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	623b      	str	r3, [r7, #32]
          break;
 80036b2:	e029      	b.n	8003708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	3304      	adds	r3, #4
 80036ba:	623b      	str	r3, [r7, #32]
          break;
 80036bc:	e024      	b.n	8003708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	3308      	adds	r3, #8
 80036c4:	623b      	str	r3, [r7, #32]
          break;
 80036c6:	e01f      	b.n	8003708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	330c      	adds	r3, #12
 80036ce:	623b      	str	r3, [r7, #32]
          break;
 80036d0:	e01a      	b.n	8003708 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d102      	bne.n	80036e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036da:	2304      	movs	r3, #4
 80036dc:	623b      	str	r3, [r7, #32]
          break;
 80036de:	e013      	b.n	8003708 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d105      	bne.n	80036f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036e8:	2308      	movs	r3, #8
 80036ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	611a      	str	r2, [r3, #16]
          break;
 80036f2:	e009      	b.n	8003708 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036f4:	2308      	movs	r3, #8
 80036f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	615a      	str	r2, [r3, #20]
          break;
 80036fe:	e003      	b.n	8003708 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003700:	2300      	movs	r3, #0
 8003702:	623b      	str	r3, [r7, #32]
          break;
 8003704:	e000      	b.n	8003708 <HAL_GPIO_Init+0x130>
          break;
 8003706:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2bff      	cmp	r3, #255	; 0xff
 800370c:	d801      	bhi.n	8003712 <HAL_GPIO_Init+0x13a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	e001      	b.n	8003716 <HAL_GPIO_Init+0x13e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	2bff      	cmp	r3, #255	; 0xff
 800371c:	d802      	bhi.n	8003724 <HAL_GPIO_Init+0x14c>
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	e002      	b.n	800372a <HAL_GPIO_Init+0x152>
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	3b08      	subs	r3, #8
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	210f      	movs	r1, #15
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	401a      	ands	r2, r3
 800373c:	6a39      	ldr	r1, [r7, #32]
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	fa01 f303 	lsl.w	r3, r1, r3
 8003744:	431a      	orrs	r2, r3
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 80c1 	beq.w	80038da <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003758:	4b49      	ldr	r3, [pc, #292]	; (8003880 <HAL_GPIO_Init+0x2a8>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	4a48      	ldr	r2, [pc, #288]	; (8003880 <HAL_GPIO_Init+0x2a8>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	6193      	str	r3, [r2, #24]
 8003764:	4b46      	ldr	r3, [pc, #280]	; (8003880 <HAL_GPIO_Init+0x2a8>)
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003770:	4a44      	ldr	r2, [pc, #272]	; (8003884 <HAL_GPIO_Init+0x2ac>)
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	089b      	lsrs	r3, r3, #2
 8003776:	3302      	adds	r3, #2
 8003778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800377c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	220f      	movs	r2, #15
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4013      	ands	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a3c      	ldr	r2, [pc, #240]	; (8003888 <HAL_GPIO_Init+0x2b0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d01f      	beq.n	80037dc <HAL_GPIO_Init+0x204>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a3b      	ldr	r2, [pc, #236]	; (800388c <HAL_GPIO_Init+0x2b4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d019      	beq.n	80037d8 <HAL_GPIO_Init+0x200>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a3a      	ldr	r2, [pc, #232]	; (8003890 <HAL_GPIO_Init+0x2b8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d013      	beq.n	80037d4 <HAL_GPIO_Init+0x1fc>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a39      	ldr	r2, [pc, #228]	; (8003894 <HAL_GPIO_Init+0x2bc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00d      	beq.n	80037d0 <HAL_GPIO_Init+0x1f8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a38      	ldr	r2, [pc, #224]	; (8003898 <HAL_GPIO_Init+0x2c0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d007      	beq.n	80037cc <HAL_GPIO_Init+0x1f4>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a37      	ldr	r2, [pc, #220]	; (800389c <HAL_GPIO_Init+0x2c4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d101      	bne.n	80037c8 <HAL_GPIO_Init+0x1f0>
 80037c4:	2305      	movs	r3, #5
 80037c6:	e00a      	b.n	80037de <HAL_GPIO_Init+0x206>
 80037c8:	2306      	movs	r3, #6
 80037ca:	e008      	b.n	80037de <HAL_GPIO_Init+0x206>
 80037cc:	2304      	movs	r3, #4
 80037ce:	e006      	b.n	80037de <HAL_GPIO_Init+0x206>
 80037d0:	2303      	movs	r3, #3
 80037d2:	e004      	b.n	80037de <HAL_GPIO_Init+0x206>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e002      	b.n	80037de <HAL_GPIO_Init+0x206>
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_GPIO_Init+0x206>
 80037dc:	2300      	movs	r3, #0
 80037de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e0:	f002 0203 	and.w	r2, r2, #3
 80037e4:	0092      	lsls	r2, r2, #2
 80037e6:	4093      	lsls	r3, r2
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037ee:	4925      	ldr	r1, [pc, #148]	; (8003884 <HAL_GPIO_Init+0x2ac>)
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	089b      	lsrs	r3, r3, #2
 80037f4:	3302      	adds	r3, #2
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d006      	beq.n	8003816 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003808:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <HAL_GPIO_Init+0x2c8>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4924      	ldr	r1, [pc, #144]	; (80038a0 <HAL_GPIO_Init+0x2c8>)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	4313      	orrs	r3, r2
 8003812:	600b      	str	r3, [r1, #0]
 8003814:	e006      	b.n	8003824 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003816:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <HAL_GPIO_Init+0x2c8>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	43db      	mvns	r3, r3
 800381e:	4920      	ldr	r1, [pc, #128]	; (80038a0 <HAL_GPIO_Init+0x2c8>)
 8003820:	4013      	ands	r3, r2
 8003822:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d006      	beq.n	800383e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003830:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <HAL_GPIO_Init+0x2c8>)
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	491a      	ldr	r1, [pc, #104]	; (80038a0 <HAL_GPIO_Init+0x2c8>)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
 800383c:	e006      	b.n	800384c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800383e:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <HAL_GPIO_Init+0x2c8>)
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	43db      	mvns	r3, r3
 8003846:	4916      	ldr	r1, [pc, #88]	; (80038a0 <HAL_GPIO_Init+0x2c8>)
 8003848:	4013      	ands	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d025      	beq.n	80038a4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <HAL_GPIO_Init+0x2c8>)
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	4910      	ldr	r1, [pc, #64]	; (80038a0 <HAL_GPIO_Init+0x2c8>)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	4313      	orrs	r3, r2
 8003862:	608b      	str	r3, [r1, #8]
 8003864:	e025      	b.n	80038b2 <HAL_GPIO_Init+0x2da>
 8003866:	bf00      	nop
 8003868:	10320000 	.word	0x10320000
 800386c:	10310000 	.word	0x10310000
 8003870:	10220000 	.word	0x10220000
 8003874:	10210000 	.word	0x10210000
 8003878:	10120000 	.word	0x10120000
 800387c:	10110000 	.word	0x10110000
 8003880:	40021000 	.word	0x40021000
 8003884:	40010000 	.word	0x40010000
 8003888:	40010800 	.word	0x40010800
 800388c:	40010c00 	.word	0x40010c00
 8003890:	40011000 	.word	0x40011000
 8003894:	40011400 	.word	0x40011400
 8003898:	40011800 	.word	0x40011800
 800389c:	40011c00 	.word	0x40011c00
 80038a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038a4:	4b15      	ldr	r3, [pc, #84]	; (80038fc <HAL_GPIO_Init+0x324>)
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	4913      	ldr	r1, [pc, #76]	; (80038fc <HAL_GPIO_Init+0x324>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d006      	beq.n	80038cc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038be:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <HAL_GPIO_Init+0x324>)
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	490e      	ldr	r1, [pc, #56]	; (80038fc <HAL_GPIO_Init+0x324>)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60cb      	str	r3, [r1, #12]
 80038ca:	e006      	b.n	80038da <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_GPIO_Init+0x324>)
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	4909      	ldr	r1, [pc, #36]	; (80038fc <HAL_GPIO_Init+0x324>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	3301      	adds	r3, #1
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f47f ae7e 	bne.w	80035ec <HAL_GPIO_Init+0x14>
  }
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	372c      	adds	r7, #44	; 0x2c
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	40010400 	.word	0x40010400

08003900 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	887b      	ldrh	r3, [r7, #2]
 8003912:	4013      	ands	r3, r2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d002      	beq.n	800391e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
 800391c:	e001      	b.n	8003922 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800391e:	2300      	movs	r3, #0
 8003920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003922:	7bfb      	ldrb	r3, [r7, #15]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr

0800392e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	460b      	mov	r3, r1
 8003938:	807b      	strh	r3, [r7, #2]
 800393a:	4613      	mov	r3, r2
 800393c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800393e:	787b      	ldrb	r3, [r7, #1]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003944:	887a      	ldrh	r2, [r7, #2]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800394a:	e003      	b.n	8003954 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800394c:	887b      	ldrh	r3, [r7, #2]
 800394e:	041a      	lsls	r2, r3, #16
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	611a      	str	r2, [r3, #16]
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr
	...

08003960 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800396a:	4b08      	ldr	r3, [pc, #32]	; (800398c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	4013      	ands	r3, r2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d006      	beq.n	8003984 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003976:	4a05      	ldr	r2, [pc, #20]	; (800398c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003978:	88fb      	ldrh	r3, [r7, #6]
 800397a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	4618      	mov	r0, r3
 8003980:	f7fd fe74 	bl	800166c <HAL_GPIO_EXTI_Callback>
  }
}
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40010400 	.word	0x40010400

08003990 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e272      	b.n	8003e88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8087 	beq.w	8003abe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039b0:	4b92      	ldr	r3, [pc, #584]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 030c 	and.w	r3, r3, #12
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d00c      	beq.n	80039d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039bc:	4b8f      	ldr	r3, [pc, #572]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 030c 	and.w	r3, r3, #12
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d112      	bne.n	80039ee <HAL_RCC_OscConfig+0x5e>
 80039c8:	4b8c      	ldr	r3, [pc, #560]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d4:	d10b      	bne.n	80039ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d6:	4b89      	ldr	r3, [pc, #548]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d06c      	beq.n	8003abc <HAL_RCC_OscConfig+0x12c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d168      	bne.n	8003abc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e24c      	b.n	8003e88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f6:	d106      	bne.n	8003a06 <HAL_RCC_OscConfig+0x76>
 80039f8:	4b80      	ldr	r3, [pc, #512]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a7f      	ldr	r2, [pc, #508]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 80039fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	e02e      	b.n	8003a64 <HAL_RCC_OscConfig+0xd4>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x98>
 8003a0e:	4b7b      	ldr	r3, [pc, #492]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a7a      	ldr	r2, [pc, #488]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	4b78      	ldr	r3, [pc, #480]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a77      	ldr	r2, [pc, #476]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003a20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e01d      	b.n	8003a64 <HAL_RCC_OscConfig+0xd4>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0xbc>
 8003a32:	4b72      	ldr	r3, [pc, #456]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a71      	ldr	r2, [pc, #452]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4b6f      	ldr	r3, [pc, #444]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a6e      	ldr	r2, [pc, #440]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e00b      	b.n	8003a64 <HAL_RCC_OscConfig+0xd4>
 8003a4c:	4b6b      	ldr	r3, [pc, #428]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a6a      	ldr	r2, [pc, #424]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	4b68      	ldr	r3, [pc, #416]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a67      	ldr	r2, [pc, #412]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d013      	beq.n	8003a94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6c:	f7fe fecc 	bl	8002808 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a74:	f7fe fec8 	bl	8002808 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b64      	cmp	r3, #100	; 0x64
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e200      	b.n	8003e88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	4b5d      	ldr	r3, [pc, #372]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0xe4>
 8003a92:	e014      	b.n	8003abe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a94:	f7fe feb8 	bl	8002808 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a9c:	f7fe feb4 	bl	8002808 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b64      	cmp	r3, #100	; 0x64
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e1ec      	b.n	8003e88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aae:	4b53      	ldr	r3, [pc, #332]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x10c>
 8003aba:	e000      	b.n	8003abe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d063      	beq.n	8003b92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aca:	4b4c      	ldr	r3, [pc, #304]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ad6:	4b49      	ldr	r3, [pc, #292]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d11c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x18c>
 8003ae2:	4b46      	ldr	r3, [pc, #280]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d116      	bne.n	8003b1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aee:	4b43      	ldr	r3, [pc, #268]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_RCC_OscConfig+0x176>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e1c0      	b.n	8003e88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b06:	4b3d      	ldr	r3, [pc, #244]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4939      	ldr	r1, [pc, #228]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1a:	e03a      	b.n	8003b92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d020      	beq.n	8003b66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b24:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <HAL_RCC_OscConfig+0x270>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2a:	f7fe fe6d 	bl	8002808 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b32:	f7fe fe69 	bl	8002808 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e1a1      	b.n	8003e88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b44:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b50:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4927      	ldr	r1, [pc, #156]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	600b      	str	r3, [r1, #0]
 8003b64:	e015      	b.n	8003b92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b66:	4b26      	ldr	r3, [pc, #152]	; (8003c00 <HAL_RCC_OscConfig+0x270>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6c:	f7fe fe4c 	bl	8002808 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b74:	f7fe fe48 	bl	8002808 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e180      	b.n	8003e88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b86:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d03a      	beq.n	8003c14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d019      	beq.n	8003bda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba6:	4b17      	ldr	r3, [pc, #92]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bac:	f7fe fe2c 	bl	8002808 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb4:	f7fe fe28 	bl	8002808 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e160      	b.n	8003e88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	f000 faf8 	bl	80041c8 <RCC_Delay>
 8003bd8:	e01c      	b.n	8003c14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bda:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be0:	f7fe fe12 	bl	8002808 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be6:	e00f      	b.n	8003c08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be8:	f7fe fe0e 	bl	8002808 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d908      	bls.n	8003c08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e146      	b.n	8003e88 <HAL_RCC_OscConfig+0x4f8>
 8003bfa:	bf00      	nop
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	42420000 	.word	0x42420000
 8003c04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c08:	4b92      	ldr	r3, [pc, #584]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e9      	bne.n	8003be8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 80a6 	beq.w	8003d6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c22:	2300      	movs	r3, #0
 8003c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c26:	4b8b      	ldr	r3, [pc, #556]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10d      	bne.n	8003c4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c32:	4b88      	ldr	r3, [pc, #544]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	4a87      	ldr	r2, [pc, #540]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	61d3      	str	r3, [r2, #28]
 8003c3e:	4b85      	ldr	r3, [pc, #532]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4e:	4b82      	ldr	r3, [pc, #520]	; (8003e58 <HAL_RCC_OscConfig+0x4c8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d118      	bne.n	8003c8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c5a:	4b7f      	ldr	r3, [pc, #508]	; (8003e58 <HAL_RCC_OscConfig+0x4c8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a7e      	ldr	r2, [pc, #504]	; (8003e58 <HAL_RCC_OscConfig+0x4c8>)
 8003c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c66:	f7fe fdcf 	bl	8002808 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6e:	f7fe fdcb 	bl	8002808 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b64      	cmp	r3, #100	; 0x64
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e103      	b.n	8003e88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c80:	4b75      	ldr	r3, [pc, #468]	; (8003e58 <HAL_RCC_OscConfig+0x4c8>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d106      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x312>
 8003c94:	4b6f      	ldr	r3, [pc, #444]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	4a6e      	ldr	r2, [pc, #440]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6213      	str	r3, [r2, #32]
 8003ca0:	e02d      	b.n	8003cfe <HAL_RCC_OscConfig+0x36e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x334>
 8003caa:	4b6a      	ldr	r3, [pc, #424]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	4a69      	ldr	r2, [pc, #420]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	6213      	str	r3, [r2, #32]
 8003cb6:	4b67      	ldr	r3, [pc, #412]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	4a66      	ldr	r2, [pc, #408]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003cbc:	f023 0304 	bic.w	r3, r3, #4
 8003cc0:	6213      	str	r3, [r2, #32]
 8003cc2:	e01c      	b.n	8003cfe <HAL_RCC_OscConfig+0x36e>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b05      	cmp	r3, #5
 8003cca:	d10c      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x356>
 8003ccc:	4b61      	ldr	r3, [pc, #388]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	4a60      	ldr	r2, [pc, #384]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003cd2:	f043 0304 	orr.w	r3, r3, #4
 8003cd6:	6213      	str	r3, [r2, #32]
 8003cd8:	4b5e      	ldr	r3, [pc, #376]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	4a5d      	ldr	r2, [pc, #372]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	6213      	str	r3, [r2, #32]
 8003ce4:	e00b      	b.n	8003cfe <HAL_RCC_OscConfig+0x36e>
 8003ce6:	4b5b      	ldr	r3, [pc, #364]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	4a5a      	ldr	r2, [pc, #360]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003cec:	f023 0301 	bic.w	r3, r3, #1
 8003cf0:	6213      	str	r3, [r2, #32]
 8003cf2:	4b58      	ldr	r3, [pc, #352]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	4a57      	ldr	r2, [pc, #348]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003cf8:	f023 0304 	bic.w	r3, r3, #4
 8003cfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d015      	beq.n	8003d32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d06:	f7fe fd7f 	bl	8002808 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0c:	e00a      	b.n	8003d24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0e:	f7fe fd7b 	bl	8002808 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e0b1      	b.n	8003e88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d24:	4b4b      	ldr	r3, [pc, #300]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0ee      	beq.n	8003d0e <HAL_RCC_OscConfig+0x37e>
 8003d30:	e014      	b.n	8003d5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d32:	f7fe fd69 	bl	8002808 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d38:	e00a      	b.n	8003d50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3a:	f7fe fd65 	bl	8002808 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e09b      	b.n	8003e88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d50:	4b40      	ldr	r3, [pc, #256]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1ee      	bne.n	8003d3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d105      	bne.n	8003d6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d62:	4b3c      	ldr	r3, [pc, #240]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	4a3b      	ldr	r2, [pc, #236]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 8087 	beq.w	8003e86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d78:	4b36      	ldr	r3, [pc, #216]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d061      	beq.n	8003e48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d146      	bne.n	8003e1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8c:	4b33      	ldr	r3, [pc, #204]	; (8003e5c <HAL_RCC_OscConfig+0x4cc>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d92:	f7fe fd39 	bl	8002808 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9a:	f7fe fd35 	bl	8002808 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e06d      	b.n	8003e88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dac:	4b29      	ldr	r3, [pc, #164]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1f0      	bne.n	8003d9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc0:	d108      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dc2:	4b24      	ldr	r3, [pc, #144]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	4921      	ldr	r1, [pc, #132]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd4:	4b1f      	ldr	r3, [pc, #124]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a19      	ldr	r1, [r3, #32]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	430b      	orrs	r3, r1
 8003de6:	491b      	ldr	r1, [pc, #108]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dec:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <HAL_RCC_OscConfig+0x4cc>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df2:	f7fe fd09 	bl	8002808 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfa:	f7fe fd05 	bl	8002808 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e03d      	b.n	8003e88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e0c:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x46a>
 8003e18:	e035      	b.n	8003e86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_RCC_OscConfig+0x4cc>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fe fcf2 	bl	8002808 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e28:	f7fe fcee 	bl	8002808 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e026      	b.n	8003e88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_RCC_OscConfig+0x4c4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x498>
 8003e46:	e01e      	b.n	8003e86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d107      	bne.n	8003e60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e019      	b.n	8003e88 <HAL_RCC_OscConfig+0x4f8>
 8003e54:	40021000 	.word	0x40021000
 8003e58:	40007000 	.word	0x40007000
 8003e5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_RCC_OscConfig+0x500>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d106      	bne.n	8003e82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d001      	beq.n	8003e86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000

08003e94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0d0      	b.n	800404a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea8:	4b6a      	ldr	r3, [pc, #424]	; (8004054 <HAL_RCC_ClockConfig+0x1c0>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d910      	bls.n	8003ed8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb6:	4b67      	ldr	r3, [pc, #412]	; (8004054 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 0207 	bic.w	r2, r3, #7
 8003ebe:	4965      	ldr	r1, [pc, #404]	; (8004054 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec6:	4b63      	ldr	r3, [pc, #396]	; (8004054 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0b8      	b.n	800404a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d020      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef0:	4b59      	ldr	r3, [pc, #356]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	4a58      	ldr	r2, [pc, #352]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003efa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f08:	4b53      	ldr	r3, [pc, #332]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4a52      	ldr	r2, [pc, #328]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f14:	4b50      	ldr	r3, [pc, #320]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	494d      	ldr	r1, [pc, #308]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d040      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d107      	bne.n	8003f4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3a:	4b47      	ldr	r3, [pc, #284]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d115      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e07f      	b.n	800404a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d107      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f52:	4b41      	ldr	r3, [pc, #260]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e073      	b.n	800404a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f62:	4b3d      	ldr	r3, [pc, #244]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e06b      	b.n	800404a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f72:	4b39      	ldr	r3, [pc, #228]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f023 0203 	bic.w	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4936      	ldr	r1, [pc, #216]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f84:	f7fe fc40 	bl	8002808 <HAL_GetTick>
 8003f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8a:	e00a      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f8c:	f7fe fc3c 	bl	8002808 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e053      	b.n	800404a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa2:	4b2d      	ldr	r3, [pc, #180]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f003 020c 	and.w	r2, r3, #12
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d1eb      	bne.n	8003f8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb4:	4b27      	ldr	r3, [pc, #156]	; (8004054 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d210      	bcs.n	8003fe4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc2:	4b24      	ldr	r3, [pc, #144]	; (8004054 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f023 0207 	bic.w	r2, r3, #7
 8003fca:	4922      	ldr	r1, [pc, #136]	; (8004054 <HAL_RCC_ClockConfig+0x1c0>)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd2:	4b20      	ldr	r3, [pc, #128]	; (8004054 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e032      	b.n	800404a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff0:	4b19      	ldr	r3, [pc, #100]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4916      	ldr	r1, [pc, #88]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800400e:	4b12      	ldr	r3, [pc, #72]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	490e      	ldr	r1, [pc, #56]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	4313      	orrs	r3, r2
 8004020:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004022:	f000 f82d 	bl	8004080 <HAL_RCC_GetSysClockFreq>
 8004026:	4602      	mov	r2, r0
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	490a      	ldr	r1, [pc, #40]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8004034:	5ccb      	ldrb	r3, [r1, r3]
 8004036:	fa22 f303 	lsr.w	r3, r2, r3
 800403a:	4a09      	ldr	r2, [pc, #36]	; (8004060 <HAL_RCC_ClockConfig+0x1cc>)
 800403c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800403e:	4b09      	ldr	r3, [pc, #36]	; (8004064 <HAL_RCC_ClockConfig+0x1d0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f7fe fb9e 	bl	8002784 <HAL_InitTick>

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40022000 	.word	0x40022000
 8004058:	40021000 	.word	0x40021000
 800405c:	08008080 	.word	0x08008080
 8004060:	20000008 	.word	0x20000008
 8004064:	2000000c 	.word	0x2000000c

08004068 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800406c:	4b03      	ldr	r3, [pc, #12]	; (800407c <HAL_RCC_EnableCSS+0x14>)
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]
}
 8004072:	bf00      	nop
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	4242004c 	.word	0x4242004c

08004080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004080:	b490      	push	{r4, r7}
 8004082:	b08a      	sub	sp, #40	; 0x28
 8004084:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004086:	4b29      	ldr	r3, [pc, #164]	; (800412c <HAL_RCC_GetSysClockFreq+0xac>)
 8004088:	1d3c      	adds	r4, r7, #4
 800408a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800408c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004090:	f240 2301 	movw	r3, #513	; 0x201
 8004094:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
 800409a:	2300      	movs	r3, #0
 800409c:	61bb      	str	r3, [r7, #24]
 800409e:	2300      	movs	r3, #0
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040aa:	4b21      	ldr	r3, [pc, #132]	; (8004130 <HAL_RCC_GetSysClockFreq+0xb0>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d002      	beq.n	80040c0 <HAL_RCC_GetSysClockFreq+0x40>
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d003      	beq.n	80040c6 <HAL_RCC_GetSysClockFreq+0x46>
 80040be:	e02b      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040c0:	4b1c      	ldr	r3, [pc, #112]	; (8004134 <HAL_RCC_GetSysClockFreq+0xb4>)
 80040c2:	623b      	str	r3, [r7, #32]
      break;
 80040c4:	e02b      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	0c9b      	lsrs	r3, r3, #18
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	3328      	adds	r3, #40	; 0x28
 80040d0:	443b      	add	r3, r7
 80040d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80040d6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d012      	beq.n	8004108 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040e2:	4b13      	ldr	r3, [pc, #76]	; (8004130 <HAL_RCC_GetSysClockFreq+0xb0>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	0c5b      	lsrs	r3, r3, #17
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	3328      	adds	r3, #40	; 0x28
 80040ee:	443b      	add	r3, r7
 80040f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80040f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	4a0e      	ldr	r2, [pc, #56]	; (8004134 <HAL_RCC_GetSysClockFreq+0xb4>)
 80040fa:	fb03 f202 	mul.w	r2, r3, r2
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	fbb2 f3f3 	udiv	r3, r2, r3
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
 8004106:	e004      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	4a0b      	ldr	r2, [pc, #44]	; (8004138 <HAL_RCC_GetSysClockFreq+0xb8>)
 800410c:	fb02 f303 	mul.w	r3, r2, r3
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	623b      	str	r3, [r7, #32]
      break;
 8004116:	e002      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004118:	4b06      	ldr	r3, [pc, #24]	; (8004134 <HAL_RCC_GetSysClockFreq+0xb4>)
 800411a:	623b      	str	r3, [r7, #32]
      break;
 800411c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800411e:	6a3b      	ldr	r3, [r7, #32]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3728      	adds	r7, #40	; 0x28
 8004124:	46bd      	mov	sp, r7
 8004126:	bc90      	pop	{r4, r7}
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	08008060 	.word	0x08008060
 8004130:	40021000 	.word	0x40021000
 8004134:	007a1200 	.word	0x007a1200
 8004138:	003d0900 	.word	0x003d0900

0800413c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004140:	4b02      	ldr	r3, [pc, #8]	; (800414c <HAL_RCC_GetHCLKFreq+0x10>)
 8004142:	681b      	ldr	r3, [r3, #0]
}
 8004144:	4618      	mov	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	20000008 	.word	0x20000008

08004150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004154:	f7ff fff2 	bl	800413c <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	0a1b      	lsrs	r3, r3, #8
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4903      	ldr	r1, [pc, #12]	; (8004174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40021000 	.word	0x40021000
 8004174:	08008090 	.word	0x08008090

08004178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800417c:	f7ff ffde 	bl	800413c <HAL_RCC_GetHCLKFreq>
 8004180:	4602      	mov	r2, r0
 8004182:	4b05      	ldr	r3, [pc, #20]	; (8004198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	0adb      	lsrs	r3, r3, #11
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	4903      	ldr	r1, [pc, #12]	; (800419c <HAL_RCC_GetPCLK2Freq+0x24>)
 800418e:	5ccb      	ldrb	r3, [r1, r3]
 8004190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004194:	4618      	mov	r0, r3
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40021000 	.word	0x40021000
 800419c:	08008090 	.word	0x08008090

080041a0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <HAL_RCC_NMI_IRQHandler+0x20>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ac:	2b80      	cmp	r3, #128	; 0x80
 80041ae:	d104      	bne.n	80041ba <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80041b0:	f000 f828 	bl	8004204 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80041b4:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80041b6:	2280      	movs	r2, #128	; 0x80
 80041b8:	701a      	strb	r2, [r3, #0]
  }
}
 80041ba:	bf00      	nop
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000
 80041c4:	4002100a 	.word	0x4002100a

080041c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041d0:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <RCC_Delay+0x34>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <RCC_Delay+0x38>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	0a5b      	lsrs	r3, r3, #9
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041e4:	bf00      	nop
  }
  while (Delay --);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1e5a      	subs	r2, r3, #1
 80041ea:	60fa      	str	r2, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f9      	bne.n	80041e4 <RCC_Delay+0x1c>
}
 80041f0:	bf00      	nop
 80041f2:	bf00      	nop
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr
 80041fc:	20000008 	.word	0x20000008
 8004200:	10624dd3 	.word	0x10624dd3

08004204 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8004208:	bf00      	nop
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d07d      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800422c:	2300      	movs	r3, #0
 800422e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004230:	4b4f      	ldr	r3, [pc, #316]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10d      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423c:	4b4c      	ldr	r3, [pc, #304]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	4a4b      	ldr	r2, [pc, #300]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004246:	61d3      	str	r3, [r2, #28]
 8004248:	4b49      	ldr	r3, [pc, #292]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004254:	2301      	movs	r3, #1
 8004256:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004258:	4b46      	ldr	r3, [pc, #280]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004260:	2b00      	cmp	r3, #0
 8004262:	d118      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004264:	4b43      	ldr	r3, [pc, #268]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a42      	ldr	r2, [pc, #264]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800426a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004270:	f7fe faca 	bl	8002808 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004276:	e008      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004278:	f7fe fac6 	bl	8002808 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b64      	cmp	r3, #100	; 0x64
 8004284:	d901      	bls.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e06d      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428a:	4b3a      	ldr	r3, [pc, #232]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004296:	4b36      	ldr	r3, [pc, #216]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d02e      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d027      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042b4:	4b2e      	ldr	r3, [pc, #184]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042be:	4b2e      	ldr	r3, [pc, #184]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042c4:	4b2c      	ldr	r3, [pc, #176]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042ca:	4a29      	ldr	r2, [pc, #164]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d014      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042da:	f7fe fa95 	bl	8002808 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e0:	e00a      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e2:	f7fe fa91 	bl	8002808 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e036      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f8:	4b1d      	ldr	r3, [pc, #116]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ee      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004304:	4b1a      	ldr	r3, [pc, #104]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4917      	ldr	r1, [pc, #92]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004312:	4313      	orrs	r3, r2
 8004314:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004316:	7dfb      	ldrb	r3, [r7, #23]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d105      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431c:	4b14      	ldr	r3, [pc, #80]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	4a13      	ldr	r2, [pc, #76]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004326:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004334:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	490b      	ldr	r1, [pc, #44]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004342:	4313      	orrs	r3, r2
 8004344:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004352:	4b07      	ldr	r3, [pc, #28]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	4904      	ldr	r1, [pc, #16]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004360:	4313      	orrs	r3, r2
 8004362:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40021000 	.word	0x40021000
 8004374:	40007000 	.word	0x40007000
 8004378:	42420440 	.word	0x42420440

0800437c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800437c:	b590      	push	{r4, r7, lr}
 800437e:	b08d      	sub	sp, #52	; 0x34
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004384:	4b6a      	ldr	r3, [pc, #424]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8004386:	f107 040c 	add.w	r4, r7, #12
 800438a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800438c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004390:	f240 2301 	movw	r3, #513	; 0x201
 8004394:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
 800439a:	2300      	movs	r3, #0
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800439e:	2300      	movs	r3, #0
 80043a0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	2300      	movs	r3, #0
 80043a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	2b0f      	cmp	r3, #15
 80043b0:	f200 80b4 	bhi.w	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 80043b4:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80043b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ba:	bf00      	nop
 80043bc:	0800449b 	.word	0x0800449b
 80043c0:	08004501 	.word	0x08004501
 80043c4:	0800451d 	.word	0x0800451d
 80043c8:	0800448b 	.word	0x0800448b
 80043cc:	0800451d 	.word	0x0800451d
 80043d0:	0800451d 	.word	0x0800451d
 80043d4:	0800451d 	.word	0x0800451d
 80043d8:	08004493 	.word	0x08004493
 80043dc:	0800451d 	.word	0x0800451d
 80043e0:	0800451d 	.word	0x0800451d
 80043e4:	0800451d 	.word	0x0800451d
 80043e8:	0800451d 	.word	0x0800451d
 80043ec:	0800451d 	.word	0x0800451d
 80043f0:	0800451d 	.word	0x0800451d
 80043f4:	0800451d 	.word	0x0800451d
 80043f8:	080043fd 	.word	0x080043fd
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80043fc:	4b4d      	ldr	r3, [pc, #308]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004402:	4b4c      	ldr	r3, [pc, #304]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 8088 	beq.w	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	0c9b      	lsrs	r3, r3, #18
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	3330      	adds	r3, #48	; 0x30
 800441a:	443b      	add	r3, r7
 800441c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004420:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d017      	beq.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800442c:	4b41      	ldr	r3, [pc, #260]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	0c5b      	lsrs	r3, r3, #17
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	3330      	adds	r3, #48	; 0x30
 8004438:	443b      	add	r3, r7
 800443a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00d      	beq.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800444a:	4a3b      	ldr	r2, [pc, #236]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	fb02 f303 	mul.w	r3, r2, r3
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
 800445a:	e004      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	4a37      	ldr	r2, [pc, #220]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8004460:	fb02 f303 	mul.w	r3, r2, r3
 8004464:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004466:	4b33      	ldr	r3, [pc, #204]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004472:	d102      	bne.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004476:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004478:	e052      	b.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	4a30      	ldr	r2, [pc, #192]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8004480:	fba2 2303 	umull	r2, r3, r2, r3
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004488:	e04a      	b.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800448a:	f7ff fdf9 	bl	8004080 <HAL_RCC_GetSysClockFreq>
 800448e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004490:	e049      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004492:	f7ff fdf5 	bl	8004080 <HAL_RCC_GetSysClockFreq>
 8004496:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004498:	e045      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800449a:	4b26      	ldr	r3, [pc, #152]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044aa:	d108      	bne.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 80044b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80044bc:	e01f      	b.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c8:	d109      	bne.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80044ca:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 80044d6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80044da:	62bb      	str	r3, [r7, #40]	; 0x28
 80044dc:	e00f      	b.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044e8:	d11c      	bne.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80044ea:	4b12      	ldr	r3, [pc, #72]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d016      	beq.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 80044f6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80044fa:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80044fc:	e012      	b.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80044fe:	e011      	b.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004500:	f7ff fe3a 	bl	8004178 <HAL_RCC_GetPCLK2Freq>
 8004504:	4602      	mov	r2, r0
 8004506:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	0b9b      	lsrs	r3, r3, #14
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	3301      	adds	r3, #1
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800451a:	e004      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 800451c:	bf00      	nop
 800451e:	e002      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8004520:	bf00      	nop
 8004522:	e000      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8004524:	bf00      	nop
    }
  }
  return (frequency);
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004528:	4618      	mov	r0, r3
 800452a:	3734      	adds	r7, #52	; 0x34
 800452c:	46bd      	mov	sp, r7
 800452e:	bd90      	pop	{r4, r7, pc}
 8004530:	08008070 	.word	0x08008070
 8004534:	40021000 	.word	0x40021000
 8004538:	007a1200 	.word	0x007a1200
 800453c:	003d0900 	.word	0x003d0900
 8004540:	aaaaaaab 	.word	0xaaaaaaab

08004544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e041      	b.n	80045da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fd ff54 	bl	8002418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3304      	adds	r3, #4
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f000 fc4e 	bl	8004e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d001      	beq.n	80045fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e044      	b.n	8004686 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1d      	ldr	r2, [pc, #116]	; (8004690 <HAL_TIM_Base_Start_IT+0xac>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d018      	beq.n	8004650 <HAL_TIM_Base_Start_IT+0x6c>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a1c      	ldr	r2, [pc, #112]	; (8004694 <HAL_TIM_Base_Start_IT+0xb0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d013      	beq.n	8004650 <HAL_TIM_Base_Start_IT+0x6c>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004630:	d00e      	beq.n	8004650 <HAL_TIM_Base_Start_IT+0x6c>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a18      	ldr	r2, [pc, #96]	; (8004698 <HAL_TIM_Base_Start_IT+0xb4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d009      	beq.n	8004650 <HAL_TIM_Base_Start_IT+0x6c>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a16      	ldr	r2, [pc, #88]	; (800469c <HAL_TIM_Base_Start_IT+0xb8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d004      	beq.n	8004650 <HAL_TIM_Base_Start_IT+0x6c>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <HAL_TIM_Base_Start_IT+0xbc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d111      	bne.n	8004674 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b06      	cmp	r3, #6
 8004660:	d010      	beq.n	8004684 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0201 	orr.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004672:	e007      	b.n	8004684 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr
 8004690:	40012c00 	.word	0x40012c00
 8004694:	40013400 	.word	0x40013400
 8004698:	40000400 	.word	0x40000400
 800469c:	40000800 	.word	0x40000800
 80046a0:	40000c00 	.word	0x40000c00

080046a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e041      	b.n	800473a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f839 	bl	8004742 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3304      	adds	r3, #4
 80046e0:	4619      	mov	r1, r3
 80046e2:	4610      	mov	r0, r2
 80046e4:	f000 fb9e 	bl	8004e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr

08004754 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <HAL_TIM_PWM_Start+0x24>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e022      	b.n	80047be <HAL_TIM_PWM_Start+0x6a>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b04      	cmp	r3, #4
 800477c:	d109      	bne.n	8004792 <HAL_TIM_PWM_Start+0x3e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b01      	cmp	r3, #1
 8004788:	bf14      	ite	ne
 800478a:	2301      	movne	r3, #1
 800478c:	2300      	moveq	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	e015      	b.n	80047be <HAL_TIM_PWM_Start+0x6a>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d109      	bne.n	80047ac <HAL_TIM_PWM_Start+0x58>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e008      	b.n	80047be <HAL_TIM_PWM_Start+0x6a>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	bf14      	ite	ne
 80047b8:	2301      	movne	r3, #1
 80047ba:	2300      	moveq	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e072      	b.n	80048ac <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d104      	bne.n	80047d6 <HAL_TIM_PWM_Start+0x82>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047d4:	e013      	b.n	80047fe <HAL_TIM_PWM_Start+0xaa>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d104      	bne.n	80047e6 <HAL_TIM_PWM_Start+0x92>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047e4:	e00b      	b.n	80047fe <HAL_TIM_PWM_Start+0xaa>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d104      	bne.n	80047f6 <HAL_TIM_PWM_Start+0xa2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f4:	e003      	b.n	80047fe <HAL_TIM_PWM_Start+0xaa>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2202      	movs	r2, #2
 80047fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2201      	movs	r2, #1
 8004804:	6839      	ldr	r1, [r7, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fdc8 	bl	800539c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a28      	ldr	r2, [pc, #160]	; (80048b4 <HAL_TIM_PWM_Start+0x160>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <HAL_TIM_PWM_Start+0xcc>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a27      	ldr	r2, [pc, #156]	; (80048b8 <HAL_TIM_PWM_Start+0x164>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d101      	bne.n	8004824 <HAL_TIM_PWM_Start+0xd0>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <HAL_TIM_PWM_Start+0xd2>
 8004824:	2300      	movs	r3, #0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d007      	beq.n	800483a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004838:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1d      	ldr	r2, [pc, #116]	; (80048b4 <HAL_TIM_PWM_Start+0x160>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d018      	beq.n	8004876 <HAL_TIM_PWM_Start+0x122>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1b      	ldr	r2, [pc, #108]	; (80048b8 <HAL_TIM_PWM_Start+0x164>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <HAL_TIM_PWM_Start+0x122>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004856:	d00e      	beq.n	8004876 <HAL_TIM_PWM_Start+0x122>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a17      	ldr	r2, [pc, #92]	; (80048bc <HAL_TIM_PWM_Start+0x168>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d009      	beq.n	8004876 <HAL_TIM_PWM_Start+0x122>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a16      	ldr	r2, [pc, #88]	; (80048c0 <HAL_TIM_PWM_Start+0x16c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d004      	beq.n	8004876 <HAL_TIM_PWM_Start+0x122>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a14      	ldr	r2, [pc, #80]	; (80048c4 <HAL_TIM_PWM_Start+0x170>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d111      	bne.n	800489a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b06      	cmp	r3, #6
 8004886:	d010      	beq.n	80048aa <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004898:	e007      	b.n	80048aa <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f042 0201 	orr.w	r2, r2, #1
 80048a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40013400 	.word	0x40013400
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40000800 	.word	0x40000800
 80048c4:	40000c00 	.word	0x40000c00

080048c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d122      	bne.n	8004924 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d11b      	bne.n	8004924 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f06f 0202 	mvn.w	r2, #2
 80048f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fa6f 	bl	8004dee <HAL_TIM_IC_CaptureCallback>
 8004910:	e005      	b.n	800491e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fa62 	bl	8004ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fa71 	bl	8004e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b04      	cmp	r3, #4
 8004930:	d122      	bne.n	8004978 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b04      	cmp	r3, #4
 800493e:	d11b      	bne.n	8004978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f06f 0204 	mvn.w	r2, #4
 8004948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2202      	movs	r2, #2
 800494e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fa45 	bl	8004dee <HAL_TIM_IC_CaptureCallback>
 8004964:	e005      	b.n	8004972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fa38 	bl	8004ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fa47 	bl	8004e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b08      	cmp	r3, #8
 8004984:	d122      	bne.n	80049cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b08      	cmp	r3, #8
 8004992:	d11b      	bne.n	80049cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0208 	mvn.w	r2, #8
 800499c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2204      	movs	r2, #4
 80049a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fa1b 	bl	8004dee <HAL_TIM_IC_CaptureCallback>
 80049b8:	e005      	b.n	80049c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fa0e 	bl	8004ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 fa1d 	bl	8004e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0310 	and.w	r3, r3, #16
 80049d6:	2b10      	cmp	r3, #16
 80049d8:	d122      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0310 	and.w	r3, r3, #16
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d11b      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0210 	mvn.w	r2, #16
 80049f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2208      	movs	r2, #8
 80049f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f9f1 	bl	8004dee <HAL_TIM_IC_CaptureCallback>
 8004a0c:	e005      	b.n	8004a1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f9e4 	bl	8004ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f9f3 	bl	8004e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d10e      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d107      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0201 	mvn.w	r2, #1
 8004a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fc fdec 	bl	8001624 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a56:	2b80      	cmp	r3, #128	; 0x80
 8004a58:	d10e      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a64:	2b80      	cmp	r3, #128	; 0x80
 8004a66:	d107      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fd2b 	bl	80054ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a82:	2b40      	cmp	r3, #64	; 0x40
 8004a84:	d10e      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d107      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f9b7 	bl	8004e12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b20      	cmp	r3, #32
 8004ab0:	d10e      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	d107      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0220 	mvn.w	r2, #32
 8004ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fcf6 	bl	80054bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e0ac      	b.n	8004c4c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b0c      	cmp	r3, #12
 8004afe:	f200 809f 	bhi.w	8004c40 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004b02:	a201      	add	r2, pc, #4	; (adr r2, 8004b08 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b08:	08004b3d 	.word	0x08004b3d
 8004b0c:	08004c41 	.word	0x08004c41
 8004b10:	08004c41 	.word	0x08004c41
 8004b14:	08004c41 	.word	0x08004c41
 8004b18:	08004b7d 	.word	0x08004b7d
 8004b1c:	08004c41 	.word	0x08004c41
 8004b20:	08004c41 	.word	0x08004c41
 8004b24:	08004c41 	.word	0x08004c41
 8004b28:	08004bbf 	.word	0x08004bbf
 8004b2c:	08004c41 	.word	0x08004c41
 8004b30:	08004c41 	.word	0x08004c41
 8004b34:	08004c41 	.word	0x08004c41
 8004b38:	08004bff 	.word	0x08004bff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 f9e8 	bl	8004f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0208 	orr.w	r2, r2, #8
 8004b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0204 	bic.w	r2, r2, #4
 8004b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6999      	ldr	r1, [r3, #24]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	691a      	ldr	r2, [r3, #16]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	619a      	str	r2, [r3, #24]
      break;
 8004b7a:	e062      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fa38 	bl	8004ff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6999      	ldr	r1, [r3, #24]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	021a      	lsls	r2, r3, #8
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	619a      	str	r2, [r3, #24]
      break;
 8004bbc:	e041      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68b9      	ldr	r1, [r7, #8]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fa8b 	bl	80050e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 0208 	orr.w	r2, r2, #8
 8004bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0204 	bic.w	r2, r2, #4
 8004be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69d9      	ldr	r1, [r3, #28]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	61da      	str	r2, [r3, #28]
      break;
 8004bfc:	e021      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fadf 	bl	80051c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69da      	ldr	r2, [r3, #28]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69d9      	ldr	r1, [r3, #28]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	021a      	lsls	r2, r3, #8
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	61da      	str	r2, [r3, #28]
      break;
 8004c3e:	e000      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004c40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_TIM_ConfigClockSource+0x18>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e0b3      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x180>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca4:	d03e      	beq.n	8004d24 <HAL_TIM_ConfigClockSource+0xd0>
 8004ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004caa:	f200 8087 	bhi.w	8004dbc <HAL_TIM_ConfigClockSource+0x168>
 8004cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb2:	f000 8085 	beq.w	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cba:	d87f      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x168>
 8004cbc:	2b70      	cmp	r3, #112	; 0x70
 8004cbe:	d01a      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0xa2>
 8004cc0:	2b70      	cmp	r3, #112	; 0x70
 8004cc2:	d87b      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x168>
 8004cc4:	2b60      	cmp	r3, #96	; 0x60
 8004cc6:	d050      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x116>
 8004cc8:	2b60      	cmp	r3, #96	; 0x60
 8004cca:	d877      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x168>
 8004ccc:	2b50      	cmp	r3, #80	; 0x50
 8004cce:	d03c      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0xf6>
 8004cd0:	2b50      	cmp	r3, #80	; 0x50
 8004cd2:	d873      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x168>
 8004cd4:	2b40      	cmp	r3, #64	; 0x40
 8004cd6:	d058      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x136>
 8004cd8:	2b40      	cmp	r3, #64	; 0x40
 8004cda:	d86f      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x168>
 8004cdc:	2b30      	cmp	r3, #48	; 0x30
 8004cde:	d064      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x156>
 8004ce0:	2b30      	cmp	r3, #48	; 0x30
 8004ce2:	d86b      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x168>
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d060      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x156>
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d867      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x168>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d05c      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x156>
 8004cf0:	2b10      	cmp	r3, #16
 8004cf2:	d05a      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004cf4:	e062      	b.n	8004dbc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6899      	ldr	r1, [r3, #8]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f000 fb2a 	bl	800535e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	609a      	str	r2, [r3, #8]
      break;
 8004d22:	e04e      	b.n	8004dc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	6899      	ldr	r1, [r3, #8]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f000 fb13 	bl	800535e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d46:	609a      	str	r2, [r3, #8]
      break;
 8004d48:	e03b      	b.n	8004dc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6859      	ldr	r1, [r3, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	461a      	mov	r2, r3
 8004d58:	f000 fa8a 	bl	8005270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2150      	movs	r1, #80	; 0x50
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fae1 	bl	800532a <TIM_ITRx_SetConfig>
      break;
 8004d68:	e02b      	b.n	8004dc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6859      	ldr	r1, [r3, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	461a      	mov	r2, r3
 8004d78:	f000 faa8 	bl	80052cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2160      	movs	r1, #96	; 0x60
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fad1 	bl	800532a <TIM_ITRx_SetConfig>
      break;
 8004d88:	e01b      	b.n	8004dc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6859      	ldr	r1, [r3, #4]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f000 fa6a 	bl	8005270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2140      	movs	r1, #64	; 0x40
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fac1 	bl	800532a <TIM_ITRx_SetConfig>
      break;
 8004da8:	e00b      	b.n	8004dc2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4619      	mov	r1, r3
 8004db4:	4610      	mov	r0, r2
 8004db6:	f000 fab8 	bl	800532a <TIM_ITRx_SetConfig>
        break;
 8004dba:	e002      	b.n	8004dc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004dbc:	bf00      	nop
 8004dbe:	e000      	b.n	8004dc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004dc0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr

08004dee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bc80      	pop	{r7}
 8004dfe:	4770      	bx	lr

08004e00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr

08004e12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr

08004e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a33      	ldr	r2, [pc, #204]	; (8004f04 <TIM_Base_SetConfig+0xe0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d013      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a32      	ldr	r2, [pc, #200]	; (8004f08 <TIM_Base_SetConfig+0xe4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00f      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4a:	d00b      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a2f      	ldr	r2, [pc, #188]	; (8004f0c <TIM_Base_SetConfig+0xe8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d007      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a2e      	ldr	r2, [pc, #184]	; (8004f10 <TIM_Base_SetConfig+0xec>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d003      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a2d      	ldr	r2, [pc, #180]	; (8004f14 <TIM_Base_SetConfig+0xf0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d108      	bne.n	8004e76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a22      	ldr	r2, [pc, #136]	; (8004f04 <TIM_Base_SetConfig+0xe0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d013      	beq.n	8004ea6 <TIM_Base_SetConfig+0x82>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a21      	ldr	r2, [pc, #132]	; (8004f08 <TIM_Base_SetConfig+0xe4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00f      	beq.n	8004ea6 <TIM_Base_SetConfig+0x82>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8c:	d00b      	beq.n	8004ea6 <TIM_Base_SetConfig+0x82>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a1e      	ldr	r2, [pc, #120]	; (8004f0c <TIM_Base_SetConfig+0xe8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d007      	beq.n	8004ea6 <TIM_Base_SetConfig+0x82>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a1d      	ldr	r2, [pc, #116]	; (8004f10 <TIM_Base_SetConfig+0xec>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d003      	beq.n	8004ea6 <TIM_Base_SetConfig+0x82>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <TIM_Base_SetConfig+0xf0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d108      	bne.n	8004eb8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a09      	ldr	r2, [pc, #36]	; (8004f04 <TIM_Base_SetConfig+0xe0>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <TIM_Base_SetConfig+0xc8>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <TIM_Base_SetConfig+0xe4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d103      	bne.n	8004ef4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	615a      	str	r2, [r3, #20]
}
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc80      	pop	{r7}
 8004f02:	4770      	bx	lr
 8004f04:	40012c00 	.word	0x40012c00
 8004f08:	40013400 	.word	0x40013400
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40000800 	.word	0x40000800
 8004f14:	40000c00 	.word	0x40000c00

08004f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f023 0201 	bic.w	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0303 	bic.w	r3, r3, #3
 8004f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f023 0302 	bic.w	r3, r3, #2
 8004f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a20      	ldr	r2, [pc, #128]	; (8004ff0 <TIM_OC1_SetConfig+0xd8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_OC1_SetConfig+0x64>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a1f      	ldr	r2, [pc, #124]	; (8004ff4 <TIM_OC1_SetConfig+0xdc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d10c      	bne.n	8004f96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f023 0308 	bic.w	r3, r3, #8
 8004f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f023 0304 	bic.w	r3, r3, #4
 8004f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <TIM_OC1_SetConfig+0xd8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <TIM_OC1_SetConfig+0x8e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a14      	ldr	r2, [pc, #80]	; (8004ff4 <TIM_OC1_SetConfig+0xdc>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d111      	bne.n	8004fca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	621a      	str	r2, [r3, #32]
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40012c00 	.word	0x40012c00
 8004ff4:	40013400 	.word	0x40013400

08004ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f023 0210 	bic.w	r2, r3, #16
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	021b      	lsls	r3, r3, #8
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f023 0320 	bic.w	r3, r3, #32
 8005042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a21      	ldr	r2, [pc, #132]	; (80050d8 <TIM_OC2_SetConfig+0xe0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d003      	beq.n	8005060 <TIM_OC2_SetConfig+0x68>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a20      	ldr	r2, [pc, #128]	; (80050dc <TIM_OC2_SetConfig+0xe4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d10d      	bne.n	800507c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800507a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a16      	ldr	r2, [pc, #88]	; (80050d8 <TIM_OC2_SetConfig+0xe0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d003      	beq.n	800508c <TIM_OC2_SetConfig+0x94>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a15      	ldr	r2, [pc, #84]	; (80050dc <TIM_OC2_SetConfig+0xe4>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d113      	bne.n	80050b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005092:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800509a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	621a      	str	r2, [r3, #32]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr
 80050d8:	40012c00 	.word	0x40012c00
 80050dc:	40013400 	.word	0x40013400

080050e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0303 	bic.w	r3, r3, #3
 8005116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <TIM_OC3_SetConfig+0xe0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d003      	beq.n	8005146 <TIM_OC3_SetConfig+0x66>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a20      	ldr	r2, [pc, #128]	; (80051c4 <TIM_OC3_SetConfig+0xe4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d10d      	bne.n	8005162 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800514c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a16      	ldr	r2, [pc, #88]	; (80051c0 <TIM_OC3_SetConfig+0xe0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d003      	beq.n	8005172 <TIM_OC3_SetConfig+0x92>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a15      	ldr	r2, [pc, #84]	; (80051c4 <TIM_OC3_SetConfig+0xe4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d113      	bne.n	800519a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	621a      	str	r2, [r3, #32]
}
 80051b4:	bf00      	nop
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40012c00 	.word	0x40012c00
 80051c4:	40013400 	.word	0x40013400

080051c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	031b      	lsls	r3, r3, #12
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a11      	ldr	r2, [pc, #68]	; (8005268 <TIM_OC4_SetConfig+0xa0>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d003      	beq.n	8005230 <TIM_OC4_SetConfig+0x68>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a10      	ldr	r2, [pc, #64]	; (800526c <TIM_OC4_SetConfig+0xa4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d109      	bne.n	8005244 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005236:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	019b      	lsls	r3, r3, #6
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	bc80      	pop	{r7}
 8005266:	4770      	bx	lr
 8005268:	40012c00 	.word	0x40012c00
 800526c:	40013400 	.word	0x40013400

08005270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f023 0201 	bic.w	r2, r3, #1
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800529a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f023 030a 	bic.w	r3, r3, #10
 80052ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	621a      	str	r2, [r3, #32]
}
 80052c2:	bf00      	nop
 80052c4:	371c      	adds	r7, #28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bc80      	pop	{r7}
 80052ca:	4770      	bx	lr

080052cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	f023 0210 	bic.w	r2, r3, #16
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	031b      	lsls	r3, r3, #12
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005308:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	621a      	str	r2, [r3, #32]
}
 8005320:	bf00      	nop
 8005322:	371c      	adds	r7, #28
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr

0800532a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800532a:	b480      	push	{r7}
 800532c:	b085      	sub	sp, #20
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005340:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	f043 0307 	orr.w	r3, r3, #7
 800534c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	609a      	str	r2, [r3, #8]
}
 8005354:	bf00      	nop
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	bc80      	pop	{r7}
 800535c:	4770      	bx	lr

0800535e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800535e:	b480      	push	{r7}
 8005360:	b087      	sub	sp, #28
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	607a      	str	r2, [r7, #4]
 800536a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005378:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	021a      	lsls	r2, r3, #8
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	431a      	orrs	r2, r3
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4313      	orrs	r3, r2
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	609a      	str	r2, [r3, #8]
}
 8005392:	bf00      	nop
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f003 031f 	and.w	r3, r3, #31
 80053ae:	2201      	movs	r2, #1
 80053b0:	fa02 f303 	lsl.w	r3, r2, r3
 80053b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a1a      	ldr	r2, [r3, #32]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	43db      	mvns	r3, r3
 80053be:	401a      	ands	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a1a      	ldr	r2, [r3, #32]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f003 031f 	and.w	r3, r3, #31
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	fa01 f303 	lsl.w	r3, r1, r3
 80053d4:	431a      	orrs	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	621a      	str	r2, [r3, #32]
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr

080053e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053f8:	2302      	movs	r3, #2
 80053fa:	e050      	b.n	800549e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1b      	ldr	r2, [pc, #108]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d018      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a19      	ldr	r2, [pc, #100]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d013      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005452:	d00e      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a15      	ldr	r2, [pc, #84]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d009      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a14      	ldr	r2, [pc, #80]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d004      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a12      	ldr	r2, [pc, #72]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d10c      	bne.n	800548c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005478:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	4313      	orrs	r3, r2
 8005482:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bc80      	pop	{r7}
 80054a6:	4770      	bx	lr
 80054a8:	40012c00 	.word	0x40012c00
 80054ac:	40013400 	.word	0x40013400
 80054b0:	40000400 	.word	0x40000400
 80054b4:	40000800 	.word	0x40000800
 80054b8:	40000c00 	.word	0x40000c00

080054bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr

080054ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr

080054e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e03f      	b.n	8005572 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7fd f840 	bl	800258c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2224      	movs	r2, #36	; 0x24
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005522:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fba9 	bl	8005c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005538:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695a      	ldr	r2, [r3, #20]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005548:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005558:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	4613      	mov	r3, r2
 8005586:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b20      	cmp	r3, #32
 8005592:	d11d      	bne.n	80055d0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <HAL_UART_Receive_IT+0x26>
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e016      	b.n	80055d2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d101      	bne.n	80055b2 <HAL_UART_Receive_IT+0x38>
 80055ae:	2302      	movs	r3, #2
 80055b0:	e00f      	b.n	80055d2 <HAL_UART_Receive_IT+0x58>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80055c0:	88fb      	ldrh	r3, [r7, #6]
 80055c2:	461a      	mov	r2, r3
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 f9cf 	bl	800596a <UART_Start_Receive_IT>
 80055cc:	4603      	mov	r3, r0
 80055ce:	e000      	b.n	80055d2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80055d0:	2302      	movs	r3, #2
  }
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08a      	sub	sp, #40	; 0x28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005600:	2300      	movs	r3, #0
 8005602:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10d      	bne.n	800562e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b00      	cmp	r3, #0
 800561a:	d008      	beq.n	800562e <HAL_UART_IRQHandler+0x52>
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fa7f 	bl	8005b2a <UART_Receive_IT>
      return;
 800562c:	e17b      	b.n	8005926 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 80b1 	beq.w	8005798 <HAL_UART_IRQHandler+0x1bc>
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	d105      	bne.n	800564c <HAL_UART_IRQHandler+0x70>
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 80a6 	beq.w	8005798 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_UART_IRQHandler+0x90>
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d005      	beq.n	800566c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005664:	f043 0201 	orr.w	r2, r3, #1
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <HAL_UART_IRQHandler+0xb0>
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	f043 0202 	orr.w	r2, r3, #2
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <HAL_UART_IRQHandler+0xd0>
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d005      	beq.n	80056ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a4:	f043 0204 	orr.w	r2, r3, #4
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00f      	beq.n	80056d6 <HAL_UART_IRQHandler+0xfa>
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d104      	bne.n	80056ca <HAL_UART_IRQHandler+0xee>
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d005      	beq.n	80056d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f043 0208 	orr.w	r2, r3, #8
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 811e 	beq.w	800591c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <HAL_UART_IRQHandler+0x11e>
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fa18 	bl	8005b2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	bf14      	ite	ne
 8005708:	2301      	movne	r3, #1
 800570a:	2300      	moveq	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b00      	cmp	r3, #0
 800571a:	d102      	bne.n	8005722 <HAL_UART_IRQHandler+0x146>
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d031      	beq.n	8005786 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f95a 	bl	80059dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005732:	2b00      	cmp	r3, #0
 8005734:	d023      	beq.n	800577e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695a      	ldr	r2, [r3, #20]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005744:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574a:	2b00      	cmp	r3, #0
 800574c:	d013      	beq.n	8005776 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	4a76      	ldr	r2, [pc, #472]	; (800592c <HAL_UART_IRQHandler+0x350>)
 8005754:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	4618      	mov	r0, r3
 800575c:	f7fd fe34 	bl	80033c8 <HAL_DMA_Abort_IT>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d016      	beq.n	8005794 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005770:	4610      	mov	r0, r2
 8005772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005774:	e00e      	b.n	8005794 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f8e3 	bl	8005942 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800577c:	e00a      	b.n	8005794 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f8df 	bl	8005942 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005784:	e006      	b.n	8005794 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f8db 	bl	8005942 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005792:	e0c3      	b.n	800591c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005794:	bf00      	nop
    return;
 8005796:	e0c1      	b.n	800591c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579c:	2b01      	cmp	r3, #1
 800579e:	f040 80a1 	bne.w	80058e4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 809b 	beq.w	80058e4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 8095 	beq.w	80058e4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d04e      	beq.n	800587c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80057e8:	8a3b      	ldrh	r3, [r7, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 8098 	beq.w	8005920 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057f4:	8a3a      	ldrh	r2, [r7, #16]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	f080 8092 	bcs.w	8005920 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8a3a      	ldrh	r2, [r7, #16]
 8005800:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	2b20      	cmp	r3, #32
 800580a:	d02b      	beq.n	8005864 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800581a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695a      	ldr	r2, [r3, #20]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0201 	bic.w	r2, r2, #1
 800582a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695a      	ldr	r2, [r3, #20]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800583a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0210 	bic.w	r2, r2, #16
 8005858:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585e:	4618      	mov	r0, r3
 8005860:	f7fd fd77 	bl	8003352 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800586c:	b29b      	uxth	r3, r3
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	b29b      	uxth	r3, r3
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f86d 	bl	8005954 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800587a:	e051      	b.n	8005920 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005884:	b29b      	uxth	r3, r3
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d047      	beq.n	8005924 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005894:	8a7b      	ldrh	r3, [r7, #18]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d044      	beq.n	8005924 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058a8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695a      	ldr	r2, [r3, #20]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0201 	bic.w	r2, r2, #1
 80058b8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0210 	bic.w	r2, r2, #16
 80058d6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058d8:	8a7b      	ldrh	r3, [r7, #18]
 80058da:	4619      	mov	r1, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f839 	bl	8005954 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80058e2:	e01f      	b.n	8005924 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d008      	beq.n	8005900 <HAL_UART_IRQHandler+0x324>
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f8af 	bl	8005a5c <UART_Transmit_IT>
    return;
 80058fe:	e012      	b.n	8005926 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00d      	beq.n	8005926 <HAL_UART_IRQHandler+0x34a>
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d008      	beq.n	8005926 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f8f0 	bl	8005afa <UART_EndTransmit_IT>
    return;
 800591a:	e004      	b.n	8005926 <HAL_UART_IRQHandler+0x34a>
    return;
 800591c:	bf00      	nop
 800591e:	e002      	b.n	8005926 <HAL_UART_IRQHandler+0x34a>
      return;
 8005920:	bf00      	nop
 8005922:	e000      	b.n	8005926 <HAL_UART_IRQHandler+0x34a>
      return;
 8005924:	bf00      	nop
  }
}
 8005926:	3728      	adds	r7, #40	; 0x28
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	08005a35 	.word	0x08005a35

08005930 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	bc80      	pop	{r7}
 8005940:	4770      	bx	lr

08005942 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	bc80      	pop	{r7}
 8005952:	4770      	bx	lr

08005954 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	bc80      	pop	{r7}
 8005968:	4770      	bx	lr

0800596a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800596a:	b480      	push	{r7}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	4613      	mov	r3, r2
 8005976:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	88fa      	ldrh	r2, [r7, #6]
 8005982:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	88fa      	ldrh	r2, [r7, #6]
 8005988:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2222      	movs	r2, #34	; 0x22
 8005994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059ae:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695a      	ldr	r2, [r3, #20]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0220 	orr.w	r2, r2, #32
 80059ce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr

080059dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	695a      	ldr	r2, [r3, #20]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0201 	bic.w	r2, r2, #1
 8005a02:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d107      	bne.n	8005a1c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0210 	bic.w	r2, r2, #16
 8005a1a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr

08005a34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f7ff ff77 	bl	8005942 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a54:	bf00      	nop
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b21      	cmp	r3, #33	; 0x21
 8005a6e:	d13e      	bne.n	8005aee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a78:	d114      	bne.n	8005aa4 <UART_Transmit_IT+0x48>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d110      	bne.n	8005aa4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	1c9a      	adds	r2, r3, #2
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	621a      	str	r2, [r3, #32]
 8005aa2:	e008      	b.n	8005ab6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	1c59      	adds	r1, r3, #1
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6211      	str	r1, [r2, #32]
 8005aae:	781a      	ldrb	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	3b01      	subs	r3, #1
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10f      	bne.n	8005aea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ad8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ae8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e000      	b.n	8005af0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005aee:	2302      	movs	r3, #2
  }
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc80      	pop	{r7}
 8005af8:	4770      	bx	lr

08005afa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff ff08 	bl	8005930 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b086      	sub	sp, #24
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b22      	cmp	r3, #34	; 0x22
 8005b3c:	f040 8099 	bne.w	8005c72 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b48:	d117      	bne.n	8005b7a <UART_Receive_IT+0x50>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d113      	bne.n	8005b7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	1c9a      	adds	r2, r3, #2
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	629a      	str	r2, [r3, #40]	; 0x28
 8005b78:	e026      	b.n	8005bc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8c:	d007      	beq.n	8005b9e <UART_Receive_IT+0x74>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10a      	bne.n	8005bac <UART_Receive_IT+0x82>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	701a      	strb	r2, [r3, #0]
 8005baa:	e008      	b.n	8005bbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d148      	bne.n	8005c6e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0220 	bic.w	r2, r2, #32
 8005bea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695a      	ldr	r2, [r3, #20]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0201 	bic.w	r2, r2, #1
 8005c0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d123      	bne.n	8005c64 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0210 	bic.w	r2, r2, #16
 8005c30:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0310 	and.w	r3, r3, #16
 8005c3c:	2b10      	cmp	r3, #16
 8005c3e:	d10a      	bne.n	8005c56 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c40:	2300      	movs	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff fe79 	bl	8005954 <HAL_UARTEx_RxEventCallback>
 8005c62:	e002      	b.n	8005c6a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7fb fccf 	bl	8001608 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e002      	b.n	8005c74 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e000      	b.n	8005c74 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005c72:	2302      	movs	r3, #2
  }
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689a      	ldr	r2, [r3, #8]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005cb6:	f023 030c 	bic.w	r3, r3, #12
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6812      	ldr	r2, [r2, #0]
 8005cbe:	68b9      	ldr	r1, [r7, #8]
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a2c      	ldr	r2, [pc, #176]	; (8005d90 <UART_SetConfig+0x114>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d103      	bne.n	8005cec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ce4:	f7fe fa48 	bl	8004178 <HAL_RCC_GetPCLK2Freq>
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	e002      	b.n	8005cf2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005cec:	f7fe fa30 	bl	8004150 <HAL_RCC_GetPCLK1Freq>
 8005cf0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	009a      	lsls	r2, r3, #2
 8005cfc:	441a      	add	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d08:	4a22      	ldr	r2, [pc, #136]	; (8005d94 <UART_SetConfig+0x118>)
 8005d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0e:	095b      	lsrs	r3, r3, #5
 8005d10:	0119      	lsls	r1, r3, #4
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	009a      	lsls	r2, r3, #2
 8005d1c:	441a      	add	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d28:	4b1a      	ldr	r3, [pc, #104]	; (8005d94 <UART_SetConfig+0x118>)
 8005d2a:	fba3 0302 	umull	r0, r3, r3, r2
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	2064      	movs	r0, #100	; 0x64
 8005d32:	fb00 f303 	mul.w	r3, r0, r3
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	3332      	adds	r3, #50	; 0x32
 8005d3c:	4a15      	ldr	r2, [pc, #84]	; (8005d94 <UART_SetConfig+0x118>)
 8005d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d48:	4419      	add	r1, r3
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	009a      	lsls	r2, r3, #2
 8005d54:	441a      	add	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d60:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <UART_SetConfig+0x118>)
 8005d62:	fba3 0302 	umull	r0, r3, r3, r2
 8005d66:	095b      	lsrs	r3, r3, #5
 8005d68:	2064      	movs	r0, #100	; 0x64
 8005d6a:	fb00 f303 	mul.w	r3, r0, r3
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	011b      	lsls	r3, r3, #4
 8005d72:	3332      	adds	r3, #50	; 0x32
 8005d74:	4a07      	ldr	r2, [pc, #28]	; (8005d94 <UART_SetConfig+0x118>)
 8005d76:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	f003 020f 	and.w	r2, r3, #15
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	440a      	add	r2, r1
 8005d86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d88:	bf00      	nop
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40013800 	.word	0x40013800
 8005d94:	51eb851f 	.word	0x51eb851f

08005d98 <__errno>:
 8005d98:	4b01      	ldr	r3, [pc, #4]	; (8005da0 <__errno+0x8>)
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	20000014 	.word	0x20000014

08005da4 <__libc_init_array>:
 8005da4:	b570      	push	{r4, r5, r6, lr}
 8005da6:	2600      	movs	r6, #0
 8005da8:	4d0c      	ldr	r5, [pc, #48]	; (8005ddc <__libc_init_array+0x38>)
 8005daa:	4c0d      	ldr	r4, [pc, #52]	; (8005de0 <__libc_init_array+0x3c>)
 8005dac:	1b64      	subs	r4, r4, r5
 8005dae:	10a4      	asrs	r4, r4, #2
 8005db0:	42a6      	cmp	r6, r4
 8005db2:	d109      	bne.n	8005dc8 <__libc_init_array+0x24>
 8005db4:	f002 f946 	bl	8008044 <_init>
 8005db8:	2600      	movs	r6, #0
 8005dba:	4d0a      	ldr	r5, [pc, #40]	; (8005de4 <__libc_init_array+0x40>)
 8005dbc:	4c0a      	ldr	r4, [pc, #40]	; (8005de8 <__libc_init_array+0x44>)
 8005dbe:	1b64      	subs	r4, r4, r5
 8005dc0:	10a4      	asrs	r4, r4, #2
 8005dc2:	42a6      	cmp	r6, r4
 8005dc4:	d105      	bne.n	8005dd2 <__libc_init_array+0x2e>
 8005dc6:	bd70      	pop	{r4, r5, r6, pc}
 8005dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dcc:	4798      	blx	r3
 8005dce:	3601      	adds	r6, #1
 8005dd0:	e7ee      	b.n	8005db0 <__libc_init_array+0xc>
 8005dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd6:	4798      	blx	r3
 8005dd8:	3601      	adds	r6, #1
 8005dda:	e7f2      	b.n	8005dc2 <__libc_init_array+0x1e>
 8005ddc:	08008310 	.word	0x08008310
 8005de0:	08008310 	.word	0x08008310
 8005de4:	08008310 	.word	0x08008310
 8005de8:	08008314 	.word	0x08008314

08005dec <memset>:
 8005dec:	4603      	mov	r3, r0
 8005dee:	4402      	add	r2, r0
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d100      	bne.n	8005df6 <memset+0xa>
 8005df4:	4770      	bx	lr
 8005df6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dfa:	e7f9      	b.n	8005df0 <memset+0x4>

08005dfc <cos>:
 8005dfc:	b530      	push	{r4, r5, lr}
 8005dfe:	4a20      	ldr	r2, [pc, #128]	; (8005e80 <cos+0x84>)
 8005e00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e04:	4293      	cmp	r3, r2
 8005e06:	b087      	sub	sp, #28
 8005e08:	dc06      	bgt.n	8005e18 <cos+0x1c>
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	b007      	add	sp, #28
 8005e10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e14:	f001 b9a0 	b.w	8007158 <__kernel_cos>
 8005e18:	4a1a      	ldr	r2, [pc, #104]	; (8005e84 <cos+0x88>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	dd05      	ble.n	8005e2a <cos+0x2e>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	f7fa fa05 	bl	8000230 <__aeabi_dsub>
 8005e26:	b007      	add	sp, #28
 8005e28:	bd30      	pop	{r4, r5, pc}
 8005e2a:	aa02      	add	r2, sp, #8
 8005e2c:	f000 feec 	bl	8006c08 <__ieee754_rem_pio2>
 8005e30:	f000 0003 	and.w	r0, r0, #3
 8005e34:	2801      	cmp	r0, #1
 8005e36:	d009      	beq.n	8005e4c <cos+0x50>
 8005e38:	2802      	cmp	r0, #2
 8005e3a:	d011      	beq.n	8005e60 <cos+0x64>
 8005e3c:	b9b8      	cbnz	r0, 8005e6e <cos+0x72>
 8005e3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e46:	f001 f987 	bl	8007158 <__kernel_cos>
 8005e4a:	e7ec      	b.n	8005e26 <cos+0x2a>
 8005e4c:	9000      	str	r0, [sp, #0]
 8005e4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e56:	f001 fd7f 	bl	8007958 <__kernel_sin>
 8005e5a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005e5e:	e7e2      	b.n	8005e26 <cos+0x2a>
 8005e60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e68:	f001 f976 	bl	8007158 <__kernel_cos>
 8005e6c:	e7f5      	b.n	8005e5a <cos+0x5e>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e7a:	f001 fd6d 	bl	8007958 <__kernel_sin>
 8005e7e:	e7d2      	b.n	8005e26 <cos+0x2a>
 8005e80:	3fe921fb 	.word	0x3fe921fb
 8005e84:	7fefffff 	.word	0x7fefffff

08005e88 <sin>:
 8005e88:	b530      	push	{r4, r5, lr}
 8005e8a:	4a20      	ldr	r2, [pc, #128]	; (8005f0c <sin+0x84>)
 8005e8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e90:	4293      	cmp	r3, r2
 8005e92:	b087      	sub	sp, #28
 8005e94:	dc06      	bgt.n	8005ea4 <sin+0x1c>
 8005e96:	2300      	movs	r3, #0
 8005e98:	2200      	movs	r2, #0
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f001 fd5b 	bl	8007958 <__kernel_sin>
 8005ea2:	e006      	b.n	8005eb2 <sin+0x2a>
 8005ea4:	4a1a      	ldr	r2, [pc, #104]	; (8005f10 <sin+0x88>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	dd05      	ble.n	8005eb6 <sin+0x2e>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	f7fa f9bf 	bl	8000230 <__aeabi_dsub>
 8005eb2:	b007      	add	sp, #28
 8005eb4:	bd30      	pop	{r4, r5, pc}
 8005eb6:	aa02      	add	r2, sp, #8
 8005eb8:	f000 fea6 	bl	8006c08 <__ieee754_rem_pio2>
 8005ebc:	f000 0003 	and.w	r0, r0, #3
 8005ec0:	2801      	cmp	r0, #1
 8005ec2:	d009      	beq.n	8005ed8 <sin+0x50>
 8005ec4:	2802      	cmp	r0, #2
 8005ec6:	d00e      	beq.n	8005ee6 <sin+0x5e>
 8005ec8:	b9c0      	cbnz	r0, 8005efc <sin+0x74>
 8005eca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ece:	2301      	movs	r3, #1
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ed6:	e7e2      	b.n	8005e9e <sin+0x16>
 8005ed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ee0:	f001 f93a 	bl	8007158 <__kernel_cos>
 8005ee4:	e7e5      	b.n	8005eb2 <sin+0x2a>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ef2:	f001 fd31 	bl	8007958 <__kernel_sin>
 8005ef6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005efa:	e7da      	b.n	8005eb2 <sin+0x2a>
 8005efc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f04:	f001 f928 	bl	8007158 <__kernel_cos>
 8005f08:	e7f5      	b.n	8005ef6 <sin+0x6e>
 8005f0a:	bf00      	nop
 8005f0c:	3fe921fb 	.word	0x3fe921fb
 8005f10:	7fefffff 	.word	0x7fefffff

08005f14 <atan2>:
 8005f14:	f000 b88c 	b.w	8006030 <__ieee754_atan2>

08005f18 <pow>:
 8005f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f1c:	4614      	mov	r4, r2
 8005f1e:	461d      	mov	r5, r3
 8005f20:	4680      	mov	r8, r0
 8005f22:	4689      	mov	r9, r1
 8005f24:	f000 f958 	bl	80061d8 <__ieee754_pow>
 8005f28:	4622      	mov	r2, r4
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	460f      	mov	r7, r1
 8005f2e:	462b      	mov	r3, r5
 8005f30:	4620      	mov	r0, r4
 8005f32:	4629      	mov	r1, r5
 8005f34:	f7fa fdce 	bl	8000ad4 <__aeabi_dcmpun>
 8005f38:	bbc8      	cbnz	r0, 8005fae <pow+0x96>
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	4640      	mov	r0, r8
 8005f40:	4649      	mov	r1, r9
 8005f42:	f7fa fd95 	bl	8000a70 <__aeabi_dcmpeq>
 8005f46:	b1b8      	cbz	r0, 8005f78 <pow+0x60>
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	4629      	mov	r1, r5
 8005f50:	f7fa fd8e 	bl	8000a70 <__aeabi_dcmpeq>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d141      	bne.n	8005fdc <pow+0xc4>
 8005f58:	4620      	mov	r0, r4
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	f001 ff6d 	bl	8007e3a <finite>
 8005f60:	b328      	cbz	r0, 8005fae <pow+0x96>
 8005f62:	2200      	movs	r2, #0
 8005f64:	2300      	movs	r3, #0
 8005f66:	4620      	mov	r0, r4
 8005f68:	4629      	mov	r1, r5
 8005f6a:	f7fa fd8b 	bl	8000a84 <__aeabi_dcmplt>
 8005f6e:	b1f0      	cbz	r0, 8005fae <pow+0x96>
 8005f70:	f7ff ff12 	bl	8005d98 <__errno>
 8005f74:	2322      	movs	r3, #34	; 0x22
 8005f76:	e019      	b.n	8005fac <pow+0x94>
 8005f78:	4630      	mov	r0, r6
 8005f7a:	4639      	mov	r1, r7
 8005f7c:	f001 ff5d 	bl	8007e3a <finite>
 8005f80:	b9c8      	cbnz	r0, 8005fb6 <pow+0x9e>
 8005f82:	4640      	mov	r0, r8
 8005f84:	4649      	mov	r1, r9
 8005f86:	f001 ff58 	bl	8007e3a <finite>
 8005f8a:	b1a0      	cbz	r0, 8005fb6 <pow+0x9e>
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	4629      	mov	r1, r5
 8005f90:	f001 ff53 	bl	8007e3a <finite>
 8005f94:	b178      	cbz	r0, 8005fb6 <pow+0x9e>
 8005f96:	4632      	mov	r2, r6
 8005f98:	463b      	mov	r3, r7
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	4639      	mov	r1, r7
 8005f9e:	f7fa fd99 	bl	8000ad4 <__aeabi_dcmpun>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d0e4      	beq.n	8005f70 <pow+0x58>
 8005fa6:	f7ff fef7 	bl	8005d98 <__errno>
 8005faa:	2321      	movs	r3, #33	; 0x21
 8005fac:	6003      	str	r3, [r0, #0]
 8005fae:	4630      	mov	r0, r6
 8005fb0:	4639      	mov	r1, r7
 8005fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2300      	movs	r3, #0
 8005fba:	4630      	mov	r0, r6
 8005fbc:	4639      	mov	r1, r7
 8005fbe:	f7fa fd57 	bl	8000a70 <__aeabi_dcmpeq>
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	d0f3      	beq.n	8005fae <pow+0x96>
 8005fc6:	4640      	mov	r0, r8
 8005fc8:	4649      	mov	r1, r9
 8005fca:	f001 ff36 	bl	8007e3a <finite>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d0ed      	beq.n	8005fae <pow+0x96>
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	f001 ff30 	bl	8007e3a <finite>
 8005fda:	e7c8      	b.n	8005f6e <pow+0x56>
 8005fdc:	2600      	movs	r6, #0
 8005fde:	4f01      	ldr	r7, [pc, #4]	; (8005fe4 <pow+0xcc>)
 8005fe0:	e7e5      	b.n	8005fae <pow+0x96>
 8005fe2:	bf00      	nop
 8005fe4:	3ff00000 	.word	0x3ff00000

08005fe8 <sqrt>:
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fea:	4606      	mov	r6, r0
 8005fec:	460f      	mov	r7, r1
 8005fee:	f001 f803 	bl	8006ff8 <__ieee754_sqrt>
 8005ff2:	4632      	mov	r2, r6
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	460d      	mov	r5, r1
 8005ff8:	463b      	mov	r3, r7
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	4639      	mov	r1, r7
 8005ffe:	f7fa fd69 	bl	8000ad4 <__aeabi_dcmpun>
 8006002:	b990      	cbnz	r0, 800602a <sqrt+0x42>
 8006004:	2200      	movs	r2, #0
 8006006:	2300      	movs	r3, #0
 8006008:	4630      	mov	r0, r6
 800600a:	4639      	mov	r1, r7
 800600c:	f7fa fd3a 	bl	8000a84 <__aeabi_dcmplt>
 8006010:	b158      	cbz	r0, 800602a <sqrt+0x42>
 8006012:	f7ff fec1 	bl	8005d98 <__errno>
 8006016:	2321      	movs	r3, #33	; 0x21
 8006018:	2200      	movs	r2, #0
 800601a:	6003      	str	r3, [r0, #0]
 800601c:	2300      	movs	r3, #0
 800601e:	4610      	mov	r0, r2
 8006020:	4619      	mov	r1, r3
 8006022:	f7fa fbe7 	bl	80007f4 <__aeabi_ddiv>
 8006026:	4604      	mov	r4, r0
 8006028:	460d      	mov	r5, r1
 800602a:	4620      	mov	r0, r4
 800602c:	4629      	mov	r1, r5
 800602e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006030 <__ieee754_atan2>:
 8006030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006034:	4692      	mov	sl, r2
 8006036:	4699      	mov	r9, r3
 8006038:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800603c:	461f      	mov	r7, r3
 800603e:	f1ca 0300 	rsb	r3, sl, #0
 8006042:	f8df e184 	ldr.w	lr, [pc, #388]	; 80061c8 <__ieee754_atan2+0x198>
 8006046:	ea43 030a 	orr.w	r3, r3, sl
 800604a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800604e:	4573      	cmp	r3, lr
 8006050:	4604      	mov	r4, r0
 8006052:	460d      	mov	r5, r1
 8006054:	d808      	bhi.n	8006068 <__ieee754_atan2+0x38>
 8006056:	4246      	negs	r6, r0
 8006058:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800605c:	4306      	orrs	r6, r0
 800605e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8006062:	4576      	cmp	r6, lr
 8006064:	468c      	mov	ip, r1
 8006066:	d908      	bls.n	800607a <__ieee754_atan2+0x4a>
 8006068:	4652      	mov	r2, sl
 800606a:	464b      	mov	r3, r9
 800606c:	4620      	mov	r0, r4
 800606e:	4629      	mov	r1, r5
 8006070:	f7fa f8e0 	bl	8000234 <__adddf3>
 8006074:	4604      	mov	r4, r0
 8006076:	460d      	mov	r5, r1
 8006078:	e019      	b.n	80060ae <__ieee754_atan2+0x7e>
 800607a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800607e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006082:	ea56 060a 	orrs.w	r6, r6, sl
 8006086:	d103      	bne.n	8006090 <__ieee754_atan2+0x60>
 8006088:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608c:	f001 bd48 	b.w	8007b20 <atan>
 8006090:	17be      	asrs	r6, r7, #30
 8006092:	f006 0602 	and.w	r6, r6, #2
 8006096:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800609a:	ea53 0100 	orrs.w	r1, r3, r0
 800609e:	d10a      	bne.n	80060b6 <__ieee754_atan2+0x86>
 80060a0:	2e02      	cmp	r6, #2
 80060a2:	d067      	beq.n	8006174 <__ieee754_atan2+0x144>
 80060a4:	2e03      	cmp	r6, #3
 80060a6:	d102      	bne.n	80060ae <__ieee754_atan2+0x7e>
 80060a8:	a53b      	add	r5, pc, #236	; (adr r5, 8006198 <__ieee754_atan2+0x168>)
 80060aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80060ae:	4620      	mov	r0, r4
 80060b0:	4629      	mov	r1, r5
 80060b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b6:	ea52 010a 	orrs.w	r1, r2, sl
 80060ba:	d106      	bne.n	80060ca <__ieee754_atan2+0x9a>
 80060bc:	f1bc 0f00 	cmp.w	ip, #0
 80060c0:	da63      	bge.n	800618a <__ieee754_atan2+0x15a>
 80060c2:	a537      	add	r5, pc, #220	; (adr r5, 80061a0 <__ieee754_atan2+0x170>)
 80060c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80060c8:	e7f1      	b.n	80060ae <__ieee754_atan2+0x7e>
 80060ca:	4572      	cmp	r2, lr
 80060cc:	d10f      	bne.n	80060ee <__ieee754_atan2+0xbe>
 80060ce:	4293      	cmp	r3, r2
 80060d0:	f106 36ff 	add.w	r6, r6, #4294967295
 80060d4:	d107      	bne.n	80060e6 <__ieee754_atan2+0xb6>
 80060d6:	2e02      	cmp	r6, #2
 80060d8:	d850      	bhi.n	800617c <__ieee754_atan2+0x14c>
 80060da:	4b3c      	ldr	r3, [pc, #240]	; (80061cc <__ieee754_atan2+0x19c>)
 80060dc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80060e0:	e9d6 4500 	ldrd	r4, r5, [r6]
 80060e4:	e7e3      	b.n	80060ae <__ieee754_atan2+0x7e>
 80060e6:	2e02      	cmp	r6, #2
 80060e8:	d84c      	bhi.n	8006184 <__ieee754_atan2+0x154>
 80060ea:	4b39      	ldr	r3, [pc, #228]	; (80061d0 <__ieee754_atan2+0x1a0>)
 80060ec:	e7f6      	b.n	80060dc <__ieee754_atan2+0xac>
 80060ee:	4573      	cmp	r3, lr
 80060f0:	d0e4      	beq.n	80060bc <__ieee754_atan2+0x8c>
 80060f2:	1a9b      	subs	r3, r3, r2
 80060f4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80060f8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80060fc:	da20      	bge.n	8006140 <__ieee754_atan2+0x110>
 80060fe:	2f00      	cmp	r7, #0
 8006100:	da01      	bge.n	8006106 <__ieee754_atan2+0xd6>
 8006102:	323c      	adds	r2, #60	; 0x3c
 8006104:	db20      	blt.n	8006148 <__ieee754_atan2+0x118>
 8006106:	4652      	mov	r2, sl
 8006108:	464b      	mov	r3, r9
 800610a:	4620      	mov	r0, r4
 800610c:	4629      	mov	r1, r5
 800610e:	f7fa fb71 	bl	80007f4 <__aeabi_ddiv>
 8006112:	f001 fe8f 	bl	8007e34 <fabs>
 8006116:	f001 fd03 	bl	8007b20 <atan>
 800611a:	4604      	mov	r4, r0
 800611c:	460d      	mov	r5, r1
 800611e:	2e01      	cmp	r6, #1
 8006120:	d015      	beq.n	800614e <__ieee754_atan2+0x11e>
 8006122:	2e02      	cmp	r6, #2
 8006124:	d017      	beq.n	8006156 <__ieee754_atan2+0x126>
 8006126:	2e00      	cmp	r6, #0
 8006128:	d0c1      	beq.n	80060ae <__ieee754_atan2+0x7e>
 800612a:	a31f      	add	r3, pc, #124	; (adr r3, 80061a8 <__ieee754_atan2+0x178>)
 800612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006130:	4620      	mov	r0, r4
 8006132:	4629      	mov	r1, r5
 8006134:	f7fa f87c 	bl	8000230 <__aeabi_dsub>
 8006138:	a31d      	add	r3, pc, #116	; (adr r3, 80061b0 <__ieee754_atan2+0x180>)
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	e016      	b.n	800616e <__ieee754_atan2+0x13e>
 8006140:	a51d      	add	r5, pc, #116	; (adr r5, 80061b8 <__ieee754_atan2+0x188>)
 8006142:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006146:	e7ea      	b.n	800611e <__ieee754_atan2+0xee>
 8006148:	2400      	movs	r4, #0
 800614a:	2500      	movs	r5, #0
 800614c:	e7e7      	b.n	800611e <__ieee754_atan2+0xee>
 800614e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006152:	461d      	mov	r5, r3
 8006154:	e7ab      	b.n	80060ae <__ieee754_atan2+0x7e>
 8006156:	a314      	add	r3, pc, #80	; (adr r3, 80061a8 <__ieee754_atan2+0x178>)
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	4620      	mov	r0, r4
 800615e:	4629      	mov	r1, r5
 8006160:	f7fa f866 	bl	8000230 <__aeabi_dsub>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	a111      	add	r1, pc, #68	; (adr r1, 80061b0 <__ieee754_atan2+0x180>)
 800616a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800616e:	f7fa f85f 	bl	8000230 <__aeabi_dsub>
 8006172:	e77f      	b.n	8006074 <__ieee754_atan2+0x44>
 8006174:	a50e      	add	r5, pc, #56	; (adr r5, 80061b0 <__ieee754_atan2+0x180>)
 8006176:	e9d5 4500 	ldrd	r4, r5, [r5]
 800617a:	e798      	b.n	80060ae <__ieee754_atan2+0x7e>
 800617c:	a510      	add	r5, pc, #64	; (adr r5, 80061c0 <__ieee754_atan2+0x190>)
 800617e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006182:	e794      	b.n	80060ae <__ieee754_atan2+0x7e>
 8006184:	2400      	movs	r4, #0
 8006186:	2500      	movs	r5, #0
 8006188:	e791      	b.n	80060ae <__ieee754_atan2+0x7e>
 800618a:	a50b      	add	r5, pc, #44	; (adr r5, 80061b8 <__ieee754_atan2+0x188>)
 800618c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006190:	e78d      	b.n	80060ae <__ieee754_atan2+0x7e>
 8006192:	bf00      	nop
 8006194:	f3af 8000 	nop.w
 8006198:	54442d18 	.word	0x54442d18
 800619c:	c00921fb 	.word	0xc00921fb
 80061a0:	54442d18 	.word	0x54442d18
 80061a4:	bff921fb 	.word	0xbff921fb
 80061a8:	33145c07 	.word	0x33145c07
 80061ac:	3ca1a626 	.word	0x3ca1a626
 80061b0:	54442d18 	.word	0x54442d18
 80061b4:	400921fb 	.word	0x400921fb
 80061b8:	54442d18 	.word	0x54442d18
 80061bc:	3ff921fb 	.word	0x3ff921fb
 80061c0:	54442d18 	.word	0x54442d18
 80061c4:	3fe921fb 	.word	0x3fe921fb
 80061c8:	7ff00000 	.word	0x7ff00000
 80061cc:	08008098 	.word	0x08008098
 80061d0:	080080b0 	.word	0x080080b0
 80061d4:	00000000 	.word	0x00000000

080061d8 <__ieee754_pow>:
 80061d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061dc:	b093      	sub	sp, #76	; 0x4c
 80061de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061e2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80061e6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80061ea:	4689      	mov	r9, r1
 80061ec:	ea56 0102 	orrs.w	r1, r6, r2
 80061f0:	4680      	mov	r8, r0
 80061f2:	d111      	bne.n	8006218 <__ieee754_pow+0x40>
 80061f4:	1803      	adds	r3, r0, r0
 80061f6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80061fa:	4152      	adcs	r2, r2
 80061fc:	4299      	cmp	r1, r3
 80061fe:	4b82      	ldr	r3, [pc, #520]	; (8006408 <__ieee754_pow+0x230>)
 8006200:	4193      	sbcs	r3, r2
 8006202:	f080 84b9 	bcs.w	8006b78 <__ieee754_pow+0x9a0>
 8006206:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800620a:	4640      	mov	r0, r8
 800620c:	4649      	mov	r1, r9
 800620e:	f7fa f811 	bl	8000234 <__adddf3>
 8006212:	4683      	mov	fp, r0
 8006214:	468c      	mov	ip, r1
 8006216:	e06f      	b.n	80062f8 <__ieee754_pow+0x120>
 8006218:	4b7c      	ldr	r3, [pc, #496]	; (800640c <__ieee754_pow+0x234>)
 800621a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800621e:	429c      	cmp	r4, r3
 8006220:	464d      	mov	r5, r9
 8006222:	4682      	mov	sl, r0
 8006224:	dc06      	bgt.n	8006234 <__ieee754_pow+0x5c>
 8006226:	d101      	bne.n	800622c <__ieee754_pow+0x54>
 8006228:	2800      	cmp	r0, #0
 800622a:	d1ec      	bne.n	8006206 <__ieee754_pow+0x2e>
 800622c:	429e      	cmp	r6, r3
 800622e:	dc01      	bgt.n	8006234 <__ieee754_pow+0x5c>
 8006230:	d10f      	bne.n	8006252 <__ieee754_pow+0x7a>
 8006232:	b172      	cbz	r2, 8006252 <__ieee754_pow+0x7a>
 8006234:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006238:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800623c:	ea55 050a 	orrs.w	r5, r5, sl
 8006240:	d1e1      	bne.n	8006206 <__ieee754_pow+0x2e>
 8006242:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006246:	18db      	adds	r3, r3, r3
 8006248:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800624c:	4152      	adcs	r2, r2
 800624e:	429d      	cmp	r5, r3
 8006250:	e7d5      	b.n	80061fe <__ieee754_pow+0x26>
 8006252:	2d00      	cmp	r5, #0
 8006254:	da39      	bge.n	80062ca <__ieee754_pow+0xf2>
 8006256:	4b6e      	ldr	r3, [pc, #440]	; (8006410 <__ieee754_pow+0x238>)
 8006258:	429e      	cmp	r6, r3
 800625a:	dc52      	bgt.n	8006302 <__ieee754_pow+0x12a>
 800625c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006260:	429e      	cmp	r6, r3
 8006262:	f340 849c 	ble.w	8006b9e <__ieee754_pow+0x9c6>
 8006266:	1533      	asrs	r3, r6, #20
 8006268:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800626c:	2b14      	cmp	r3, #20
 800626e:	dd0f      	ble.n	8006290 <__ieee754_pow+0xb8>
 8006270:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006274:	fa22 f103 	lsr.w	r1, r2, r3
 8006278:	fa01 f303 	lsl.w	r3, r1, r3
 800627c:	4293      	cmp	r3, r2
 800627e:	f040 848e 	bne.w	8006b9e <__ieee754_pow+0x9c6>
 8006282:	f001 0101 	and.w	r1, r1, #1
 8006286:	f1c1 0302 	rsb	r3, r1, #2
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	b182      	cbz	r2, 80062b0 <__ieee754_pow+0xd8>
 800628e:	e05d      	b.n	800634c <__ieee754_pow+0x174>
 8006290:	2a00      	cmp	r2, #0
 8006292:	d159      	bne.n	8006348 <__ieee754_pow+0x170>
 8006294:	f1c3 0314 	rsb	r3, r3, #20
 8006298:	fa46 f103 	asr.w	r1, r6, r3
 800629c:	fa01 f303 	lsl.w	r3, r1, r3
 80062a0:	42b3      	cmp	r3, r6
 80062a2:	f040 8479 	bne.w	8006b98 <__ieee754_pow+0x9c0>
 80062a6:	f001 0101 	and.w	r1, r1, #1
 80062aa:	f1c1 0302 	rsb	r3, r1, #2
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	4b58      	ldr	r3, [pc, #352]	; (8006414 <__ieee754_pow+0x23c>)
 80062b2:	429e      	cmp	r6, r3
 80062b4:	d132      	bne.n	800631c <__ieee754_pow+0x144>
 80062b6:	2f00      	cmp	r7, #0
 80062b8:	f280 846a 	bge.w	8006b90 <__ieee754_pow+0x9b8>
 80062bc:	4642      	mov	r2, r8
 80062be:	464b      	mov	r3, r9
 80062c0:	2000      	movs	r0, #0
 80062c2:	4954      	ldr	r1, [pc, #336]	; (8006414 <__ieee754_pow+0x23c>)
 80062c4:	f7fa fa96 	bl	80007f4 <__aeabi_ddiv>
 80062c8:	e7a3      	b.n	8006212 <__ieee754_pow+0x3a>
 80062ca:	2300      	movs	r3, #0
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	2a00      	cmp	r2, #0
 80062d0:	d13c      	bne.n	800634c <__ieee754_pow+0x174>
 80062d2:	4b4e      	ldr	r3, [pc, #312]	; (800640c <__ieee754_pow+0x234>)
 80062d4:	429e      	cmp	r6, r3
 80062d6:	d1eb      	bne.n	80062b0 <__ieee754_pow+0xd8>
 80062d8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80062dc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80062e0:	ea53 030a 	orrs.w	r3, r3, sl
 80062e4:	f000 8448 	beq.w	8006b78 <__ieee754_pow+0x9a0>
 80062e8:	4b4b      	ldr	r3, [pc, #300]	; (8006418 <__ieee754_pow+0x240>)
 80062ea:	429c      	cmp	r4, r3
 80062ec:	dd0b      	ble.n	8006306 <__ieee754_pow+0x12e>
 80062ee:	2f00      	cmp	r7, #0
 80062f0:	f2c0 8448 	blt.w	8006b84 <__ieee754_pow+0x9ac>
 80062f4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80062f8:	4658      	mov	r0, fp
 80062fa:	4661      	mov	r1, ip
 80062fc:	b013      	add	sp, #76	; 0x4c
 80062fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006302:	2302      	movs	r3, #2
 8006304:	e7e2      	b.n	80062cc <__ieee754_pow+0xf4>
 8006306:	2f00      	cmp	r7, #0
 8006308:	f04f 0b00 	mov.w	fp, #0
 800630c:	f04f 0c00 	mov.w	ip, #0
 8006310:	daf2      	bge.n	80062f8 <__ieee754_pow+0x120>
 8006312:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006316:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800631a:	e7ed      	b.n	80062f8 <__ieee754_pow+0x120>
 800631c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006320:	d106      	bne.n	8006330 <__ieee754_pow+0x158>
 8006322:	4642      	mov	r2, r8
 8006324:	464b      	mov	r3, r9
 8006326:	4640      	mov	r0, r8
 8006328:	4649      	mov	r1, r9
 800632a:	f7fa f939 	bl	80005a0 <__aeabi_dmul>
 800632e:	e770      	b.n	8006212 <__ieee754_pow+0x3a>
 8006330:	4b3a      	ldr	r3, [pc, #232]	; (800641c <__ieee754_pow+0x244>)
 8006332:	429f      	cmp	r7, r3
 8006334:	d10a      	bne.n	800634c <__ieee754_pow+0x174>
 8006336:	2d00      	cmp	r5, #0
 8006338:	db08      	blt.n	800634c <__ieee754_pow+0x174>
 800633a:	4640      	mov	r0, r8
 800633c:	4649      	mov	r1, r9
 800633e:	b013      	add	sp, #76	; 0x4c
 8006340:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006344:	f000 be58 	b.w	8006ff8 <__ieee754_sqrt>
 8006348:	2300      	movs	r3, #0
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	4640      	mov	r0, r8
 800634e:	4649      	mov	r1, r9
 8006350:	f001 fd70 	bl	8007e34 <fabs>
 8006354:	4683      	mov	fp, r0
 8006356:	468c      	mov	ip, r1
 8006358:	f1ba 0f00 	cmp.w	sl, #0
 800635c:	d128      	bne.n	80063b0 <__ieee754_pow+0x1d8>
 800635e:	b124      	cbz	r4, 800636a <__ieee754_pow+0x192>
 8006360:	4b2c      	ldr	r3, [pc, #176]	; (8006414 <__ieee754_pow+0x23c>)
 8006362:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006366:	429a      	cmp	r2, r3
 8006368:	d122      	bne.n	80063b0 <__ieee754_pow+0x1d8>
 800636a:	2f00      	cmp	r7, #0
 800636c:	da07      	bge.n	800637e <__ieee754_pow+0x1a6>
 800636e:	465a      	mov	r2, fp
 8006370:	4663      	mov	r3, ip
 8006372:	2000      	movs	r0, #0
 8006374:	4927      	ldr	r1, [pc, #156]	; (8006414 <__ieee754_pow+0x23c>)
 8006376:	f7fa fa3d 	bl	80007f4 <__aeabi_ddiv>
 800637a:	4683      	mov	fp, r0
 800637c:	468c      	mov	ip, r1
 800637e:	2d00      	cmp	r5, #0
 8006380:	daba      	bge.n	80062f8 <__ieee754_pow+0x120>
 8006382:	9b00      	ldr	r3, [sp, #0]
 8006384:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006388:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800638c:	4323      	orrs	r3, r4
 800638e:	d108      	bne.n	80063a2 <__ieee754_pow+0x1ca>
 8006390:	465a      	mov	r2, fp
 8006392:	4663      	mov	r3, ip
 8006394:	4658      	mov	r0, fp
 8006396:	4661      	mov	r1, ip
 8006398:	f7f9 ff4a 	bl	8000230 <__aeabi_dsub>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	e790      	b.n	80062c4 <__ieee754_pow+0xec>
 80063a2:	9b00      	ldr	r3, [sp, #0]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d1a7      	bne.n	80062f8 <__ieee754_pow+0x120>
 80063a8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80063ac:	469c      	mov	ip, r3
 80063ae:	e7a3      	b.n	80062f8 <__ieee754_pow+0x120>
 80063b0:	0feb      	lsrs	r3, r5, #31
 80063b2:	3b01      	subs	r3, #1
 80063b4:	930c      	str	r3, [sp, #48]	; 0x30
 80063b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063b8:	9b00      	ldr	r3, [sp, #0]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	d104      	bne.n	80063c8 <__ieee754_pow+0x1f0>
 80063be:	4642      	mov	r2, r8
 80063c0:	464b      	mov	r3, r9
 80063c2:	4640      	mov	r0, r8
 80063c4:	4649      	mov	r1, r9
 80063c6:	e7e7      	b.n	8006398 <__ieee754_pow+0x1c0>
 80063c8:	4b15      	ldr	r3, [pc, #84]	; (8006420 <__ieee754_pow+0x248>)
 80063ca:	429e      	cmp	r6, r3
 80063cc:	f340 80f6 	ble.w	80065bc <__ieee754_pow+0x3e4>
 80063d0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80063d4:	429e      	cmp	r6, r3
 80063d6:	4b10      	ldr	r3, [pc, #64]	; (8006418 <__ieee754_pow+0x240>)
 80063d8:	dd09      	ble.n	80063ee <__ieee754_pow+0x216>
 80063da:	429c      	cmp	r4, r3
 80063dc:	dc0c      	bgt.n	80063f8 <__ieee754_pow+0x220>
 80063de:	2f00      	cmp	r7, #0
 80063e0:	da0c      	bge.n	80063fc <__ieee754_pow+0x224>
 80063e2:	2000      	movs	r0, #0
 80063e4:	b013      	add	sp, #76	; 0x4c
 80063e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ea:	f001 bb92 	b.w	8007b12 <__math_oflow>
 80063ee:	429c      	cmp	r4, r3
 80063f0:	dbf5      	blt.n	80063de <__ieee754_pow+0x206>
 80063f2:	4b08      	ldr	r3, [pc, #32]	; (8006414 <__ieee754_pow+0x23c>)
 80063f4:	429c      	cmp	r4, r3
 80063f6:	dd15      	ble.n	8006424 <__ieee754_pow+0x24c>
 80063f8:	2f00      	cmp	r7, #0
 80063fa:	dcf2      	bgt.n	80063e2 <__ieee754_pow+0x20a>
 80063fc:	2000      	movs	r0, #0
 80063fe:	b013      	add	sp, #76	; 0x4c
 8006400:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006404:	f001 bb80 	b.w	8007b08 <__math_uflow>
 8006408:	fff00000 	.word	0xfff00000
 800640c:	7ff00000 	.word	0x7ff00000
 8006410:	433fffff 	.word	0x433fffff
 8006414:	3ff00000 	.word	0x3ff00000
 8006418:	3fefffff 	.word	0x3fefffff
 800641c:	3fe00000 	.word	0x3fe00000
 8006420:	41e00000 	.word	0x41e00000
 8006424:	4661      	mov	r1, ip
 8006426:	2200      	movs	r2, #0
 8006428:	4658      	mov	r0, fp
 800642a:	4b5f      	ldr	r3, [pc, #380]	; (80065a8 <__ieee754_pow+0x3d0>)
 800642c:	f7f9 ff00 	bl	8000230 <__aeabi_dsub>
 8006430:	a355      	add	r3, pc, #340	; (adr r3, 8006588 <__ieee754_pow+0x3b0>)
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	4604      	mov	r4, r0
 8006438:	460d      	mov	r5, r1
 800643a:	f7fa f8b1 	bl	80005a0 <__aeabi_dmul>
 800643e:	a354      	add	r3, pc, #336	; (adr r3, 8006590 <__ieee754_pow+0x3b8>)
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	4606      	mov	r6, r0
 8006446:	460f      	mov	r7, r1
 8006448:	4620      	mov	r0, r4
 800644a:	4629      	mov	r1, r5
 800644c:	f7fa f8a8 	bl	80005a0 <__aeabi_dmul>
 8006450:	2200      	movs	r2, #0
 8006452:	4682      	mov	sl, r0
 8006454:	468b      	mov	fp, r1
 8006456:	4620      	mov	r0, r4
 8006458:	4629      	mov	r1, r5
 800645a:	4b54      	ldr	r3, [pc, #336]	; (80065ac <__ieee754_pow+0x3d4>)
 800645c:	f7fa f8a0 	bl	80005a0 <__aeabi_dmul>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	a14c      	add	r1, pc, #304	; (adr r1, 8006598 <__ieee754_pow+0x3c0>)
 8006466:	e9d1 0100 	ldrd	r0, r1, [r1]
 800646a:	f7f9 fee1 	bl	8000230 <__aeabi_dsub>
 800646e:	4622      	mov	r2, r4
 8006470:	462b      	mov	r3, r5
 8006472:	f7fa f895 	bl	80005a0 <__aeabi_dmul>
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	2000      	movs	r0, #0
 800647c:	494c      	ldr	r1, [pc, #304]	; (80065b0 <__ieee754_pow+0x3d8>)
 800647e:	f7f9 fed7 	bl	8000230 <__aeabi_dsub>
 8006482:	4622      	mov	r2, r4
 8006484:	462b      	mov	r3, r5
 8006486:	4680      	mov	r8, r0
 8006488:	4689      	mov	r9, r1
 800648a:	4620      	mov	r0, r4
 800648c:	4629      	mov	r1, r5
 800648e:	f7fa f887 	bl	80005a0 <__aeabi_dmul>
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	4640      	mov	r0, r8
 8006498:	4649      	mov	r1, r9
 800649a:	f7fa f881 	bl	80005a0 <__aeabi_dmul>
 800649e:	a340      	add	r3, pc, #256	; (adr r3, 80065a0 <__ieee754_pow+0x3c8>)
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f7fa f87c 	bl	80005a0 <__aeabi_dmul>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4650      	mov	r0, sl
 80064ae:	4659      	mov	r1, fp
 80064b0:	f7f9 febe 	bl	8000230 <__aeabi_dsub>
 80064b4:	f04f 0a00 	mov.w	sl, #0
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	4604      	mov	r4, r0
 80064be:	460d      	mov	r5, r1
 80064c0:	4630      	mov	r0, r6
 80064c2:	4639      	mov	r1, r7
 80064c4:	f7f9 feb6 	bl	8000234 <__adddf3>
 80064c8:	4632      	mov	r2, r6
 80064ca:	463b      	mov	r3, r7
 80064cc:	4650      	mov	r0, sl
 80064ce:	468b      	mov	fp, r1
 80064d0:	f7f9 feae 	bl	8000230 <__aeabi_dsub>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	4620      	mov	r0, r4
 80064da:	4629      	mov	r1, r5
 80064dc:	f7f9 fea8 	bl	8000230 <__aeabi_dsub>
 80064e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80064e4:	9b00      	ldr	r3, [sp, #0]
 80064e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064e8:	3b01      	subs	r3, #1
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f04f 0600 	mov.w	r6, #0
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	bf0c      	ite	eq
 80064f6:	4b2f      	ldreq	r3, [pc, #188]	; (80065b4 <__ieee754_pow+0x3dc>)
 80064f8:	4b2b      	ldrne	r3, [pc, #172]	; (80065a8 <__ieee754_pow+0x3d0>)
 80064fa:	4604      	mov	r4, r0
 80064fc:	460d      	mov	r5, r1
 80064fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006502:	e9cd 2300 	strd	r2, r3, [sp]
 8006506:	4632      	mov	r2, r6
 8006508:	463b      	mov	r3, r7
 800650a:	f7f9 fe91 	bl	8000230 <__aeabi_dsub>
 800650e:	4652      	mov	r2, sl
 8006510:	465b      	mov	r3, fp
 8006512:	f7fa f845 	bl	80005a0 <__aeabi_dmul>
 8006516:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800651a:	4680      	mov	r8, r0
 800651c:	4689      	mov	r9, r1
 800651e:	4620      	mov	r0, r4
 8006520:	4629      	mov	r1, r5
 8006522:	f7fa f83d 	bl	80005a0 <__aeabi_dmul>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	4640      	mov	r0, r8
 800652c:	4649      	mov	r1, r9
 800652e:	f7f9 fe81 	bl	8000234 <__adddf3>
 8006532:	4632      	mov	r2, r6
 8006534:	463b      	mov	r3, r7
 8006536:	4680      	mov	r8, r0
 8006538:	4689      	mov	r9, r1
 800653a:	4650      	mov	r0, sl
 800653c:	4659      	mov	r1, fp
 800653e:	f7fa f82f 	bl	80005a0 <__aeabi_dmul>
 8006542:	4604      	mov	r4, r0
 8006544:	460d      	mov	r5, r1
 8006546:	460b      	mov	r3, r1
 8006548:	4602      	mov	r2, r0
 800654a:	4649      	mov	r1, r9
 800654c:	4640      	mov	r0, r8
 800654e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006552:	f7f9 fe6f 	bl	8000234 <__adddf3>
 8006556:	4b18      	ldr	r3, [pc, #96]	; (80065b8 <__ieee754_pow+0x3e0>)
 8006558:	4682      	mov	sl, r0
 800655a:	4299      	cmp	r1, r3
 800655c:	460f      	mov	r7, r1
 800655e:	460e      	mov	r6, r1
 8006560:	f340 82e5 	ble.w	8006b2e <__ieee754_pow+0x956>
 8006564:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006568:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800656c:	4303      	orrs	r3, r0
 800656e:	f000 81df 	beq.w	8006930 <__ieee754_pow+0x758>
 8006572:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006576:	2200      	movs	r2, #0
 8006578:	2300      	movs	r3, #0
 800657a:	f7fa fa83 	bl	8000a84 <__aeabi_dcmplt>
 800657e:	3800      	subs	r0, #0
 8006580:	bf18      	it	ne
 8006582:	2001      	movne	r0, #1
 8006584:	e72e      	b.n	80063e4 <__ieee754_pow+0x20c>
 8006586:	bf00      	nop
 8006588:	60000000 	.word	0x60000000
 800658c:	3ff71547 	.word	0x3ff71547
 8006590:	f85ddf44 	.word	0xf85ddf44
 8006594:	3e54ae0b 	.word	0x3e54ae0b
 8006598:	55555555 	.word	0x55555555
 800659c:	3fd55555 	.word	0x3fd55555
 80065a0:	652b82fe 	.word	0x652b82fe
 80065a4:	3ff71547 	.word	0x3ff71547
 80065a8:	3ff00000 	.word	0x3ff00000
 80065ac:	3fd00000 	.word	0x3fd00000
 80065b0:	3fe00000 	.word	0x3fe00000
 80065b4:	bff00000 	.word	0xbff00000
 80065b8:	408fffff 	.word	0x408fffff
 80065bc:	4bd2      	ldr	r3, [pc, #840]	; (8006908 <__ieee754_pow+0x730>)
 80065be:	2200      	movs	r2, #0
 80065c0:	402b      	ands	r3, r5
 80065c2:	b943      	cbnz	r3, 80065d6 <__ieee754_pow+0x3fe>
 80065c4:	4658      	mov	r0, fp
 80065c6:	4661      	mov	r1, ip
 80065c8:	4bd0      	ldr	r3, [pc, #832]	; (800690c <__ieee754_pow+0x734>)
 80065ca:	f7f9 ffe9 	bl	80005a0 <__aeabi_dmul>
 80065ce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80065d2:	4683      	mov	fp, r0
 80065d4:	460c      	mov	r4, r1
 80065d6:	1523      	asrs	r3, r4, #20
 80065d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80065dc:	4413      	add	r3, r2
 80065de:	930b      	str	r3, [sp, #44]	; 0x2c
 80065e0:	4bcb      	ldr	r3, [pc, #812]	; (8006910 <__ieee754_pow+0x738>)
 80065e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80065e6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80065ea:	429c      	cmp	r4, r3
 80065ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80065f0:	dd08      	ble.n	8006604 <__ieee754_pow+0x42c>
 80065f2:	4bc8      	ldr	r3, [pc, #800]	; (8006914 <__ieee754_pow+0x73c>)
 80065f4:	429c      	cmp	r4, r3
 80065f6:	f340 8199 	ble.w	800692c <__ieee754_pow+0x754>
 80065fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065fc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006600:	3301      	adds	r3, #1
 8006602:	930b      	str	r3, [sp, #44]	; 0x2c
 8006604:	2600      	movs	r6, #0
 8006606:	00f3      	lsls	r3, r6, #3
 8006608:	930d      	str	r3, [sp, #52]	; 0x34
 800660a:	4bc3      	ldr	r3, [pc, #780]	; (8006918 <__ieee754_pow+0x740>)
 800660c:	4658      	mov	r0, fp
 800660e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006612:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006616:	4629      	mov	r1, r5
 8006618:	461a      	mov	r2, r3
 800661a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800661e:	4623      	mov	r3, r4
 8006620:	f7f9 fe06 	bl	8000230 <__aeabi_dsub>
 8006624:	46da      	mov	sl, fp
 8006626:	462b      	mov	r3, r5
 8006628:	4652      	mov	r2, sl
 800662a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800662e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006632:	f7f9 fdff 	bl	8000234 <__adddf3>
 8006636:	4602      	mov	r2, r0
 8006638:	460b      	mov	r3, r1
 800663a:	2000      	movs	r0, #0
 800663c:	49b7      	ldr	r1, [pc, #732]	; (800691c <__ieee754_pow+0x744>)
 800663e:	f7fa f8d9 	bl	80007f4 <__aeabi_ddiv>
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800664a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800664e:	f7f9 ffa7 	bl	80005a0 <__aeabi_dmul>
 8006652:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006656:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800665a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800665e:	2300      	movs	r3, #0
 8006660:	2200      	movs	r2, #0
 8006662:	46ab      	mov	fp, r5
 8006664:	106d      	asrs	r5, r5, #1
 8006666:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800666a:	9304      	str	r3, [sp, #16]
 800666c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006670:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006674:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006678:	4640      	mov	r0, r8
 800667a:	4649      	mov	r1, r9
 800667c:	4614      	mov	r4, r2
 800667e:	461d      	mov	r5, r3
 8006680:	f7f9 ff8e 	bl	80005a0 <__aeabi_dmul>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800668c:	f7f9 fdd0 	bl	8000230 <__aeabi_dsub>
 8006690:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006694:	4606      	mov	r6, r0
 8006696:	460f      	mov	r7, r1
 8006698:	4620      	mov	r0, r4
 800669a:	4629      	mov	r1, r5
 800669c:	f7f9 fdc8 	bl	8000230 <__aeabi_dsub>
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4650      	mov	r0, sl
 80066a6:	4659      	mov	r1, fp
 80066a8:	f7f9 fdc2 	bl	8000230 <__aeabi_dsub>
 80066ac:	4642      	mov	r2, r8
 80066ae:	464b      	mov	r3, r9
 80066b0:	f7f9 ff76 	bl	80005a0 <__aeabi_dmul>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4630      	mov	r0, r6
 80066ba:	4639      	mov	r1, r7
 80066bc:	f7f9 fdb8 	bl	8000230 <__aeabi_dsub>
 80066c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066c4:	f7f9 ff6c 	bl	80005a0 <__aeabi_dmul>
 80066c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066cc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80066d0:	4610      	mov	r0, r2
 80066d2:	4619      	mov	r1, r3
 80066d4:	f7f9 ff64 	bl	80005a0 <__aeabi_dmul>
 80066d8:	a379      	add	r3, pc, #484	; (adr r3, 80068c0 <__ieee754_pow+0x6e8>)
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	4604      	mov	r4, r0
 80066e0:	460d      	mov	r5, r1
 80066e2:	f7f9 ff5d 	bl	80005a0 <__aeabi_dmul>
 80066e6:	a378      	add	r3, pc, #480	; (adr r3, 80068c8 <__ieee754_pow+0x6f0>)
 80066e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ec:	f7f9 fda2 	bl	8000234 <__adddf3>
 80066f0:	4622      	mov	r2, r4
 80066f2:	462b      	mov	r3, r5
 80066f4:	f7f9 ff54 	bl	80005a0 <__aeabi_dmul>
 80066f8:	a375      	add	r3, pc, #468	; (adr r3, 80068d0 <__ieee754_pow+0x6f8>)
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	f7f9 fd99 	bl	8000234 <__adddf3>
 8006702:	4622      	mov	r2, r4
 8006704:	462b      	mov	r3, r5
 8006706:	f7f9 ff4b 	bl	80005a0 <__aeabi_dmul>
 800670a:	a373      	add	r3, pc, #460	; (adr r3, 80068d8 <__ieee754_pow+0x700>)
 800670c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006710:	f7f9 fd90 	bl	8000234 <__adddf3>
 8006714:	4622      	mov	r2, r4
 8006716:	462b      	mov	r3, r5
 8006718:	f7f9 ff42 	bl	80005a0 <__aeabi_dmul>
 800671c:	a370      	add	r3, pc, #448	; (adr r3, 80068e0 <__ieee754_pow+0x708>)
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	f7f9 fd87 	bl	8000234 <__adddf3>
 8006726:	4622      	mov	r2, r4
 8006728:	462b      	mov	r3, r5
 800672a:	f7f9 ff39 	bl	80005a0 <__aeabi_dmul>
 800672e:	a36e      	add	r3, pc, #440	; (adr r3, 80068e8 <__ieee754_pow+0x710>)
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	f7f9 fd7e 	bl	8000234 <__adddf3>
 8006738:	4622      	mov	r2, r4
 800673a:	4606      	mov	r6, r0
 800673c:	460f      	mov	r7, r1
 800673e:	462b      	mov	r3, r5
 8006740:	4620      	mov	r0, r4
 8006742:	4629      	mov	r1, r5
 8006744:	f7f9 ff2c 	bl	80005a0 <__aeabi_dmul>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4630      	mov	r0, r6
 800674e:	4639      	mov	r1, r7
 8006750:	f7f9 ff26 	bl	80005a0 <__aeabi_dmul>
 8006754:	4604      	mov	r4, r0
 8006756:	460d      	mov	r5, r1
 8006758:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800675c:	4642      	mov	r2, r8
 800675e:	464b      	mov	r3, r9
 8006760:	f7f9 fd68 	bl	8000234 <__adddf3>
 8006764:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006768:	f7f9 ff1a 	bl	80005a0 <__aeabi_dmul>
 800676c:	4622      	mov	r2, r4
 800676e:	462b      	mov	r3, r5
 8006770:	f7f9 fd60 	bl	8000234 <__adddf3>
 8006774:	4642      	mov	r2, r8
 8006776:	4606      	mov	r6, r0
 8006778:	460f      	mov	r7, r1
 800677a:	464b      	mov	r3, r9
 800677c:	4640      	mov	r0, r8
 800677e:	4649      	mov	r1, r9
 8006780:	f7f9 ff0e 	bl	80005a0 <__aeabi_dmul>
 8006784:	2200      	movs	r2, #0
 8006786:	4b66      	ldr	r3, [pc, #408]	; (8006920 <__ieee754_pow+0x748>)
 8006788:	4682      	mov	sl, r0
 800678a:	468b      	mov	fp, r1
 800678c:	f7f9 fd52 	bl	8000234 <__adddf3>
 8006790:	4632      	mov	r2, r6
 8006792:	463b      	mov	r3, r7
 8006794:	f7f9 fd4e 	bl	8000234 <__adddf3>
 8006798:	2400      	movs	r4, #0
 800679a:	460d      	mov	r5, r1
 800679c:	4622      	mov	r2, r4
 800679e:	460b      	mov	r3, r1
 80067a0:	4640      	mov	r0, r8
 80067a2:	4649      	mov	r1, r9
 80067a4:	f7f9 fefc 	bl	80005a0 <__aeabi_dmul>
 80067a8:	2200      	movs	r2, #0
 80067aa:	4680      	mov	r8, r0
 80067ac:	4689      	mov	r9, r1
 80067ae:	4620      	mov	r0, r4
 80067b0:	4629      	mov	r1, r5
 80067b2:	4b5b      	ldr	r3, [pc, #364]	; (8006920 <__ieee754_pow+0x748>)
 80067b4:	f7f9 fd3c 	bl	8000230 <__aeabi_dsub>
 80067b8:	4652      	mov	r2, sl
 80067ba:	465b      	mov	r3, fp
 80067bc:	f7f9 fd38 	bl	8000230 <__aeabi_dsub>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4630      	mov	r0, r6
 80067c6:	4639      	mov	r1, r7
 80067c8:	f7f9 fd32 	bl	8000230 <__aeabi_dsub>
 80067cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067d0:	f7f9 fee6 	bl	80005a0 <__aeabi_dmul>
 80067d4:	4622      	mov	r2, r4
 80067d6:	4606      	mov	r6, r0
 80067d8:	460f      	mov	r7, r1
 80067da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80067de:	462b      	mov	r3, r5
 80067e0:	f7f9 fede 	bl	80005a0 <__aeabi_dmul>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4630      	mov	r0, r6
 80067ea:	4639      	mov	r1, r7
 80067ec:	f7f9 fd22 	bl	8000234 <__adddf3>
 80067f0:	2400      	movs	r4, #0
 80067f2:	4606      	mov	r6, r0
 80067f4:	460f      	mov	r7, r1
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4640      	mov	r0, r8
 80067fc:	4649      	mov	r1, r9
 80067fe:	f7f9 fd19 	bl	8000234 <__adddf3>
 8006802:	a33b      	add	r3, pc, #236	; (adr r3, 80068f0 <__ieee754_pow+0x718>)
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	4620      	mov	r0, r4
 800680a:	460d      	mov	r5, r1
 800680c:	f7f9 fec8 	bl	80005a0 <__aeabi_dmul>
 8006810:	4642      	mov	r2, r8
 8006812:	464b      	mov	r3, r9
 8006814:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006818:	4620      	mov	r0, r4
 800681a:	4629      	mov	r1, r5
 800681c:	f7f9 fd08 	bl	8000230 <__aeabi_dsub>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4630      	mov	r0, r6
 8006826:	4639      	mov	r1, r7
 8006828:	f7f9 fd02 	bl	8000230 <__aeabi_dsub>
 800682c:	a332      	add	r3, pc, #200	; (adr r3, 80068f8 <__ieee754_pow+0x720>)
 800682e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006832:	f7f9 feb5 	bl	80005a0 <__aeabi_dmul>
 8006836:	a332      	add	r3, pc, #200	; (adr r3, 8006900 <__ieee754_pow+0x728>)
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	4606      	mov	r6, r0
 800683e:	460f      	mov	r7, r1
 8006840:	4620      	mov	r0, r4
 8006842:	4629      	mov	r1, r5
 8006844:	f7f9 feac 	bl	80005a0 <__aeabi_dmul>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4630      	mov	r0, r6
 800684e:	4639      	mov	r1, r7
 8006850:	f7f9 fcf0 	bl	8000234 <__adddf3>
 8006854:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006856:	4b33      	ldr	r3, [pc, #204]	; (8006924 <__ieee754_pow+0x74c>)
 8006858:	f04f 0a00 	mov.w	sl, #0
 800685c:	4413      	add	r3, r2
 800685e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006862:	f7f9 fce7 	bl	8000234 <__adddf3>
 8006866:	4680      	mov	r8, r0
 8006868:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800686a:	4689      	mov	r9, r1
 800686c:	f7f9 fe2e 	bl	80004cc <__aeabi_i2d>
 8006870:	4604      	mov	r4, r0
 8006872:	460d      	mov	r5, r1
 8006874:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006876:	4b2c      	ldr	r3, [pc, #176]	; (8006928 <__ieee754_pow+0x750>)
 8006878:	4413      	add	r3, r2
 800687a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800687e:	4642      	mov	r2, r8
 8006880:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006884:	464b      	mov	r3, r9
 8006886:	f7f9 fcd5 	bl	8000234 <__adddf3>
 800688a:	4632      	mov	r2, r6
 800688c:	463b      	mov	r3, r7
 800688e:	f7f9 fcd1 	bl	8000234 <__adddf3>
 8006892:	4622      	mov	r2, r4
 8006894:	462b      	mov	r3, r5
 8006896:	f7f9 fccd 	bl	8000234 <__adddf3>
 800689a:	4622      	mov	r2, r4
 800689c:	462b      	mov	r3, r5
 800689e:	4650      	mov	r0, sl
 80068a0:	468b      	mov	fp, r1
 80068a2:	f7f9 fcc5 	bl	8000230 <__aeabi_dsub>
 80068a6:	4632      	mov	r2, r6
 80068a8:	463b      	mov	r3, r7
 80068aa:	f7f9 fcc1 	bl	8000230 <__aeabi_dsub>
 80068ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068b2:	f7f9 fcbd 	bl	8000230 <__aeabi_dsub>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	4640      	mov	r0, r8
 80068bc:	4649      	mov	r1, r9
 80068be:	e60d      	b.n	80064dc <__ieee754_pow+0x304>
 80068c0:	4a454eef 	.word	0x4a454eef
 80068c4:	3fca7e28 	.word	0x3fca7e28
 80068c8:	93c9db65 	.word	0x93c9db65
 80068cc:	3fcd864a 	.word	0x3fcd864a
 80068d0:	a91d4101 	.word	0xa91d4101
 80068d4:	3fd17460 	.word	0x3fd17460
 80068d8:	518f264d 	.word	0x518f264d
 80068dc:	3fd55555 	.word	0x3fd55555
 80068e0:	db6fabff 	.word	0xdb6fabff
 80068e4:	3fdb6db6 	.word	0x3fdb6db6
 80068e8:	33333303 	.word	0x33333303
 80068ec:	3fe33333 	.word	0x3fe33333
 80068f0:	e0000000 	.word	0xe0000000
 80068f4:	3feec709 	.word	0x3feec709
 80068f8:	dc3a03fd 	.word	0xdc3a03fd
 80068fc:	3feec709 	.word	0x3feec709
 8006900:	145b01f5 	.word	0x145b01f5
 8006904:	be3e2fe0 	.word	0xbe3e2fe0
 8006908:	7ff00000 	.word	0x7ff00000
 800690c:	43400000 	.word	0x43400000
 8006910:	0003988e 	.word	0x0003988e
 8006914:	000bb679 	.word	0x000bb679
 8006918:	080080c8 	.word	0x080080c8
 800691c:	3ff00000 	.word	0x3ff00000
 8006920:	40080000 	.word	0x40080000
 8006924:	080080e8 	.word	0x080080e8
 8006928:	080080d8 	.word	0x080080d8
 800692c:	2601      	movs	r6, #1
 800692e:	e66a      	b.n	8006606 <__ieee754_pow+0x42e>
 8006930:	a39d      	add	r3, pc, #628	; (adr r3, 8006ba8 <__ieee754_pow+0x9d0>)
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	4640      	mov	r0, r8
 8006938:	4649      	mov	r1, r9
 800693a:	f7f9 fc7b 	bl	8000234 <__adddf3>
 800693e:	4622      	mov	r2, r4
 8006940:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006944:	462b      	mov	r3, r5
 8006946:	4650      	mov	r0, sl
 8006948:	4639      	mov	r1, r7
 800694a:	f7f9 fc71 	bl	8000230 <__aeabi_dsub>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006956:	f7fa f8b3 	bl	8000ac0 <__aeabi_dcmpgt>
 800695a:	2800      	cmp	r0, #0
 800695c:	f47f ae09 	bne.w	8006572 <__ieee754_pow+0x39a>
 8006960:	4aa3      	ldr	r2, [pc, #652]	; (8006bf0 <__ieee754_pow+0xa18>)
 8006962:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006966:	4293      	cmp	r3, r2
 8006968:	f340 8101 	ble.w	8006b6e <__ieee754_pow+0x996>
 800696c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006970:	2000      	movs	r0, #0
 8006972:	151b      	asrs	r3, r3, #20
 8006974:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006978:	fa4a f303 	asr.w	r3, sl, r3
 800697c:	4433      	add	r3, r6
 800697e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006982:	4f9c      	ldr	r7, [pc, #624]	; (8006bf4 <__ieee754_pow+0xa1c>)
 8006984:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006988:	4117      	asrs	r7, r2
 800698a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800698e:	ea23 0107 	bic.w	r1, r3, r7
 8006992:	f1c2 0214 	rsb	r2, r2, #20
 8006996:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800699a:	460b      	mov	r3, r1
 800699c:	fa4a fa02 	asr.w	sl, sl, r2
 80069a0:	2e00      	cmp	r6, #0
 80069a2:	4602      	mov	r2, r0
 80069a4:	4629      	mov	r1, r5
 80069a6:	4620      	mov	r0, r4
 80069a8:	bfb8      	it	lt
 80069aa:	f1ca 0a00 	rsblt	sl, sl, #0
 80069ae:	f7f9 fc3f 	bl	8000230 <__aeabi_dsub>
 80069b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069ba:	2400      	movs	r4, #0
 80069bc:	4642      	mov	r2, r8
 80069be:	464b      	mov	r3, r9
 80069c0:	f7f9 fc38 	bl	8000234 <__adddf3>
 80069c4:	a37a      	add	r3, pc, #488	; (adr r3, 8006bb0 <__ieee754_pow+0x9d8>)
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	4620      	mov	r0, r4
 80069cc:	460d      	mov	r5, r1
 80069ce:	f7f9 fde7 	bl	80005a0 <__aeabi_dmul>
 80069d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069d6:	4606      	mov	r6, r0
 80069d8:	460f      	mov	r7, r1
 80069da:	4620      	mov	r0, r4
 80069dc:	4629      	mov	r1, r5
 80069de:	f7f9 fc27 	bl	8000230 <__aeabi_dsub>
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	4640      	mov	r0, r8
 80069e8:	4649      	mov	r1, r9
 80069ea:	f7f9 fc21 	bl	8000230 <__aeabi_dsub>
 80069ee:	a372      	add	r3, pc, #456	; (adr r3, 8006bb8 <__ieee754_pow+0x9e0>)
 80069f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f4:	f7f9 fdd4 	bl	80005a0 <__aeabi_dmul>
 80069f8:	a371      	add	r3, pc, #452	; (adr r3, 8006bc0 <__ieee754_pow+0x9e8>)
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	4680      	mov	r8, r0
 8006a00:	4689      	mov	r9, r1
 8006a02:	4620      	mov	r0, r4
 8006a04:	4629      	mov	r1, r5
 8006a06:	f7f9 fdcb 	bl	80005a0 <__aeabi_dmul>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4640      	mov	r0, r8
 8006a10:	4649      	mov	r1, r9
 8006a12:	f7f9 fc0f 	bl	8000234 <__adddf3>
 8006a16:	4604      	mov	r4, r0
 8006a18:	460d      	mov	r5, r1
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4630      	mov	r0, r6
 8006a20:	4639      	mov	r1, r7
 8006a22:	f7f9 fc07 	bl	8000234 <__adddf3>
 8006a26:	4632      	mov	r2, r6
 8006a28:	463b      	mov	r3, r7
 8006a2a:	4680      	mov	r8, r0
 8006a2c:	4689      	mov	r9, r1
 8006a2e:	f7f9 fbff 	bl	8000230 <__aeabi_dsub>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4620      	mov	r0, r4
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f7f9 fbf9 	bl	8000230 <__aeabi_dsub>
 8006a3e:	4642      	mov	r2, r8
 8006a40:	4606      	mov	r6, r0
 8006a42:	460f      	mov	r7, r1
 8006a44:	464b      	mov	r3, r9
 8006a46:	4640      	mov	r0, r8
 8006a48:	4649      	mov	r1, r9
 8006a4a:	f7f9 fda9 	bl	80005a0 <__aeabi_dmul>
 8006a4e:	a35e      	add	r3, pc, #376	; (adr r3, 8006bc8 <__ieee754_pow+0x9f0>)
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	4604      	mov	r4, r0
 8006a56:	460d      	mov	r5, r1
 8006a58:	f7f9 fda2 	bl	80005a0 <__aeabi_dmul>
 8006a5c:	a35c      	add	r3, pc, #368	; (adr r3, 8006bd0 <__ieee754_pow+0x9f8>)
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	f7f9 fbe5 	bl	8000230 <__aeabi_dsub>
 8006a66:	4622      	mov	r2, r4
 8006a68:	462b      	mov	r3, r5
 8006a6a:	f7f9 fd99 	bl	80005a0 <__aeabi_dmul>
 8006a6e:	a35a      	add	r3, pc, #360	; (adr r3, 8006bd8 <__ieee754_pow+0xa00>)
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f7f9 fbde 	bl	8000234 <__adddf3>
 8006a78:	4622      	mov	r2, r4
 8006a7a:	462b      	mov	r3, r5
 8006a7c:	f7f9 fd90 	bl	80005a0 <__aeabi_dmul>
 8006a80:	a357      	add	r3, pc, #348	; (adr r3, 8006be0 <__ieee754_pow+0xa08>)
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	f7f9 fbd3 	bl	8000230 <__aeabi_dsub>
 8006a8a:	4622      	mov	r2, r4
 8006a8c:	462b      	mov	r3, r5
 8006a8e:	f7f9 fd87 	bl	80005a0 <__aeabi_dmul>
 8006a92:	a355      	add	r3, pc, #340	; (adr r3, 8006be8 <__ieee754_pow+0xa10>)
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	f7f9 fbcc 	bl	8000234 <__adddf3>
 8006a9c:	4622      	mov	r2, r4
 8006a9e:	462b      	mov	r3, r5
 8006aa0:	f7f9 fd7e 	bl	80005a0 <__aeabi_dmul>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4640      	mov	r0, r8
 8006aaa:	4649      	mov	r1, r9
 8006aac:	f7f9 fbc0 	bl	8000230 <__aeabi_dsub>
 8006ab0:	4604      	mov	r4, r0
 8006ab2:	460d      	mov	r5, r1
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4640      	mov	r0, r8
 8006aba:	4649      	mov	r1, r9
 8006abc:	f7f9 fd70 	bl	80005a0 <__aeabi_dmul>
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006aca:	4620      	mov	r0, r4
 8006acc:	4629      	mov	r1, r5
 8006ace:	f7f9 fbaf 	bl	8000230 <__aeabi_dsub>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ada:	f7f9 fe8b 	bl	80007f4 <__aeabi_ddiv>
 8006ade:	4632      	mov	r2, r6
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	460d      	mov	r5, r1
 8006ae4:	463b      	mov	r3, r7
 8006ae6:	4640      	mov	r0, r8
 8006ae8:	4649      	mov	r1, r9
 8006aea:	f7f9 fd59 	bl	80005a0 <__aeabi_dmul>
 8006aee:	4632      	mov	r2, r6
 8006af0:	463b      	mov	r3, r7
 8006af2:	f7f9 fb9f 	bl	8000234 <__adddf3>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4620      	mov	r0, r4
 8006afc:	4629      	mov	r1, r5
 8006afe:	f7f9 fb97 	bl	8000230 <__aeabi_dsub>
 8006b02:	4642      	mov	r2, r8
 8006b04:	464b      	mov	r3, r9
 8006b06:	f7f9 fb93 	bl	8000230 <__aeabi_dsub>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	2000      	movs	r0, #0
 8006b10:	4939      	ldr	r1, [pc, #228]	; (8006bf8 <__ieee754_pow+0xa20>)
 8006b12:	f7f9 fb8d 	bl	8000230 <__aeabi_dsub>
 8006b16:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006b1a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006b1e:	da29      	bge.n	8006b74 <__ieee754_pow+0x99c>
 8006b20:	4652      	mov	r2, sl
 8006b22:	f001 fa11 	bl	8007f48 <scalbn>
 8006b26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b2a:	f7ff bbfe 	b.w	800632a <__ieee754_pow+0x152>
 8006b2e:	4b33      	ldr	r3, [pc, #204]	; (8006bfc <__ieee754_pow+0xa24>)
 8006b30:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006b34:	429f      	cmp	r7, r3
 8006b36:	f77f af13 	ble.w	8006960 <__ieee754_pow+0x788>
 8006b3a:	4b31      	ldr	r3, [pc, #196]	; (8006c00 <__ieee754_pow+0xa28>)
 8006b3c:	440b      	add	r3, r1
 8006b3e:	4303      	orrs	r3, r0
 8006b40:	d009      	beq.n	8006b56 <__ieee754_pow+0x97e>
 8006b42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b46:	2200      	movs	r2, #0
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f7f9 ff9b 	bl	8000a84 <__aeabi_dcmplt>
 8006b4e:	3800      	subs	r0, #0
 8006b50:	bf18      	it	ne
 8006b52:	2001      	movne	r0, #1
 8006b54:	e453      	b.n	80063fe <__ieee754_pow+0x226>
 8006b56:	4622      	mov	r2, r4
 8006b58:	462b      	mov	r3, r5
 8006b5a:	f7f9 fb69 	bl	8000230 <__aeabi_dsub>
 8006b5e:	4642      	mov	r2, r8
 8006b60:	464b      	mov	r3, r9
 8006b62:	f7f9 ffa3 	bl	8000aac <__aeabi_dcmpge>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	f43f aefa 	beq.w	8006960 <__ieee754_pow+0x788>
 8006b6c:	e7e9      	b.n	8006b42 <__ieee754_pow+0x96a>
 8006b6e:	f04f 0a00 	mov.w	sl, #0
 8006b72:	e720      	b.n	80069b6 <__ieee754_pow+0x7de>
 8006b74:	4621      	mov	r1, r4
 8006b76:	e7d6      	b.n	8006b26 <__ieee754_pow+0x94e>
 8006b78:	f04f 0b00 	mov.w	fp, #0
 8006b7c:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006bf8 <__ieee754_pow+0xa20>
 8006b80:	f7ff bbba 	b.w	80062f8 <__ieee754_pow+0x120>
 8006b84:	f04f 0b00 	mov.w	fp, #0
 8006b88:	f04f 0c00 	mov.w	ip, #0
 8006b8c:	f7ff bbb4 	b.w	80062f8 <__ieee754_pow+0x120>
 8006b90:	4640      	mov	r0, r8
 8006b92:	4649      	mov	r1, r9
 8006b94:	f7ff bb3d 	b.w	8006212 <__ieee754_pow+0x3a>
 8006b98:	9200      	str	r2, [sp, #0]
 8006b9a:	f7ff bb89 	b.w	80062b0 <__ieee754_pow+0xd8>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f7ff bb73 	b.w	800628a <__ieee754_pow+0xb2>
 8006ba4:	f3af 8000 	nop.w
 8006ba8:	652b82fe 	.word	0x652b82fe
 8006bac:	3c971547 	.word	0x3c971547
 8006bb0:	00000000 	.word	0x00000000
 8006bb4:	3fe62e43 	.word	0x3fe62e43
 8006bb8:	fefa39ef 	.word	0xfefa39ef
 8006bbc:	3fe62e42 	.word	0x3fe62e42
 8006bc0:	0ca86c39 	.word	0x0ca86c39
 8006bc4:	be205c61 	.word	0xbe205c61
 8006bc8:	72bea4d0 	.word	0x72bea4d0
 8006bcc:	3e663769 	.word	0x3e663769
 8006bd0:	c5d26bf1 	.word	0xc5d26bf1
 8006bd4:	3ebbbd41 	.word	0x3ebbbd41
 8006bd8:	af25de2c 	.word	0xaf25de2c
 8006bdc:	3f11566a 	.word	0x3f11566a
 8006be0:	16bebd93 	.word	0x16bebd93
 8006be4:	3f66c16c 	.word	0x3f66c16c
 8006be8:	5555553e 	.word	0x5555553e
 8006bec:	3fc55555 	.word	0x3fc55555
 8006bf0:	3fe00000 	.word	0x3fe00000
 8006bf4:	000fffff 	.word	0x000fffff
 8006bf8:	3ff00000 	.word	0x3ff00000
 8006bfc:	4090cbff 	.word	0x4090cbff
 8006c00:	3f6f3400 	.word	0x3f6f3400
 8006c04:	00000000 	.word	0x00000000

08006c08 <__ieee754_rem_pio2>:
 8006c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	4ac4      	ldr	r2, [pc, #784]	; (8006f20 <__ieee754_rem_pio2+0x318>)
 8006c10:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8006c14:	b08d      	sub	sp, #52	; 0x34
 8006c16:	4592      	cmp	sl, r2
 8006c18:	9104      	str	r1, [sp, #16]
 8006c1a:	dc07      	bgt.n	8006c2c <__ieee754_rem_pio2+0x24>
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	2300      	movs	r3, #0
 8006c20:	e9c4 0100 	strd	r0, r1, [r4]
 8006c24:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006c28:	2500      	movs	r5, #0
 8006c2a:	e024      	b.n	8006c76 <__ieee754_rem_pio2+0x6e>
 8006c2c:	4abd      	ldr	r2, [pc, #756]	; (8006f24 <__ieee754_rem_pio2+0x31c>)
 8006c2e:	4592      	cmp	sl, r2
 8006c30:	dc72      	bgt.n	8006d18 <__ieee754_rem_pio2+0x110>
 8006c32:	9b04      	ldr	r3, [sp, #16]
 8006c34:	4dbc      	ldr	r5, [pc, #752]	; (8006f28 <__ieee754_rem_pio2+0x320>)
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	a3ab      	add	r3, pc, #684	; (adr r3, 8006ee8 <__ieee754_rem_pio2+0x2e0>)
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	dd36      	ble.n	8006cae <__ieee754_rem_pio2+0xa6>
 8006c40:	f7f9 faf6 	bl	8000230 <__aeabi_dsub>
 8006c44:	45aa      	cmp	sl, r5
 8006c46:	4606      	mov	r6, r0
 8006c48:	460f      	mov	r7, r1
 8006c4a:	d018      	beq.n	8006c7e <__ieee754_rem_pio2+0x76>
 8006c4c:	a3a8      	add	r3, pc, #672	; (adr r3, 8006ef0 <__ieee754_rem_pio2+0x2e8>)
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	f7f9 faed 	bl	8000230 <__aeabi_dsub>
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	e9c4 2300 	strd	r2, r3, [r4]
 8006c60:	4639      	mov	r1, r7
 8006c62:	f7f9 fae5 	bl	8000230 <__aeabi_dsub>
 8006c66:	a3a2      	add	r3, pc, #648	; (adr r3, 8006ef0 <__ieee754_rem_pio2+0x2e8>)
 8006c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6c:	f7f9 fae0 	bl	8000230 <__aeabi_dsub>
 8006c70:	2501      	movs	r5, #1
 8006c72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006c76:	4628      	mov	r0, r5
 8006c78:	b00d      	add	sp, #52	; 0x34
 8006c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7e:	a39e      	add	r3, pc, #632	; (adr r3, 8006ef8 <__ieee754_rem_pio2+0x2f0>)
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f7f9 fad4 	bl	8000230 <__aeabi_dsub>
 8006c88:	a39d      	add	r3, pc, #628	; (adr r3, 8006f00 <__ieee754_rem_pio2+0x2f8>)
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	4606      	mov	r6, r0
 8006c90:	460f      	mov	r7, r1
 8006c92:	f7f9 facd 	bl	8000230 <__aeabi_dsub>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	e9c4 2300 	strd	r2, r3, [r4]
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	f7f9 fac5 	bl	8000230 <__aeabi_dsub>
 8006ca6:	a396      	add	r3, pc, #600	; (adr r3, 8006f00 <__ieee754_rem_pio2+0x2f8>)
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	e7de      	b.n	8006c6c <__ieee754_rem_pio2+0x64>
 8006cae:	f7f9 fac1 	bl	8000234 <__adddf3>
 8006cb2:	45aa      	cmp	sl, r5
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	460f      	mov	r7, r1
 8006cb8:	d016      	beq.n	8006ce8 <__ieee754_rem_pio2+0xe0>
 8006cba:	a38d      	add	r3, pc, #564	; (adr r3, 8006ef0 <__ieee754_rem_pio2+0x2e8>)
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	f7f9 fab8 	bl	8000234 <__adddf3>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4630      	mov	r0, r6
 8006cca:	e9c4 2300 	strd	r2, r3, [r4]
 8006cce:	4639      	mov	r1, r7
 8006cd0:	f7f9 faae 	bl	8000230 <__aeabi_dsub>
 8006cd4:	a386      	add	r3, pc, #536	; (adr r3, 8006ef0 <__ieee754_rem_pio2+0x2e8>)
 8006cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cda:	f7f9 faab 	bl	8000234 <__adddf3>
 8006cde:	f04f 35ff 	mov.w	r5, #4294967295
 8006ce2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006ce6:	e7c6      	b.n	8006c76 <__ieee754_rem_pio2+0x6e>
 8006ce8:	a383      	add	r3, pc, #524	; (adr r3, 8006ef8 <__ieee754_rem_pio2+0x2f0>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f7f9 faa1 	bl	8000234 <__adddf3>
 8006cf2:	a383      	add	r3, pc, #524	; (adr r3, 8006f00 <__ieee754_rem_pio2+0x2f8>)
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	4606      	mov	r6, r0
 8006cfa:	460f      	mov	r7, r1
 8006cfc:	f7f9 fa9a 	bl	8000234 <__adddf3>
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	4630      	mov	r0, r6
 8006d06:	e9c4 2300 	strd	r2, r3, [r4]
 8006d0a:	4639      	mov	r1, r7
 8006d0c:	f7f9 fa90 	bl	8000230 <__aeabi_dsub>
 8006d10:	a37b      	add	r3, pc, #492	; (adr r3, 8006f00 <__ieee754_rem_pio2+0x2f8>)
 8006d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d16:	e7e0      	b.n	8006cda <__ieee754_rem_pio2+0xd2>
 8006d18:	4a84      	ldr	r2, [pc, #528]	; (8006f2c <__ieee754_rem_pio2+0x324>)
 8006d1a:	4592      	cmp	sl, r2
 8006d1c:	f300 80d5 	bgt.w	8006eca <__ieee754_rem_pio2+0x2c2>
 8006d20:	f001 f888 	bl	8007e34 <fabs>
 8006d24:	a378      	add	r3, pc, #480	; (adr r3, 8006f08 <__ieee754_rem_pio2+0x300>)
 8006d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	460f      	mov	r7, r1
 8006d2e:	f7f9 fc37 	bl	80005a0 <__aeabi_dmul>
 8006d32:	2200      	movs	r2, #0
 8006d34:	4b7e      	ldr	r3, [pc, #504]	; (8006f30 <__ieee754_rem_pio2+0x328>)
 8006d36:	f7f9 fa7d 	bl	8000234 <__adddf3>
 8006d3a:	f7f9 fee1 	bl	8000b00 <__aeabi_d2iz>
 8006d3e:	4605      	mov	r5, r0
 8006d40:	f7f9 fbc4 	bl	80004cc <__aeabi_i2d>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d4c:	a366      	add	r3, pc, #408	; (adr r3, 8006ee8 <__ieee754_rem_pio2+0x2e0>)
 8006d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d52:	f7f9 fc25 	bl	80005a0 <__aeabi_dmul>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	4639      	mov	r1, r7
 8006d5e:	f7f9 fa67 	bl	8000230 <__aeabi_dsub>
 8006d62:	a363      	add	r3, pc, #396	; (adr r3, 8006ef0 <__ieee754_rem_pio2+0x2e8>)
 8006d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d68:	4680      	mov	r8, r0
 8006d6a:	4689      	mov	r9, r1
 8006d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d70:	f7f9 fc16 	bl	80005a0 <__aeabi_dmul>
 8006d74:	2d1f      	cmp	r5, #31
 8006d76:	4606      	mov	r6, r0
 8006d78:	460f      	mov	r7, r1
 8006d7a:	dc0e      	bgt.n	8006d9a <__ieee754_rem_pio2+0x192>
 8006d7c:	4b6d      	ldr	r3, [pc, #436]	; (8006f34 <__ieee754_rem_pio2+0x32c>)
 8006d7e:	1e6a      	subs	r2, r5, #1
 8006d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d84:	4553      	cmp	r3, sl
 8006d86:	d008      	beq.n	8006d9a <__ieee754_rem_pio2+0x192>
 8006d88:	4632      	mov	r2, r6
 8006d8a:	463b      	mov	r3, r7
 8006d8c:	4640      	mov	r0, r8
 8006d8e:	4649      	mov	r1, r9
 8006d90:	f7f9 fa4e 	bl	8000230 <__aeabi_dsub>
 8006d94:	e9c4 0100 	strd	r0, r1, [r4]
 8006d98:	e013      	b.n	8006dc2 <__ieee754_rem_pio2+0x1ba>
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	4632      	mov	r2, r6
 8006d9e:	4640      	mov	r0, r8
 8006da0:	4649      	mov	r1, r9
 8006da2:	f7f9 fa45 	bl	8000230 <__aeabi_dsub>
 8006da6:	ea4f 532a 	mov.w	r3, sl, asr #20
 8006daa:	9305      	str	r3, [sp, #20]
 8006dac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006db0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8006db4:	f1ba 0f10 	cmp.w	sl, #16
 8006db8:	dc1f      	bgt.n	8006dfa <__ieee754_rem_pio2+0x1f2>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	e9c4 2300 	strd	r2, r3, [r4]
 8006dc2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	4653      	mov	r3, sl
 8006dca:	4649      	mov	r1, r9
 8006dcc:	f7f9 fa30 	bl	8000230 <__aeabi_dsub>
 8006dd0:	4632      	mov	r2, r6
 8006dd2:	463b      	mov	r3, r7
 8006dd4:	f7f9 fa2c 	bl	8000230 <__aeabi_dsub>
 8006dd8:	460b      	mov	r3, r1
 8006dda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006dde:	9904      	ldr	r1, [sp, #16]
 8006de0:	4602      	mov	r2, r0
 8006de2:	2900      	cmp	r1, #0
 8006de4:	f6bf af47 	bge.w	8006c76 <__ieee754_rem_pio2+0x6e>
 8006de8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8006dec:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8006df0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006df4:	60e3      	str	r3, [r4, #12]
 8006df6:	426d      	negs	r5, r5
 8006df8:	e73d      	b.n	8006c76 <__ieee754_rem_pio2+0x6e>
 8006dfa:	a33f      	add	r3, pc, #252	; (adr r3, 8006ef8 <__ieee754_rem_pio2+0x2f0>)
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e04:	f7f9 fbcc 	bl	80005a0 <__aeabi_dmul>
 8006e08:	4606      	mov	r6, r0
 8006e0a:	460f      	mov	r7, r1
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4640      	mov	r0, r8
 8006e12:	4649      	mov	r1, r9
 8006e14:	f7f9 fa0c 	bl	8000230 <__aeabi_dsub>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4682      	mov	sl, r0
 8006e1e:	468b      	mov	fp, r1
 8006e20:	4640      	mov	r0, r8
 8006e22:	4649      	mov	r1, r9
 8006e24:	f7f9 fa04 	bl	8000230 <__aeabi_dsub>
 8006e28:	4632      	mov	r2, r6
 8006e2a:	463b      	mov	r3, r7
 8006e2c:	f7f9 fa00 	bl	8000230 <__aeabi_dsub>
 8006e30:	a333      	add	r3, pc, #204	; (adr r3, 8006f00 <__ieee754_rem_pio2+0x2f8>)
 8006e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e36:	4606      	mov	r6, r0
 8006e38:	460f      	mov	r7, r1
 8006e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e3e:	f7f9 fbaf 	bl	80005a0 <__aeabi_dmul>
 8006e42:	4632      	mov	r2, r6
 8006e44:	463b      	mov	r3, r7
 8006e46:	f7f9 f9f3 	bl	8000230 <__aeabi_dsub>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4606      	mov	r6, r0
 8006e50:	460f      	mov	r7, r1
 8006e52:	4650      	mov	r0, sl
 8006e54:	4659      	mov	r1, fp
 8006e56:	f7f9 f9eb 	bl	8000230 <__aeabi_dsub>
 8006e5a:	9a05      	ldr	r2, [sp, #20]
 8006e5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2b31      	cmp	r3, #49	; 0x31
 8006e64:	dc06      	bgt.n	8006e74 <__ieee754_rem_pio2+0x26c>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	46d0      	mov	r8, sl
 8006e6c:	46d9      	mov	r9, fp
 8006e6e:	e9c4 2300 	strd	r2, r3, [r4]
 8006e72:	e7a6      	b.n	8006dc2 <__ieee754_rem_pio2+0x1ba>
 8006e74:	a326      	add	r3, pc, #152	; (adr r3, 8006f10 <__ieee754_rem_pio2+0x308>)
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e7e:	f7f9 fb8f 	bl	80005a0 <__aeabi_dmul>
 8006e82:	4606      	mov	r6, r0
 8006e84:	460f      	mov	r7, r1
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4650      	mov	r0, sl
 8006e8c:	4659      	mov	r1, fp
 8006e8e:	f7f9 f9cf 	bl	8000230 <__aeabi_dsub>
 8006e92:	4602      	mov	r2, r0
 8006e94:	460b      	mov	r3, r1
 8006e96:	4680      	mov	r8, r0
 8006e98:	4689      	mov	r9, r1
 8006e9a:	4650      	mov	r0, sl
 8006e9c:	4659      	mov	r1, fp
 8006e9e:	f7f9 f9c7 	bl	8000230 <__aeabi_dsub>
 8006ea2:	4632      	mov	r2, r6
 8006ea4:	463b      	mov	r3, r7
 8006ea6:	f7f9 f9c3 	bl	8000230 <__aeabi_dsub>
 8006eaa:	a31b      	add	r3, pc, #108	; (adr r3, 8006f18 <__ieee754_rem_pio2+0x310>)
 8006eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb0:	4606      	mov	r6, r0
 8006eb2:	460f      	mov	r7, r1
 8006eb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eb8:	f7f9 fb72 	bl	80005a0 <__aeabi_dmul>
 8006ebc:	4632      	mov	r2, r6
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	f7f9 f9b6 	bl	8000230 <__aeabi_dsub>
 8006ec4:	4606      	mov	r6, r0
 8006ec6:	460f      	mov	r7, r1
 8006ec8:	e75e      	b.n	8006d88 <__ieee754_rem_pio2+0x180>
 8006eca:	4a1b      	ldr	r2, [pc, #108]	; (8006f38 <__ieee754_rem_pio2+0x330>)
 8006ecc:	4592      	cmp	sl, r2
 8006ece:	dd35      	ble.n	8006f3c <__ieee754_rem_pio2+0x334>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	f7f9 f9ac 	bl	8000230 <__aeabi_dsub>
 8006ed8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006edc:	e9c4 0100 	strd	r0, r1, [r4]
 8006ee0:	e6a2      	b.n	8006c28 <__ieee754_rem_pio2+0x20>
 8006ee2:	bf00      	nop
 8006ee4:	f3af 8000 	nop.w
 8006ee8:	54400000 	.word	0x54400000
 8006eec:	3ff921fb 	.word	0x3ff921fb
 8006ef0:	1a626331 	.word	0x1a626331
 8006ef4:	3dd0b461 	.word	0x3dd0b461
 8006ef8:	1a600000 	.word	0x1a600000
 8006efc:	3dd0b461 	.word	0x3dd0b461
 8006f00:	2e037073 	.word	0x2e037073
 8006f04:	3ba3198a 	.word	0x3ba3198a
 8006f08:	6dc9c883 	.word	0x6dc9c883
 8006f0c:	3fe45f30 	.word	0x3fe45f30
 8006f10:	2e000000 	.word	0x2e000000
 8006f14:	3ba3198a 	.word	0x3ba3198a
 8006f18:	252049c1 	.word	0x252049c1
 8006f1c:	397b839a 	.word	0x397b839a
 8006f20:	3fe921fb 	.word	0x3fe921fb
 8006f24:	4002d97b 	.word	0x4002d97b
 8006f28:	3ff921fb 	.word	0x3ff921fb
 8006f2c:	413921fb 	.word	0x413921fb
 8006f30:	3fe00000 	.word	0x3fe00000
 8006f34:	080080f8 	.word	0x080080f8
 8006f38:	7fefffff 	.word	0x7fefffff
 8006f3c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8006f40:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006f44:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8006f48:	460f      	mov	r7, r1
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	f7f9 fdd8 	bl	8000b00 <__aeabi_d2iz>
 8006f50:	f7f9 fabc 	bl	80004cc <__aeabi_i2d>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4630      	mov	r0, r6
 8006f5a:	4639      	mov	r1, r7
 8006f5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f60:	f7f9 f966 	bl	8000230 <__aeabi_dsub>
 8006f64:	2200      	movs	r2, #0
 8006f66:	4b22      	ldr	r3, [pc, #136]	; (8006ff0 <__ieee754_rem_pio2+0x3e8>)
 8006f68:	f7f9 fb1a 	bl	80005a0 <__aeabi_dmul>
 8006f6c:	460f      	mov	r7, r1
 8006f6e:	4606      	mov	r6, r0
 8006f70:	f7f9 fdc6 	bl	8000b00 <__aeabi_d2iz>
 8006f74:	f7f9 faaa 	bl	80004cc <__aeabi_i2d>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	4639      	mov	r1, r7
 8006f80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006f84:	f7f9 f954 	bl	8000230 <__aeabi_dsub>
 8006f88:	2200      	movs	r2, #0
 8006f8a:	4b19      	ldr	r3, [pc, #100]	; (8006ff0 <__ieee754_rem_pio2+0x3e8>)
 8006f8c:	f7f9 fb08 	bl	80005a0 <__aeabi_dmul>
 8006f90:	f04f 0803 	mov.w	r8, #3
 8006f94:	2600      	movs	r6, #0
 8006f96:	2700      	movs	r7, #0
 8006f98:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006f9c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8006fa0:	4632      	mov	r2, r6
 8006fa2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	46c2      	mov	sl, r8
 8006faa:	f108 38ff 	add.w	r8, r8, #4294967295
 8006fae:	f7f9 fd5f 	bl	8000a70 <__aeabi_dcmpeq>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d1f4      	bne.n	8006fa0 <__ieee754_rem_pio2+0x398>
 8006fb6:	4b0f      	ldr	r3, [pc, #60]	; (8006ff4 <__ieee754_rem_pio2+0x3ec>)
 8006fb8:	462a      	mov	r2, r5
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	a806      	add	r0, sp, #24
 8006fc4:	4653      	mov	r3, sl
 8006fc6:	f000 f985 	bl	80072d4 <__kernel_rem_pio2>
 8006fca:	9b04      	ldr	r3, [sp, #16]
 8006fcc:	4605      	mov	r5, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f6bf ae51 	bge.w	8006c76 <__ieee754_rem_pio2+0x6e>
 8006fd4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006fd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fdc:	e9c4 2300 	strd	r2, r3, [r4]
 8006fe0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006fe4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fe8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006fec:	e703      	b.n	8006df6 <__ieee754_rem_pio2+0x1ee>
 8006fee:	bf00      	nop
 8006ff0:	41700000 	.word	0x41700000
 8006ff4:	08008178 	.word	0x08008178

08006ff8 <__ieee754_sqrt>:
 8006ff8:	f8df c158 	ldr.w	ip, [pc, #344]	; 8007154 <__ieee754_sqrt+0x15c>
 8006ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007000:	ea3c 0c01 	bics.w	ip, ip, r1
 8007004:	4606      	mov	r6, r0
 8007006:	460d      	mov	r5, r1
 8007008:	460c      	mov	r4, r1
 800700a:	460a      	mov	r2, r1
 800700c:	4607      	mov	r7, r0
 800700e:	4603      	mov	r3, r0
 8007010:	d10f      	bne.n	8007032 <__ieee754_sqrt+0x3a>
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	f7f9 fac3 	bl	80005a0 <__aeabi_dmul>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4630      	mov	r0, r6
 8007020:	4629      	mov	r1, r5
 8007022:	f7f9 f907 	bl	8000234 <__adddf3>
 8007026:	4606      	mov	r6, r0
 8007028:	460d      	mov	r5, r1
 800702a:	4630      	mov	r0, r6
 800702c:	4629      	mov	r1, r5
 800702e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007032:	2900      	cmp	r1, #0
 8007034:	dc0e      	bgt.n	8007054 <__ieee754_sqrt+0x5c>
 8007036:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800703a:	ea5c 0707 	orrs.w	r7, ip, r7
 800703e:	d0f4      	beq.n	800702a <__ieee754_sqrt+0x32>
 8007040:	b141      	cbz	r1, 8007054 <__ieee754_sqrt+0x5c>
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	f7f9 f8f3 	bl	8000230 <__aeabi_dsub>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	f7f9 fbd1 	bl	80007f4 <__aeabi_ddiv>
 8007052:	e7e8      	b.n	8007026 <__ieee754_sqrt+0x2e>
 8007054:	1521      	asrs	r1, r4, #20
 8007056:	d075      	beq.n	8007144 <__ieee754_sqrt+0x14c>
 8007058:	07cc      	lsls	r4, r1, #31
 800705a:	f04f 0400 	mov.w	r4, #0
 800705e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007062:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8007066:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800706a:	bf5e      	ittt	pl
 800706c:	0fd9      	lsrpl	r1, r3, #31
 800706e:	005b      	lslpl	r3, r3, #1
 8007070:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8007074:	0fd9      	lsrs	r1, r3, #31
 8007076:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800707a:	2516      	movs	r5, #22
 800707c:	4620      	mov	r0, r4
 800707e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007082:	107f      	asrs	r7, r7, #1
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	1846      	adds	r6, r0, r1
 8007088:	4296      	cmp	r6, r2
 800708a:	bfde      	ittt	le
 800708c:	1b92      	suble	r2, r2, r6
 800708e:	1870      	addle	r0, r6, r1
 8007090:	1864      	addle	r4, r4, r1
 8007092:	0052      	lsls	r2, r2, #1
 8007094:	3d01      	subs	r5, #1
 8007096:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800709a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800709e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80070a2:	d1f0      	bne.n	8007086 <__ieee754_sqrt+0x8e>
 80070a4:	4629      	mov	r1, r5
 80070a6:	f04f 0e20 	mov.w	lr, #32
 80070aa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80070ae:	4282      	cmp	r2, r0
 80070b0:	eb06 0c05 	add.w	ip, r6, r5
 80070b4:	dc02      	bgt.n	80070bc <__ieee754_sqrt+0xc4>
 80070b6:	d113      	bne.n	80070e0 <__ieee754_sqrt+0xe8>
 80070b8:	459c      	cmp	ip, r3
 80070ba:	d811      	bhi.n	80070e0 <__ieee754_sqrt+0xe8>
 80070bc:	f1bc 0f00 	cmp.w	ip, #0
 80070c0:	eb0c 0506 	add.w	r5, ip, r6
 80070c4:	da43      	bge.n	800714e <__ieee754_sqrt+0x156>
 80070c6:	2d00      	cmp	r5, #0
 80070c8:	db41      	blt.n	800714e <__ieee754_sqrt+0x156>
 80070ca:	f100 0801 	add.w	r8, r0, #1
 80070ce:	1a12      	subs	r2, r2, r0
 80070d0:	4640      	mov	r0, r8
 80070d2:	459c      	cmp	ip, r3
 80070d4:	bf88      	it	hi
 80070d6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80070da:	eba3 030c 	sub.w	r3, r3, ip
 80070de:	4431      	add	r1, r6
 80070e0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80070e4:	f1be 0e01 	subs.w	lr, lr, #1
 80070e8:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80070ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80070f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80070f4:	d1db      	bne.n	80070ae <__ieee754_sqrt+0xb6>
 80070f6:	4313      	orrs	r3, r2
 80070f8:	d006      	beq.n	8007108 <__ieee754_sqrt+0x110>
 80070fa:	1c48      	adds	r0, r1, #1
 80070fc:	bf0b      	itete	eq
 80070fe:	4671      	moveq	r1, lr
 8007100:	3101      	addne	r1, #1
 8007102:	3401      	addeq	r4, #1
 8007104:	f021 0101 	bicne.w	r1, r1, #1
 8007108:	1063      	asrs	r3, r4, #1
 800710a:	0849      	lsrs	r1, r1, #1
 800710c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007110:	07e2      	lsls	r2, r4, #31
 8007112:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007116:	bf48      	it	mi
 8007118:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800711c:	460e      	mov	r6, r1
 800711e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007122:	e782      	b.n	800702a <__ieee754_sqrt+0x32>
 8007124:	0ada      	lsrs	r2, r3, #11
 8007126:	3815      	subs	r0, #21
 8007128:	055b      	lsls	r3, r3, #21
 800712a:	2a00      	cmp	r2, #0
 800712c:	d0fa      	beq.n	8007124 <__ieee754_sqrt+0x12c>
 800712e:	02d5      	lsls	r5, r2, #11
 8007130:	d50a      	bpl.n	8007148 <__ieee754_sqrt+0x150>
 8007132:	f1c1 0420 	rsb	r4, r1, #32
 8007136:	fa23 f404 	lsr.w	r4, r3, r4
 800713a:	1e4d      	subs	r5, r1, #1
 800713c:	408b      	lsls	r3, r1
 800713e:	4322      	orrs	r2, r4
 8007140:	1b41      	subs	r1, r0, r5
 8007142:	e789      	b.n	8007058 <__ieee754_sqrt+0x60>
 8007144:	4608      	mov	r0, r1
 8007146:	e7f0      	b.n	800712a <__ieee754_sqrt+0x132>
 8007148:	0052      	lsls	r2, r2, #1
 800714a:	3101      	adds	r1, #1
 800714c:	e7ef      	b.n	800712e <__ieee754_sqrt+0x136>
 800714e:	4680      	mov	r8, r0
 8007150:	e7bd      	b.n	80070ce <__ieee754_sqrt+0xd6>
 8007152:	bf00      	nop
 8007154:	7ff00000 	.word	0x7ff00000

08007158 <__kernel_cos>:
 8007158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007160:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007164:	4680      	mov	r8, r0
 8007166:	460f      	mov	r7, r1
 8007168:	e9cd 2300 	strd	r2, r3, [sp]
 800716c:	da04      	bge.n	8007178 <__kernel_cos+0x20>
 800716e:	f7f9 fcc7 	bl	8000b00 <__aeabi_d2iz>
 8007172:	2800      	cmp	r0, #0
 8007174:	f000 8086 	beq.w	8007284 <__kernel_cos+0x12c>
 8007178:	4642      	mov	r2, r8
 800717a:	463b      	mov	r3, r7
 800717c:	4640      	mov	r0, r8
 800717e:	4639      	mov	r1, r7
 8007180:	f7f9 fa0e 	bl	80005a0 <__aeabi_dmul>
 8007184:	2200      	movs	r2, #0
 8007186:	4b4e      	ldr	r3, [pc, #312]	; (80072c0 <__kernel_cos+0x168>)
 8007188:	4604      	mov	r4, r0
 800718a:	460d      	mov	r5, r1
 800718c:	f7f9 fa08 	bl	80005a0 <__aeabi_dmul>
 8007190:	a33f      	add	r3, pc, #252	; (adr r3, 8007290 <__kernel_cos+0x138>)
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	4682      	mov	sl, r0
 8007198:	468b      	mov	fp, r1
 800719a:	4620      	mov	r0, r4
 800719c:	4629      	mov	r1, r5
 800719e:	f7f9 f9ff 	bl	80005a0 <__aeabi_dmul>
 80071a2:	a33d      	add	r3, pc, #244	; (adr r3, 8007298 <__kernel_cos+0x140>)
 80071a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a8:	f7f9 f844 	bl	8000234 <__adddf3>
 80071ac:	4622      	mov	r2, r4
 80071ae:	462b      	mov	r3, r5
 80071b0:	f7f9 f9f6 	bl	80005a0 <__aeabi_dmul>
 80071b4:	a33a      	add	r3, pc, #232	; (adr r3, 80072a0 <__kernel_cos+0x148>)
 80071b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ba:	f7f9 f839 	bl	8000230 <__aeabi_dsub>
 80071be:	4622      	mov	r2, r4
 80071c0:	462b      	mov	r3, r5
 80071c2:	f7f9 f9ed 	bl	80005a0 <__aeabi_dmul>
 80071c6:	a338      	add	r3, pc, #224	; (adr r3, 80072a8 <__kernel_cos+0x150>)
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f7f9 f832 	bl	8000234 <__adddf3>
 80071d0:	4622      	mov	r2, r4
 80071d2:	462b      	mov	r3, r5
 80071d4:	f7f9 f9e4 	bl	80005a0 <__aeabi_dmul>
 80071d8:	a335      	add	r3, pc, #212	; (adr r3, 80072b0 <__kernel_cos+0x158>)
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	f7f9 f827 	bl	8000230 <__aeabi_dsub>
 80071e2:	4622      	mov	r2, r4
 80071e4:	462b      	mov	r3, r5
 80071e6:	f7f9 f9db 	bl	80005a0 <__aeabi_dmul>
 80071ea:	a333      	add	r3, pc, #204	; (adr r3, 80072b8 <__kernel_cos+0x160>)
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f7f9 f820 	bl	8000234 <__adddf3>
 80071f4:	4622      	mov	r2, r4
 80071f6:	462b      	mov	r3, r5
 80071f8:	f7f9 f9d2 	bl	80005a0 <__aeabi_dmul>
 80071fc:	4622      	mov	r2, r4
 80071fe:	462b      	mov	r3, r5
 8007200:	f7f9 f9ce 	bl	80005a0 <__aeabi_dmul>
 8007204:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007208:	4604      	mov	r4, r0
 800720a:	460d      	mov	r5, r1
 800720c:	4640      	mov	r0, r8
 800720e:	4639      	mov	r1, r7
 8007210:	f7f9 f9c6 	bl	80005a0 <__aeabi_dmul>
 8007214:	460b      	mov	r3, r1
 8007216:	4602      	mov	r2, r0
 8007218:	4629      	mov	r1, r5
 800721a:	4620      	mov	r0, r4
 800721c:	f7f9 f808 	bl	8000230 <__aeabi_dsub>
 8007220:	4b28      	ldr	r3, [pc, #160]	; (80072c4 <__kernel_cos+0x16c>)
 8007222:	4680      	mov	r8, r0
 8007224:	429e      	cmp	r6, r3
 8007226:	4689      	mov	r9, r1
 8007228:	dc0e      	bgt.n	8007248 <__kernel_cos+0xf0>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4650      	mov	r0, sl
 8007230:	4659      	mov	r1, fp
 8007232:	f7f8 fffd 	bl	8000230 <__aeabi_dsub>
 8007236:	4602      	mov	r2, r0
 8007238:	2000      	movs	r0, #0
 800723a:	460b      	mov	r3, r1
 800723c:	4922      	ldr	r1, [pc, #136]	; (80072c8 <__kernel_cos+0x170>)
 800723e:	f7f8 fff7 	bl	8000230 <__aeabi_dsub>
 8007242:	b003      	add	sp, #12
 8007244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007248:	2400      	movs	r4, #0
 800724a:	4b20      	ldr	r3, [pc, #128]	; (80072cc <__kernel_cos+0x174>)
 800724c:	4622      	mov	r2, r4
 800724e:	429e      	cmp	r6, r3
 8007250:	bfcc      	ite	gt
 8007252:	4d1f      	ldrgt	r5, [pc, #124]	; (80072d0 <__kernel_cos+0x178>)
 8007254:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8007258:	462b      	mov	r3, r5
 800725a:	2000      	movs	r0, #0
 800725c:	491a      	ldr	r1, [pc, #104]	; (80072c8 <__kernel_cos+0x170>)
 800725e:	f7f8 ffe7 	bl	8000230 <__aeabi_dsub>
 8007262:	4622      	mov	r2, r4
 8007264:	4606      	mov	r6, r0
 8007266:	460f      	mov	r7, r1
 8007268:	462b      	mov	r3, r5
 800726a:	4650      	mov	r0, sl
 800726c:	4659      	mov	r1, fp
 800726e:	f7f8 ffdf 	bl	8000230 <__aeabi_dsub>
 8007272:	4642      	mov	r2, r8
 8007274:	464b      	mov	r3, r9
 8007276:	f7f8 ffdb 	bl	8000230 <__aeabi_dsub>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	4630      	mov	r0, r6
 8007280:	4639      	mov	r1, r7
 8007282:	e7dc      	b.n	800723e <__kernel_cos+0xe6>
 8007284:	2000      	movs	r0, #0
 8007286:	4910      	ldr	r1, [pc, #64]	; (80072c8 <__kernel_cos+0x170>)
 8007288:	e7db      	b.n	8007242 <__kernel_cos+0xea>
 800728a:	bf00      	nop
 800728c:	f3af 8000 	nop.w
 8007290:	be8838d4 	.word	0xbe8838d4
 8007294:	bda8fae9 	.word	0xbda8fae9
 8007298:	bdb4b1c4 	.word	0xbdb4b1c4
 800729c:	3e21ee9e 	.word	0x3e21ee9e
 80072a0:	809c52ad 	.word	0x809c52ad
 80072a4:	3e927e4f 	.word	0x3e927e4f
 80072a8:	19cb1590 	.word	0x19cb1590
 80072ac:	3efa01a0 	.word	0x3efa01a0
 80072b0:	16c15177 	.word	0x16c15177
 80072b4:	3f56c16c 	.word	0x3f56c16c
 80072b8:	5555554c 	.word	0x5555554c
 80072bc:	3fa55555 	.word	0x3fa55555
 80072c0:	3fe00000 	.word	0x3fe00000
 80072c4:	3fd33332 	.word	0x3fd33332
 80072c8:	3ff00000 	.word	0x3ff00000
 80072cc:	3fe90000 	.word	0x3fe90000
 80072d0:	3fd20000 	.word	0x3fd20000

080072d4 <__kernel_rem_pio2>:
 80072d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80072dc:	9308      	str	r3, [sp, #32]
 80072de:	9106      	str	r1, [sp, #24]
 80072e0:	4bb6      	ldr	r3, [pc, #728]	; (80075bc <__kernel_rem_pio2+0x2e8>)
 80072e2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80072e4:	f112 0f14 	cmn.w	r2, #20
 80072e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072ec:	bfa8      	it	ge
 80072ee:	1ed4      	subge	r4, r2, #3
 80072f0:	9302      	str	r3, [sp, #8]
 80072f2:	9b08      	ldr	r3, [sp, #32]
 80072f4:	bfb8      	it	lt
 80072f6:	2400      	movlt	r4, #0
 80072f8:	f103 33ff 	add.w	r3, r3, #4294967295
 80072fc:	9307      	str	r3, [sp, #28]
 80072fe:	bfa4      	itt	ge
 8007300:	2318      	movge	r3, #24
 8007302:	fb94 f4f3 	sdivge	r4, r4, r3
 8007306:	f06f 0317 	mvn.w	r3, #23
 800730a:	fb04 3303 	mla	r3, r4, r3, r3
 800730e:	eb03 0b02 	add.w	fp, r3, r2
 8007312:	9a07      	ldr	r2, [sp, #28]
 8007314:	9b02      	ldr	r3, [sp, #8]
 8007316:	1aa7      	subs	r7, r4, r2
 8007318:	eb03 0802 	add.w	r8, r3, r2
 800731c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800731e:	2500      	movs	r5, #0
 8007320:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007324:	2200      	movs	r2, #0
 8007326:	2300      	movs	r3, #0
 8007328:	9009      	str	r0, [sp, #36]	; 0x24
 800732a:	ae20      	add	r6, sp, #128	; 0x80
 800732c:	4545      	cmp	r5, r8
 800732e:	dd14      	ble.n	800735a <__kernel_rem_pio2+0x86>
 8007330:	f04f 0800 	mov.w	r8, #0
 8007334:	9a08      	ldr	r2, [sp, #32]
 8007336:	ab20      	add	r3, sp, #128	; 0x80
 8007338:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800733c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8007340:	9b02      	ldr	r3, [sp, #8]
 8007342:	4598      	cmp	r8, r3
 8007344:	dc35      	bgt.n	80073b2 <__kernel_rem_pio2+0xde>
 8007346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007348:	2200      	movs	r2, #0
 800734a:	f1a3 0908 	sub.w	r9, r3, #8
 800734e:	2300      	movs	r3, #0
 8007350:	462f      	mov	r7, r5
 8007352:	2600      	movs	r6, #0
 8007354:	e9cd 2300 	strd	r2, r3, [sp]
 8007358:	e01f      	b.n	800739a <__kernel_rem_pio2+0xc6>
 800735a:	42ef      	cmn	r7, r5
 800735c:	d40b      	bmi.n	8007376 <__kernel_rem_pio2+0xa2>
 800735e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007362:	e9cd 2300 	strd	r2, r3, [sp]
 8007366:	f7f9 f8b1 	bl	80004cc <__aeabi_i2d>
 800736a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800736e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007372:	3501      	adds	r5, #1
 8007374:	e7da      	b.n	800732c <__kernel_rem_pio2+0x58>
 8007376:	4610      	mov	r0, r2
 8007378:	4619      	mov	r1, r3
 800737a:	e7f8      	b.n	800736e <__kernel_rem_pio2+0x9a>
 800737c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007380:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8007384:	f7f9 f90c 	bl	80005a0 <__aeabi_dmul>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007390:	f7f8 ff50 	bl	8000234 <__adddf3>
 8007394:	e9cd 0100 	strd	r0, r1, [sp]
 8007398:	3601      	adds	r6, #1
 800739a:	9b07      	ldr	r3, [sp, #28]
 800739c:	3f08      	subs	r7, #8
 800739e:	429e      	cmp	r6, r3
 80073a0:	ddec      	ble.n	800737c <__kernel_rem_pio2+0xa8>
 80073a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073a6:	f108 0801 	add.w	r8, r8, #1
 80073aa:	e8ea 2302 	strd	r2, r3, [sl], #8
 80073ae:	3508      	adds	r5, #8
 80073b0:	e7c6      	b.n	8007340 <__kernel_rem_pio2+0x6c>
 80073b2:	9b02      	ldr	r3, [sp, #8]
 80073b4:	aa0c      	add	r2, sp, #48	; 0x30
 80073b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80073ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80073bc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80073be:	9e02      	ldr	r6, [sp, #8]
 80073c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80073c4:	930a      	str	r3, [sp, #40]	; 0x28
 80073c6:	ab98      	add	r3, sp, #608	; 0x260
 80073c8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80073cc:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80073d0:	ab70      	add	r3, sp, #448	; 0x1c0
 80073d2:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 80073d6:	46d0      	mov	r8, sl
 80073d8:	46b1      	mov	r9, r6
 80073da:	af0c      	add	r7, sp, #48	; 0x30
 80073dc:	9700      	str	r7, [sp, #0]
 80073de:	f1b9 0f00 	cmp.w	r9, #0
 80073e2:	f1a8 0808 	sub.w	r8, r8, #8
 80073e6:	dc71      	bgt.n	80074cc <__kernel_rem_pio2+0x1f8>
 80073e8:	465a      	mov	r2, fp
 80073ea:	4620      	mov	r0, r4
 80073ec:	4629      	mov	r1, r5
 80073ee:	f000 fdab 	bl	8007f48 <scalbn>
 80073f2:	2200      	movs	r2, #0
 80073f4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80073f8:	4604      	mov	r4, r0
 80073fa:	460d      	mov	r5, r1
 80073fc:	f7f9 f8d0 	bl	80005a0 <__aeabi_dmul>
 8007400:	f000 fd22 	bl	8007e48 <floor>
 8007404:	2200      	movs	r2, #0
 8007406:	4b6e      	ldr	r3, [pc, #440]	; (80075c0 <__kernel_rem_pio2+0x2ec>)
 8007408:	f7f9 f8ca 	bl	80005a0 <__aeabi_dmul>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	4620      	mov	r0, r4
 8007412:	4629      	mov	r1, r5
 8007414:	f7f8 ff0c 	bl	8000230 <__aeabi_dsub>
 8007418:	460d      	mov	r5, r1
 800741a:	4604      	mov	r4, r0
 800741c:	f7f9 fb70 	bl	8000b00 <__aeabi_d2iz>
 8007420:	9004      	str	r0, [sp, #16]
 8007422:	f7f9 f853 	bl	80004cc <__aeabi_i2d>
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	4620      	mov	r0, r4
 800742c:	4629      	mov	r1, r5
 800742e:	f7f8 feff 	bl	8000230 <__aeabi_dsub>
 8007432:	f1bb 0f00 	cmp.w	fp, #0
 8007436:	4680      	mov	r8, r0
 8007438:	4689      	mov	r9, r1
 800743a:	dd70      	ble.n	800751e <__kernel_rem_pio2+0x24a>
 800743c:	1e72      	subs	r2, r6, #1
 800743e:	ab0c      	add	r3, sp, #48	; 0x30
 8007440:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007444:	9c04      	ldr	r4, [sp, #16]
 8007446:	f1cb 0118 	rsb	r1, fp, #24
 800744a:	fa40 f301 	asr.w	r3, r0, r1
 800744e:	441c      	add	r4, r3
 8007450:	408b      	lsls	r3, r1
 8007452:	1ac0      	subs	r0, r0, r3
 8007454:	ab0c      	add	r3, sp, #48	; 0x30
 8007456:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800745a:	f1cb 0317 	rsb	r3, fp, #23
 800745e:	9404      	str	r4, [sp, #16]
 8007460:	fa40 f303 	asr.w	r3, r0, r3
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	9b00      	ldr	r3, [sp, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	dd66      	ble.n	800753a <__kernel_rem_pio2+0x266>
 800746c:	2200      	movs	r2, #0
 800746e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007472:	4614      	mov	r4, r2
 8007474:	9b04      	ldr	r3, [sp, #16]
 8007476:	3301      	adds	r3, #1
 8007478:	9304      	str	r3, [sp, #16]
 800747a:	4296      	cmp	r6, r2
 800747c:	f300 80ac 	bgt.w	80075d8 <__kernel_rem_pio2+0x304>
 8007480:	f1bb 0f00 	cmp.w	fp, #0
 8007484:	dd07      	ble.n	8007496 <__kernel_rem_pio2+0x1c2>
 8007486:	f1bb 0f01 	cmp.w	fp, #1
 800748a:	f000 80b4 	beq.w	80075f6 <__kernel_rem_pio2+0x322>
 800748e:	f1bb 0f02 	cmp.w	fp, #2
 8007492:	f000 80ba 	beq.w	800760a <__kernel_rem_pio2+0x336>
 8007496:	9b00      	ldr	r3, [sp, #0]
 8007498:	2b02      	cmp	r3, #2
 800749a:	d14e      	bne.n	800753a <__kernel_rem_pio2+0x266>
 800749c:	4642      	mov	r2, r8
 800749e:	464b      	mov	r3, r9
 80074a0:	2000      	movs	r0, #0
 80074a2:	4948      	ldr	r1, [pc, #288]	; (80075c4 <__kernel_rem_pio2+0x2f0>)
 80074a4:	f7f8 fec4 	bl	8000230 <__aeabi_dsub>
 80074a8:	4680      	mov	r8, r0
 80074aa:	4689      	mov	r9, r1
 80074ac:	2c00      	cmp	r4, #0
 80074ae:	d044      	beq.n	800753a <__kernel_rem_pio2+0x266>
 80074b0:	465a      	mov	r2, fp
 80074b2:	2000      	movs	r0, #0
 80074b4:	4943      	ldr	r1, [pc, #268]	; (80075c4 <__kernel_rem_pio2+0x2f0>)
 80074b6:	f000 fd47 	bl	8007f48 <scalbn>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	4640      	mov	r0, r8
 80074c0:	4649      	mov	r1, r9
 80074c2:	f7f8 feb5 	bl	8000230 <__aeabi_dsub>
 80074c6:	4680      	mov	r8, r0
 80074c8:	4689      	mov	r9, r1
 80074ca:	e036      	b.n	800753a <__kernel_rem_pio2+0x266>
 80074cc:	2200      	movs	r2, #0
 80074ce:	4b3e      	ldr	r3, [pc, #248]	; (80075c8 <__kernel_rem_pio2+0x2f4>)
 80074d0:	4620      	mov	r0, r4
 80074d2:	4629      	mov	r1, r5
 80074d4:	f7f9 f864 	bl	80005a0 <__aeabi_dmul>
 80074d8:	f7f9 fb12 	bl	8000b00 <__aeabi_d2iz>
 80074dc:	f7f8 fff6 	bl	80004cc <__aeabi_i2d>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074e8:	2200      	movs	r2, #0
 80074ea:	4b38      	ldr	r3, [pc, #224]	; (80075cc <__kernel_rem_pio2+0x2f8>)
 80074ec:	f7f9 f858 	bl	80005a0 <__aeabi_dmul>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4620      	mov	r0, r4
 80074f6:	4629      	mov	r1, r5
 80074f8:	f7f8 fe9a 	bl	8000230 <__aeabi_dsub>
 80074fc:	f7f9 fb00 	bl	8000b00 <__aeabi_d2iz>
 8007500:	9b00      	ldr	r3, [sp, #0]
 8007502:	f109 39ff 	add.w	r9, r9, #4294967295
 8007506:	f843 0b04 	str.w	r0, [r3], #4
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007510:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007514:	f7f8 fe8e 	bl	8000234 <__adddf3>
 8007518:	4604      	mov	r4, r0
 800751a:	460d      	mov	r5, r1
 800751c:	e75f      	b.n	80073de <__kernel_rem_pio2+0x10a>
 800751e:	d105      	bne.n	800752c <__kernel_rem_pio2+0x258>
 8007520:	1e73      	subs	r3, r6, #1
 8007522:	aa0c      	add	r2, sp, #48	; 0x30
 8007524:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007528:	15c3      	asrs	r3, r0, #23
 800752a:	e79b      	b.n	8007464 <__kernel_rem_pio2+0x190>
 800752c:	2200      	movs	r2, #0
 800752e:	4b28      	ldr	r3, [pc, #160]	; (80075d0 <__kernel_rem_pio2+0x2fc>)
 8007530:	f7f9 fabc 	bl	8000aac <__aeabi_dcmpge>
 8007534:	2800      	cmp	r0, #0
 8007536:	d13e      	bne.n	80075b6 <__kernel_rem_pio2+0x2e2>
 8007538:	9000      	str	r0, [sp, #0]
 800753a:	2200      	movs	r2, #0
 800753c:	2300      	movs	r3, #0
 800753e:	4640      	mov	r0, r8
 8007540:	4649      	mov	r1, r9
 8007542:	f7f9 fa95 	bl	8000a70 <__aeabi_dcmpeq>
 8007546:	2800      	cmp	r0, #0
 8007548:	f000 80b1 	beq.w	80076ae <__kernel_rem_pio2+0x3da>
 800754c:	1e74      	subs	r4, r6, #1
 800754e:	4623      	mov	r3, r4
 8007550:	2200      	movs	r2, #0
 8007552:	9902      	ldr	r1, [sp, #8]
 8007554:	428b      	cmp	r3, r1
 8007556:	da5f      	bge.n	8007618 <__kernel_rem_pio2+0x344>
 8007558:	2a00      	cmp	r2, #0
 800755a:	d074      	beq.n	8007646 <__kernel_rem_pio2+0x372>
 800755c:	ab0c      	add	r3, sp, #48	; 0x30
 800755e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007562:	f1ab 0b18 	sub.w	fp, fp, #24
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 809f 	beq.w	80076aa <__kernel_rem_pio2+0x3d6>
 800756c:	465a      	mov	r2, fp
 800756e:	2000      	movs	r0, #0
 8007570:	4914      	ldr	r1, [pc, #80]	; (80075c4 <__kernel_rem_pio2+0x2f0>)
 8007572:	f000 fce9 	bl	8007f48 <scalbn>
 8007576:	46a2      	mov	sl, r4
 8007578:	4606      	mov	r6, r0
 800757a:	460f      	mov	r7, r1
 800757c:	f04f 0800 	mov.w	r8, #0
 8007580:	ab70      	add	r3, sp, #448	; 0x1c0
 8007582:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80075c8 <__kernel_rem_pio2+0x2f4>
 8007586:	00e5      	lsls	r5, r4, #3
 8007588:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800758c:	f1ba 0f00 	cmp.w	sl, #0
 8007590:	f280 80c3 	bge.w	800771a <__kernel_rem_pio2+0x446>
 8007594:	4626      	mov	r6, r4
 8007596:	2e00      	cmp	r6, #0
 8007598:	f2c0 80f5 	blt.w	8007786 <__kernel_rem_pio2+0x4b2>
 800759c:	4b0d      	ldr	r3, [pc, #52]	; (80075d4 <__kernel_rem_pio2+0x300>)
 800759e:	f04f 0a00 	mov.w	sl, #0
 80075a2:	9307      	str	r3, [sp, #28]
 80075a4:	ab70      	add	r3, sp, #448	; 0x1c0
 80075a6:	f04f 0b00 	mov.w	fp, #0
 80075aa:	f04f 0800 	mov.w	r8, #0
 80075ae:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80075b2:	1ba7      	subs	r7, r4, r6
 80075b4:	e0db      	b.n	800776e <__kernel_rem_pio2+0x49a>
 80075b6:	2302      	movs	r3, #2
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	e757      	b.n	800746c <__kernel_rem_pio2+0x198>
 80075bc:	080082c0 	.word	0x080082c0
 80075c0:	40200000 	.word	0x40200000
 80075c4:	3ff00000 	.word	0x3ff00000
 80075c8:	3e700000 	.word	0x3e700000
 80075cc:	41700000 	.word	0x41700000
 80075d0:	3fe00000 	.word	0x3fe00000
 80075d4:	08008280 	.word	0x08008280
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	b944      	cbnz	r4, 80075ee <__kernel_rem_pio2+0x31a>
 80075dc:	b11b      	cbz	r3, 80075e6 <__kernel_rem_pio2+0x312>
 80075de:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80075e2:	603b      	str	r3, [r7, #0]
 80075e4:	2301      	movs	r3, #1
 80075e6:	461c      	mov	r4, r3
 80075e8:	3201      	adds	r2, #1
 80075ea:	3704      	adds	r7, #4
 80075ec:	e745      	b.n	800747a <__kernel_rem_pio2+0x1a6>
 80075ee:	1acb      	subs	r3, r1, r3
 80075f0:	603b      	str	r3, [r7, #0]
 80075f2:	4623      	mov	r3, r4
 80075f4:	e7f7      	b.n	80075e6 <__kernel_rem_pio2+0x312>
 80075f6:	1e72      	subs	r2, r6, #1
 80075f8:	ab0c      	add	r3, sp, #48	; 0x30
 80075fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007602:	a90c      	add	r1, sp, #48	; 0x30
 8007604:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007608:	e745      	b.n	8007496 <__kernel_rem_pio2+0x1c2>
 800760a:	1e72      	subs	r2, r6, #1
 800760c:	ab0c      	add	r3, sp, #48	; 0x30
 800760e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007612:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007616:	e7f4      	b.n	8007602 <__kernel_rem_pio2+0x32e>
 8007618:	a90c      	add	r1, sp, #48	; 0x30
 800761a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800761e:	3b01      	subs	r3, #1
 8007620:	430a      	orrs	r2, r1
 8007622:	e796      	b.n	8007552 <__kernel_rem_pio2+0x27e>
 8007624:	3401      	adds	r4, #1
 8007626:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800762a:	2a00      	cmp	r2, #0
 800762c:	d0fa      	beq.n	8007624 <__kernel_rem_pio2+0x350>
 800762e:	9b08      	ldr	r3, [sp, #32]
 8007630:	f106 0801 	add.w	r8, r6, #1
 8007634:	18f5      	adds	r5, r6, r3
 8007636:	ab20      	add	r3, sp, #128	; 0x80
 8007638:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800763c:	4434      	add	r4, r6
 800763e:	4544      	cmp	r4, r8
 8007640:	da04      	bge.n	800764c <__kernel_rem_pio2+0x378>
 8007642:	4626      	mov	r6, r4
 8007644:	e6bf      	b.n	80073c6 <__kernel_rem_pio2+0xf2>
 8007646:	2401      	movs	r4, #1
 8007648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800764a:	e7ec      	b.n	8007626 <__kernel_rem_pio2+0x352>
 800764c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800764e:	f04f 0900 	mov.w	r9, #0
 8007652:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007656:	f7f8 ff39 	bl	80004cc <__aeabi_i2d>
 800765a:	2600      	movs	r6, #0
 800765c:	2700      	movs	r7, #0
 800765e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007660:	e9c5 0100 	strd	r0, r1, [r5]
 8007664:	3b08      	subs	r3, #8
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	9504      	str	r5, [sp, #16]
 800766a:	9b07      	ldr	r3, [sp, #28]
 800766c:	4599      	cmp	r9, r3
 800766e:	dd05      	ble.n	800767c <__kernel_rem_pio2+0x3a8>
 8007670:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8007674:	f108 0801 	add.w	r8, r8, #1
 8007678:	3508      	adds	r5, #8
 800767a:	e7e0      	b.n	800763e <__kernel_rem_pio2+0x36a>
 800767c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007680:	9900      	ldr	r1, [sp, #0]
 8007682:	f109 0901 	add.w	r9, r9, #1
 8007686:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800768a:	9100      	str	r1, [sp, #0]
 800768c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8007690:	f8cd c010 	str.w	ip, [sp, #16]
 8007694:	f7f8 ff84 	bl	80005a0 <__aeabi_dmul>
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	4630      	mov	r0, r6
 800769e:	4639      	mov	r1, r7
 80076a0:	f7f8 fdc8 	bl	8000234 <__adddf3>
 80076a4:	4606      	mov	r6, r0
 80076a6:	460f      	mov	r7, r1
 80076a8:	e7df      	b.n	800766a <__kernel_rem_pio2+0x396>
 80076aa:	3c01      	subs	r4, #1
 80076ac:	e756      	b.n	800755c <__kernel_rem_pio2+0x288>
 80076ae:	f1cb 0200 	rsb	r2, fp, #0
 80076b2:	4640      	mov	r0, r8
 80076b4:	4649      	mov	r1, r9
 80076b6:	f000 fc47 	bl	8007f48 <scalbn>
 80076ba:	2200      	movs	r2, #0
 80076bc:	4ba4      	ldr	r3, [pc, #656]	; (8007950 <__kernel_rem_pio2+0x67c>)
 80076be:	4604      	mov	r4, r0
 80076c0:	460d      	mov	r5, r1
 80076c2:	f7f9 f9f3 	bl	8000aac <__aeabi_dcmpge>
 80076c6:	b1f8      	cbz	r0, 8007708 <__kernel_rem_pio2+0x434>
 80076c8:	2200      	movs	r2, #0
 80076ca:	4ba2      	ldr	r3, [pc, #648]	; (8007954 <__kernel_rem_pio2+0x680>)
 80076cc:	4620      	mov	r0, r4
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7f8 ff66 	bl	80005a0 <__aeabi_dmul>
 80076d4:	f7f9 fa14 	bl	8000b00 <__aeabi_d2iz>
 80076d8:	4607      	mov	r7, r0
 80076da:	f7f8 fef7 	bl	80004cc <__aeabi_i2d>
 80076de:	2200      	movs	r2, #0
 80076e0:	4b9b      	ldr	r3, [pc, #620]	; (8007950 <__kernel_rem_pio2+0x67c>)
 80076e2:	f7f8 ff5d 	bl	80005a0 <__aeabi_dmul>
 80076e6:	460b      	mov	r3, r1
 80076e8:	4602      	mov	r2, r0
 80076ea:	4629      	mov	r1, r5
 80076ec:	4620      	mov	r0, r4
 80076ee:	f7f8 fd9f 	bl	8000230 <__aeabi_dsub>
 80076f2:	f7f9 fa05 	bl	8000b00 <__aeabi_d2iz>
 80076f6:	1c74      	adds	r4, r6, #1
 80076f8:	ab0c      	add	r3, sp, #48	; 0x30
 80076fa:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80076fe:	f10b 0b18 	add.w	fp, fp, #24
 8007702:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8007706:	e731      	b.n	800756c <__kernel_rem_pio2+0x298>
 8007708:	4620      	mov	r0, r4
 800770a:	4629      	mov	r1, r5
 800770c:	f7f9 f9f8 	bl	8000b00 <__aeabi_d2iz>
 8007710:	ab0c      	add	r3, sp, #48	; 0x30
 8007712:	4634      	mov	r4, r6
 8007714:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007718:	e728      	b.n	800756c <__kernel_rem_pio2+0x298>
 800771a:	ab0c      	add	r3, sp, #48	; 0x30
 800771c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007720:	f7f8 fed4 	bl	80004cc <__aeabi_i2d>
 8007724:	4632      	mov	r2, r6
 8007726:	463b      	mov	r3, r7
 8007728:	f7f8 ff3a 	bl	80005a0 <__aeabi_dmul>
 800772c:	4642      	mov	r2, r8
 800772e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8007732:	464b      	mov	r3, r9
 8007734:	4630      	mov	r0, r6
 8007736:	4639      	mov	r1, r7
 8007738:	f7f8 ff32 	bl	80005a0 <__aeabi_dmul>
 800773c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007740:	4606      	mov	r6, r0
 8007742:	460f      	mov	r7, r1
 8007744:	e722      	b.n	800758c <__kernel_rem_pio2+0x2b8>
 8007746:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800774a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800774e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8007752:	f8cd c01c 	str.w	ip, [sp, #28]
 8007756:	f7f8 ff23 	bl	80005a0 <__aeabi_dmul>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4650      	mov	r0, sl
 8007760:	4659      	mov	r1, fp
 8007762:	f7f8 fd67 	bl	8000234 <__adddf3>
 8007766:	4682      	mov	sl, r0
 8007768:	468b      	mov	fp, r1
 800776a:	f108 0801 	add.w	r8, r8, #1
 800776e:	9b02      	ldr	r3, [sp, #8]
 8007770:	4598      	cmp	r8, r3
 8007772:	dc01      	bgt.n	8007778 <__kernel_rem_pio2+0x4a4>
 8007774:	45b8      	cmp	r8, r7
 8007776:	dde6      	ble.n	8007746 <__kernel_rem_pio2+0x472>
 8007778:	ab48      	add	r3, sp, #288	; 0x120
 800777a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800777e:	e9c7 ab00 	strd	sl, fp, [r7]
 8007782:	3e01      	subs	r6, #1
 8007784:	e707      	b.n	8007596 <__kernel_rem_pio2+0x2c2>
 8007786:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007788:	2b02      	cmp	r3, #2
 800778a:	dc09      	bgt.n	80077a0 <__kernel_rem_pio2+0x4cc>
 800778c:	2b00      	cmp	r3, #0
 800778e:	dc32      	bgt.n	80077f6 <__kernel_rem_pio2+0x522>
 8007790:	d05a      	beq.n	8007848 <__kernel_rem_pio2+0x574>
 8007792:	9b04      	ldr	r3, [sp, #16]
 8007794:	f003 0007 	and.w	r0, r3, #7
 8007798:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800779c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	d1f5      	bne.n	8007792 <__kernel_rem_pio2+0x4be>
 80077a6:	ab48      	add	r3, sp, #288	; 0x120
 80077a8:	441d      	add	r5, r3
 80077aa:	46aa      	mov	sl, r5
 80077ac:	46a3      	mov	fp, r4
 80077ae:	f1bb 0f00 	cmp.w	fp, #0
 80077b2:	dc76      	bgt.n	80078a2 <__kernel_rem_pio2+0x5ce>
 80077b4:	46aa      	mov	sl, r5
 80077b6:	46a3      	mov	fp, r4
 80077b8:	f1bb 0f01 	cmp.w	fp, #1
 80077bc:	f300 8090 	bgt.w	80078e0 <__kernel_rem_pio2+0x60c>
 80077c0:	2700      	movs	r7, #0
 80077c2:	463e      	mov	r6, r7
 80077c4:	2c01      	cmp	r4, #1
 80077c6:	f300 80aa 	bgt.w	800791e <__kernel_rem_pio2+0x64a>
 80077ca:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80077ce:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80077d2:	9b00      	ldr	r3, [sp, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f040 80ac 	bne.w	8007932 <__kernel_rem_pio2+0x65e>
 80077da:	4603      	mov	r3, r0
 80077dc:	462a      	mov	r2, r5
 80077de:	9806      	ldr	r0, [sp, #24]
 80077e0:	e9c0 2300 	strd	r2, r3, [r0]
 80077e4:	4622      	mov	r2, r4
 80077e6:	460b      	mov	r3, r1
 80077e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80077ec:	463a      	mov	r2, r7
 80077ee:	4633      	mov	r3, r6
 80077f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80077f4:	e7cd      	b.n	8007792 <__kernel_rem_pio2+0x4be>
 80077f6:	2000      	movs	r0, #0
 80077f8:	46a0      	mov	r8, r4
 80077fa:	4601      	mov	r1, r0
 80077fc:	ab48      	add	r3, sp, #288	; 0x120
 80077fe:	441d      	add	r5, r3
 8007800:	f1b8 0f00 	cmp.w	r8, #0
 8007804:	da3a      	bge.n	800787c <__kernel_rem_pio2+0x5a8>
 8007806:	9b00      	ldr	r3, [sp, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d03e      	beq.n	800788a <__kernel_rem_pio2+0x5b6>
 800780c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8007810:	4602      	mov	r2, r0
 8007812:	462b      	mov	r3, r5
 8007814:	9d06      	ldr	r5, [sp, #24]
 8007816:	2601      	movs	r6, #1
 8007818:	e9c5 2300 	strd	r2, r3, [r5]
 800781c:	460b      	mov	r3, r1
 800781e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007822:	f7f8 fd05 	bl	8000230 <__aeabi_dsub>
 8007826:	4684      	mov	ip, r0
 8007828:	460f      	mov	r7, r1
 800782a:	ad48      	add	r5, sp, #288	; 0x120
 800782c:	42b4      	cmp	r4, r6
 800782e:	f105 0508 	add.w	r5, r5, #8
 8007832:	da2c      	bge.n	800788e <__kernel_rem_pio2+0x5ba>
 8007834:	9b00      	ldr	r3, [sp, #0]
 8007836:	b10b      	cbz	r3, 800783c <__kernel_rem_pio2+0x568>
 8007838:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800783c:	4662      	mov	r2, ip
 800783e:	463b      	mov	r3, r7
 8007840:	9906      	ldr	r1, [sp, #24]
 8007842:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007846:	e7a4      	b.n	8007792 <__kernel_rem_pio2+0x4be>
 8007848:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800784a:	ab48      	add	r3, sp, #288	; 0x120
 800784c:	4637      	mov	r7, r6
 800784e:	441d      	add	r5, r3
 8007850:	2c00      	cmp	r4, #0
 8007852:	da09      	bge.n	8007868 <__kernel_rem_pio2+0x594>
 8007854:	9b00      	ldr	r3, [sp, #0]
 8007856:	b10b      	cbz	r3, 800785c <__kernel_rem_pio2+0x588>
 8007858:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800785c:	4632      	mov	r2, r6
 800785e:	463b      	mov	r3, r7
 8007860:	9906      	ldr	r1, [sp, #24]
 8007862:	e9c1 2300 	strd	r2, r3, [r1]
 8007866:	e794      	b.n	8007792 <__kernel_rem_pio2+0x4be>
 8007868:	4630      	mov	r0, r6
 800786a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800786e:	4639      	mov	r1, r7
 8007870:	f7f8 fce0 	bl	8000234 <__adddf3>
 8007874:	3c01      	subs	r4, #1
 8007876:	4606      	mov	r6, r0
 8007878:	460f      	mov	r7, r1
 800787a:	e7e9      	b.n	8007850 <__kernel_rem_pio2+0x57c>
 800787c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007880:	f7f8 fcd8 	bl	8000234 <__adddf3>
 8007884:	f108 38ff 	add.w	r8, r8, #4294967295
 8007888:	e7ba      	b.n	8007800 <__kernel_rem_pio2+0x52c>
 800788a:	460d      	mov	r5, r1
 800788c:	e7c0      	b.n	8007810 <__kernel_rem_pio2+0x53c>
 800788e:	4660      	mov	r0, ip
 8007890:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007894:	4639      	mov	r1, r7
 8007896:	f7f8 fccd 	bl	8000234 <__adddf3>
 800789a:	3601      	adds	r6, #1
 800789c:	4684      	mov	ip, r0
 800789e:	460f      	mov	r7, r1
 80078a0:	e7c4      	b.n	800782c <__kernel_rem_pio2+0x558>
 80078a2:	e9da 6700 	ldrd	r6, r7, [sl]
 80078a6:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80078aa:	4632      	mov	r2, r6
 80078ac:	463b      	mov	r3, r7
 80078ae:	4640      	mov	r0, r8
 80078b0:	4649      	mov	r1, r9
 80078b2:	f7f8 fcbf 	bl	8000234 <__adddf3>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078be:	4640      	mov	r0, r8
 80078c0:	4649      	mov	r1, r9
 80078c2:	f7f8 fcb5 	bl	8000230 <__aeabi_dsub>
 80078c6:	4632      	mov	r2, r6
 80078c8:	463b      	mov	r3, r7
 80078ca:	f7f8 fcb3 	bl	8000234 <__adddf3>
 80078ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078d2:	e86a 0102 	strd	r0, r1, [sl], #-8
 80078d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078da:	e9ca 2300 	strd	r2, r3, [sl]
 80078de:	e766      	b.n	80077ae <__kernel_rem_pio2+0x4da>
 80078e0:	e9da 8900 	ldrd	r8, r9, [sl]
 80078e4:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80078e8:	4642      	mov	r2, r8
 80078ea:	464b      	mov	r3, r9
 80078ec:	4630      	mov	r0, r6
 80078ee:	4639      	mov	r1, r7
 80078f0:	f7f8 fca0 	bl	8000234 <__adddf3>
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078fc:	4630      	mov	r0, r6
 80078fe:	4639      	mov	r1, r7
 8007900:	f7f8 fc96 	bl	8000230 <__aeabi_dsub>
 8007904:	4642      	mov	r2, r8
 8007906:	464b      	mov	r3, r9
 8007908:	f7f8 fc94 	bl	8000234 <__adddf3>
 800790c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007910:	e86a 0102 	strd	r0, r1, [sl], #-8
 8007914:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007918:	e9ca 2300 	strd	r2, r3, [sl]
 800791c:	e74c      	b.n	80077b8 <__kernel_rem_pio2+0x4e4>
 800791e:	4638      	mov	r0, r7
 8007920:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007924:	4631      	mov	r1, r6
 8007926:	f7f8 fc85 	bl	8000234 <__adddf3>
 800792a:	3c01      	subs	r4, #1
 800792c:	4607      	mov	r7, r0
 800792e:	460e      	mov	r6, r1
 8007930:	e748      	b.n	80077c4 <__kernel_rem_pio2+0x4f0>
 8007932:	9b06      	ldr	r3, [sp, #24]
 8007934:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007938:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800793c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8007940:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8007944:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8007948:	601d      	str	r5, [r3, #0]
 800794a:	615e      	str	r6, [r3, #20]
 800794c:	e721      	b.n	8007792 <__kernel_rem_pio2+0x4be>
 800794e:	bf00      	nop
 8007950:	41700000 	.word	0x41700000
 8007954:	3e700000 	.word	0x3e700000

08007958 <__kernel_sin>:
 8007958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800795c:	b086      	sub	sp, #24
 800795e:	e9cd 2300 	strd	r2, r3, [sp]
 8007962:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007966:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800796a:	4682      	mov	sl, r0
 800796c:	460c      	mov	r4, r1
 800796e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007970:	da03      	bge.n	800797a <__kernel_sin+0x22>
 8007972:	f7f9 f8c5 	bl	8000b00 <__aeabi_d2iz>
 8007976:	2800      	cmp	r0, #0
 8007978:	d050      	beq.n	8007a1c <__kernel_sin+0xc4>
 800797a:	4652      	mov	r2, sl
 800797c:	4623      	mov	r3, r4
 800797e:	4650      	mov	r0, sl
 8007980:	4621      	mov	r1, r4
 8007982:	f7f8 fe0d 	bl	80005a0 <__aeabi_dmul>
 8007986:	4606      	mov	r6, r0
 8007988:	460f      	mov	r7, r1
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	4650      	mov	r0, sl
 8007990:	4621      	mov	r1, r4
 8007992:	f7f8 fe05 	bl	80005a0 <__aeabi_dmul>
 8007996:	a33e      	add	r3, pc, #248	; (adr r3, 8007a90 <__kernel_sin+0x138>)
 8007998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799c:	4680      	mov	r8, r0
 800799e:	4689      	mov	r9, r1
 80079a0:	4630      	mov	r0, r6
 80079a2:	4639      	mov	r1, r7
 80079a4:	f7f8 fdfc 	bl	80005a0 <__aeabi_dmul>
 80079a8:	a33b      	add	r3, pc, #236	; (adr r3, 8007a98 <__kernel_sin+0x140>)
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	f7f8 fc3f 	bl	8000230 <__aeabi_dsub>
 80079b2:	4632      	mov	r2, r6
 80079b4:	463b      	mov	r3, r7
 80079b6:	f7f8 fdf3 	bl	80005a0 <__aeabi_dmul>
 80079ba:	a339      	add	r3, pc, #228	; (adr r3, 8007aa0 <__kernel_sin+0x148>)
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	f7f8 fc38 	bl	8000234 <__adddf3>
 80079c4:	4632      	mov	r2, r6
 80079c6:	463b      	mov	r3, r7
 80079c8:	f7f8 fdea 	bl	80005a0 <__aeabi_dmul>
 80079cc:	a336      	add	r3, pc, #216	; (adr r3, 8007aa8 <__kernel_sin+0x150>)
 80079ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d2:	f7f8 fc2d 	bl	8000230 <__aeabi_dsub>
 80079d6:	4632      	mov	r2, r6
 80079d8:	463b      	mov	r3, r7
 80079da:	f7f8 fde1 	bl	80005a0 <__aeabi_dmul>
 80079de:	a334      	add	r3, pc, #208	; (adr r3, 8007ab0 <__kernel_sin+0x158>)
 80079e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e4:	f7f8 fc26 	bl	8000234 <__adddf3>
 80079e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079ec:	b9dd      	cbnz	r5, 8007a26 <__kernel_sin+0xce>
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	4630      	mov	r0, r6
 80079f4:	4639      	mov	r1, r7
 80079f6:	f7f8 fdd3 	bl	80005a0 <__aeabi_dmul>
 80079fa:	a32f      	add	r3, pc, #188	; (adr r3, 8007ab8 <__kernel_sin+0x160>)
 80079fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a00:	f7f8 fc16 	bl	8000230 <__aeabi_dsub>
 8007a04:	4642      	mov	r2, r8
 8007a06:	464b      	mov	r3, r9
 8007a08:	f7f8 fdca 	bl	80005a0 <__aeabi_dmul>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4650      	mov	r0, sl
 8007a12:	4621      	mov	r1, r4
 8007a14:	f7f8 fc0e 	bl	8000234 <__adddf3>
 8007a18:	4682      	mov	sl, r0
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	4650      	mov	r0, sl
 8007a1e:	4621      	mov	r1, r4
 8007a20:	b006      	add	sp, #24
 8007a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a26:	2200      	movs	r2, #0
 8007a28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a2c:	4b24      	ldr	r3, [pc, #144]	; (8007ac0 <__kernel_sin+0x168>)
 8007a2e:	f7f8 fdb7 	bl	80005a0 <__aeabi_dmul>
 8007a32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a3a:	4640      	mov	r0, r8
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	f7f8 fdaf 	bl	80005a0 <__aeabi_dmul>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a4a:	f7f8 fbf1 	bl	8000230 <__aeabi_dsub>
 8007a4e:	4632      	mov	r2, r6
 8007a50:	463b      	mov	r3, r7
 8007a52:	f7f8 fda5 	bl	80005a0 <__aeabi_dmul>
 8007a56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a5a:	f7f8 fbe9 	bl	8000230 <__aeabi_dsub>
 8007a5e:	a316      	add	r3, pc, #88	; (adr r3, 8007ab8 <__kernel_sin+0x160>)
 8007a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a64:	4606      	mov	r6, r0
 8007a66:	460f      	mov	r7, r1
 8007a68:	4640      	mov	r0, r8
 8007a6a:	4649      	mov	r1, r9
 8007a6c:	f7f8 fd98 	bl	80005a0 <__aeabi_dmul>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	4630      	mov	r0, r6
 8007a76:	4639      	mov	r1, r7
 8007a78:	f7f8 fbdc 	bl	8000234 <__adddf3>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4650      	mov	r0, sl
 8007a82:	4621      	mov	r1, r4
 8007a84:	f7f8 fbd4 	bl	8000230 <__aeabi_dsub>
 8007a88:	e7c6      	b.n	8007a18 <__kernel_sin+0xc0>
 8007a8a:	bf00      	nop
 8007a8c:	f3af 8000 	nop.w
 8007a90:	5acfd57c 	.word	0x5acfd57c
 8007a94:	3de5d93a 	.word	0x3de5d93a
 8007a98:	8a2b9ceb 	.word	0x8a2b9ceb
 8007a9c:	3e5ae5e6 	.word	0x3e5ae5e6
 8007aa0:	57b1fe7d 	.word	0x57b1fe7d
 8007aa4:	3ec71de3 	.word	0x3ec71de3
 8007aa8:	19c161d5 	.word	0x19c161d5
 8007aac:	3f2a01a0 	.word	0x3f2a01a0
 8007ab0:	1110f8a6 	.word	0x1110f8a6
 8007ab4:	3f811111 	.word	0x3f811111
 8007ab8:	55555549 	.word	0x55555549
 8007abc:	3fc55555 	.word	0x3fc55555
 8007ac0:	3fe00000 	.word	0x3fe00000

08007ac4 <with_errno>:
 8007ac4:	b570      	push	{r4, r5, r6, lr}
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	460d      	mov	r5, r1
 8007aca:	4616      	mov	r6, r2
 8007acc:	f7fe f964 	bl	8005d98 <__errno>
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	6006      	str	r6, [r0, #0]
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}

08007ad8 <xflow>:
 8007ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ada:	4615      	mov	r5, r2
 8007adc:	461c      	mov	r4, r3
 8007ade:	b180      	cbz	r0, 8007b02 <xflow+0x2a>
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007ae6:	e9cd 0100 	strd	r0, r1, [sp]
 8007aea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007aee:	4628      	mov	r0, r5
 8007af0:	4621      	mov	r1, r4
 8007af2:	f7f8 fd55 	bl	80005a0 <__aeabi_dmul>
 8007af6:	2222      	movs	r2, #34	; 0x22
 8007af8:	b003      	add	sp, #12
 8007afa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007afe:	f7ff bfe1 	b.w	8007ac4 <with_errno>
 8007b02:	4610      	mov	r0, r2
 8007b04:	4619      	mov	r1, r3
 8007b06:	e7ee      	b.n	8007ae6 <xflow+0xe>

08007b08 <__math_uflow>:
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b0e:	f7ff bfe3 	b.w	8007ad8 <xflow>

08007b12 <__math_oflow>:
 8007b12:	2200      	movs	r2, #0
 8007b14:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007b18:	f7ff bfde 	b.w	8007ad8 <xflow>
 8007b1c:	0000      	movs	r0, r0
	...

08007b20 <atan>:
 8007b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	4bb6      	ldr	r3, [pc, #728]	; (8007e00 <atan+0x2e0>)
 8007b26:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007b2a:	429e      	cmp	r6, r3
 8007b2c:	4604      	mov	r4, r0
 8007b2e:	460d      	mov	r5, r1
 8007b30:	468b      	mov	fp, r1
 8007b32:	dd17      	ble.n	8007b64 <atan+0x44>
 8007b34:	4bb3      	ldr	r3, [pc, #716]	; (8007e04 <atan+0x2e4>)
 8007b36:	429e      	cmp	r6, r3
 8007b38:	dc01      	bgt.n	8007b3e <atan+0x1e>
 8007b3a:	d109      	bne.n	8007b50 <atan+0x30>
 8007b3c:	b140      	cbz	r0, 8007b50 <atan+0x30>
 8007b3e:	4622      	mov	r2, r4
 8007b40:	462b      	mov	r3, r5
 8007b42:	4620      	mov	r0, r4
 8007b44:	4629      	mov	r1, r5
 8007b46:	f7f8 fb75 	bl	8000234 <__adddf3>
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	460d      	mov	r5, r1
 8007b4e:	e005      	b.n	8007b5c <atan+0x3c>
 8007b50:	f1bb 0f00 	cmp.w	fp, #0
 8007b54:	4cac      	ldr	r4, [pc, #688]	; (8007e08 <atan+0x2e8>)
 8007b56:	f300 8121 	bgt.w	8007d9c <atan+0x27c>
 8007b5a:	4dac      	ldr	r5, [pc, #688]	; (8007e0c <atan+0x2ec>)
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	4629      	mov	r1, r5
 8007b60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b64:	4baa      	ldr	r3, [pc, #680]	; (8007e10 <atan+0x2f0>)
 8007b66:	429e      	cmp	r6, r3
 8007b68:	dc11      	bgt.n	8007b8e <atan+0x6e>
 8007b6a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007b6e:	429e      	cmp	r6, r3
 8007b70:	dc0a      	bgt.n	8007b88 <atan+0x68>
 8007b72:	a38b      	add	r3, pc, #556	; (adr r3, 8007da0 <atan+0x280>)
 8007b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b78:	f7f8 fb5c 	bl	8000234 <__adddf3>
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	4ba5      	ldr	r3, [pc, #660]	; (8007e14 <atan+0x2f4>)
 8007b80:	f7f8 ff9e 	bl	8000ac0 <__aeabi_dcmpgt>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d1e9      	bne.n	8007b5c <atan+0x3c>
 8007b88:	f04f 3aff 	mov.w	sl, #4294967295
 8007b8c:	e027      	b.n	8007bde <atan+0xbe>
 8007b8e:	f000 f951 	bl	8007e34 <fabs>
 8007b92:	4ba1      	ldr	r3, [pc, #644]	; (8007e18 <atan+0x2f8>)
 8007b94:	4604      	mov	r4, r0
 8007b96:	429e      	cmp	r6, r3
 8007b98:	460d      	mov	r5, r1
 8007b9a:	f300 80b8 	bgt.w	8007d0e <atan+0x1ee>
 8007b9e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007ba2:	429e      	cmp	r6, r3
 8007ba4:	f300 809c 	bgt.w	8007ce0 <atan+0x1c0>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	f7f8 fb42 	bl	8000234 <__adddf3>
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	4b98      	ldr	r3, [pc, #608]	; (8007e14 <atan+0x2f4>)
 8007bb4:	f7f8 fb3c 	bl	8000230 <__aeabi_dsub>
 8007bb8:	2200      	movs	r2, #0
 8007bba:	4606      	mov	r6, r0
 8007bbc:	460f      	mov	r7, r1
 8007bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	f7f8 fb35 	bl	8000234 <__adddf3>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4630      	mov	r0, r6
 8007bd0:	4639      	mov	r1, r7
 8007bd2:	f7f8 fe0f 	bl	80007f4 <__aeabi_ddiv>
 8007bd6:	f04f 0a00 	mov.w	sl, #0
 8007bda:	4604      	mov	r4, r0
 8007bdc:	460d      	mov	r5, r1
 8007bde:	4622      	mov	r2, r4
 8007be0:	462b      	mov	r3, r5
 8007be2:	4620      	mov	r0, r4
 8007be4:	4629      	mov	r1, r5
 8007be6:	f7f8 fcdb 	bl	80005a0 <__aeabi_dmul>
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	4680      	mov	r8, r0
 8007bf0:	4689      	mov	r9, r1
 8007bf2:	f7f8 fcd5 	bl	80005a0 <__aeabi_dmul>
 8007bf6:	a36c      	add	r3, pc, #432	; (adr r3, 8007da8 <atan+0x288>)
 8007bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfc:	4606      	mov	r6, r0
 8007bfe:	460f      	mov	r7, r1
 8007c00:	f7f8 fcce 	bl	80005a0 <__aeabi_dmul>
 8007c04:	a36a      	add	r3, pc, #424	; (adr r3, 8007db0 <atan+0x290>)
 8007c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0a:	f7f8 fb13 	bl	8000234 <__adddf3>
 8007c0e:	4632      	mov	r2, r6
 8007c10:	463b      	mov	r3, r7
 8007c12:	f7f8 fcc5 	bl	80005a0 <__aeabi_dmul>
 8007c16:	a368      	add	r3, pc, #416	; (adr r3, 8007db8 <atan+0x298>)
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	f7f8 fb0a 	bl	8000234 <__adddf3>
 8007c20:	4632      	mov	r2, r6
 8007c22:	463b      	mov	r3, r7
 8007c24:	f7f8 fcbc 	bl	80005a0 <__aeabi_dmul>
 8007c28:	a365      	add	r3, pc, #404	; (adr r3, 8007dc0 <atan+0x2a0>)
 8007c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2e:	f7f8 fb01 	bl	8000234 <__adddf3>
 8007c32:	4632      	mov	r2, r6
 8007c34:	463b      	mov	r3, r7
 8007c36:	f7f8 fcb3 	bl	80005a0 <__aeabi_dmul>
 8007c3a:	a363      	add	r3, pc, #396	; (adr r3, 8007dc8 <atan+0x2a8>)
 8007c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c40:	f7f8 faf8 	bl	8000234 <__adddf3>
 8007c44:	4632      	mov	r2, r6
 8007c46:	463b      	mov	r3, r7
 8007c48:	f7f8 fcaa 	bl	80005a0 <__aeabi_dmul>
 8007c4c:	a360      	add	r3, pc, #384	; (adr r3, 8007dd0 <atan+0x2b0>)
 8007c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c52:	f7f8 faef 	bl	8000234 <__adddf3>
 8007c56:	4642      	mov	r2, r8
 8007c58:	464b      	mov	r3, r9
 8007c5a:	f7f8 fca1 	bl	80005a0 <__aeabi_dmul>
 8007c5e:	a35e      	add	r3, pc, #376	; (adr r3, 8007dd8 <atan+0x2b8>)
 8007c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c64:	4680      	mov	r8, r0
 8007c66:	4689      	mov	r9, r1
 8007c68:	4630      	mov	r0, r6
 8007c6a:	4639      	mov	r1, r7
 8007c6c:	f7f8 fc98 	bl	80005a0 <__aeabi_dmul>
 8007c70:	a35b      	add	r3, pc, #364	; (adr r3, 8007de0 <atan+0x2c0>)
 8007c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c76:	f7f8 fadb 	bl	8000230 <__aeabi_dsub>
 8007c7a:	4632      	mov	r2, r6
 8007c7c:	463b      	mov	r3, r7
 8007c7e:	f7f8 fc8f 	bl	80005a0 <__aeabi_dmul>
 8007c82:	a359      	add	r3, pc, #356	; (adr r3, 8007de8 <atan+0x2c8>)
 8007c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c88:	f7f8 fad2 	bl	8000230 <__aeabi_dsub>
 8007c8c:	4632      	mov	r2, r6
 8007c8e:	463b      	mov	r3, r7
 8007c90:	f7f8 fc86 	bl	80005a0 <__aeabi_dmul>
 8007c94:	a356      	add	r3, pc, #344	; (adr r3, 8007df0 <atan+0x2d0>)
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	f7f8 fac9 	bl	8000230 <__aeabi_dsub>
 8007c9e:	4632      	mov	r2, r6
 8007ca0:	463b      	mov	r3, r7
 8007ca2:	f7f8 fc7d 	bl	80005a0 <__aeabi_dmul>
 8007ca6:	a354      	add	r3, pc, #336	; (adr r3, 8007df8 <atan+0x2d8>)
 8007ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cac:	f7f8 fac0 	bl	8000230 <__aeabi_dsub>
 8007cb0:	4632      	mov	r2, r6
 8007cb2:	463b      	mov	r3, r7
 8007cb4:	f7f8 fc74 	bl	80005a0 <__aeabi_dmul>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	4649      	mov	r1, r9
 8007cc0:	f7f8 fab8 	bl	8000234 <__adddf3>
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	462b      	mov	r3, r5
 8007cc8:	f7f8 fc6a 	bl	80005a0 <__aeabi_dmul>
 8007ccc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	d144      	bne.n	8007d60 <atan+0x240>
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	4629      	mov	r1, r5
 8007cda:	f7f8 faa9 	bl	8000230 <__aeabi_dsub>
 8007cde:	e734      	b.n	8007b4a <atan+0x2a>
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	4b4c      	ldr	r3, [pc, #304]	; (8007e14 <atan+0x2f4>)
 8007ce4:	f7f8 faa4 	bl	8000230 <__aeabi_dsub>
 8007ce8:	2200      	movs	r2, #0
 8007cea:	4606      	mov	r6, r0
 8007cec:	460f      	mov	r7, r1
 8007cee:	4620      	mov	r0, r4
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	4b48      	ldr	r3, [pc, #288]	; (8007e14 <atan+0x2f4>)
 8007cf4:	f7f8 fa9e 	bl	8000234 <__adddf3>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	4639      	mov	r1, r7
 8007d00:	f7f8 fd78 	bl	80007f4 <__aeabi_ddiv>
 8007d04:	f04f 0a01 	mov.w	sl, #1
 8007d08:	4604      	mov	r4, r0
 8007d0a:	460d      	mov	r5, r1
 8007d0c:	e767      	b.n	8007bde <atan+0xbe>
 8007d0e:	4b43      	ldr	r3, [pc, #268]	; (8007e1c <atan+0x2fc>)
 8007d10:	429e      	cmp	r6, r3
 8007d12:	da1a      	bge.n	8007d4a <atan+0x22a>
 8007d14:	2200      	movs	r2, #0
 8007d16:	4b42      	ldr	r3, [pc, #264]	; (8007e20 <atan+0x300>)
 8007d18:	f7f8 fa8a 	bl	8000230 <__aeabi_dsub>
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	4606      	mov	r6, r0
 8007d20:	460f      	mov	r7, r1
 8007d22:	4620      	mov	r0, r4
 8007d24:	4629      	mov	r1, r5
 8007d26:	4b3e      	ldr	r3, [pc, #248]	; (8007e20 <atan+0x300>)
 8007d28:	f7f8 fc3a 	bl	80005a0 <__aeabi_dmul>
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	4b39      	ldr	r3, [pc, #228]	; (8007e14 <atan+0x2f4>)
 8007d30:	f7f8 fa80 	bl	8000234 <__adddf3>
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	4630      	mov	r0, r6
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	f7f8 fd5a 	bl	80007f4 <__aeabi_ddiv>
 8007d40:	f04f 0a02 	mov.w	sl, #2
 8007d44:	4604      	mov	r4, r0
 8007d46:	460d      	mov	r5, r1
 8007d48:	e749      	b.n	8007bde <atan+0xbe>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	2000      	movs	r0, #0
 8007d50:	4934      	ldr	r1, [pc, #208]	; (8007e24 <atan+0x304>)
 8007d52:	f7f8 fd4f 	bl	80007f4 <__aeabi_ddiv>
 8007d56:	f04f 0a03 	mov.w	sl, #3
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	460d      	mov	r5, r1
 8007d5e:	e73e      	b.n	8007bde <atan+0xbe>
 8007d60:	4b31      	ldr	r3, [pc, #196]	; (8007e28 <atan+0x308>)
 8007d62:	4e32      	ldr	r6, [pc, #200]	; (8007e2c <atan+0x30c>)
 8007d64:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007d68:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007d6c:	e9da 2300 	ldrd	r2, r3, [sl]
 8007d70:	f7f8 fa5e 	bl	8000230 <__aeabi_dsub>
 8007d74:	4622      	mov	r2, r4
 8007d76:	462b      	mov	r3, r5
 8007d78:	f7f8 fa5a 	bl	8000230 <__aeabi_dsub>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007d84:	f7f8 fa54 	bl	8000230 <__aeabi_dsub>
 8007d88:	f1bb 0f00 	cmp.w	fp, #0
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	460d      	mov	r5, r1
 8007d90:	f6bf aee4 	bge.w	8007b5c <atan+0x3c>
 8007d94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d98:	461d      	mov	r5, r3
 8007d9a:	e6df      	b.n	8007b5c <atan+0x3c>
 8007d9c:	4d24      	ldr	r5, [pc, #144]	; (8007e30 <atan+0x310>)
 8007d9e:	e6dd      	b.n	8007b5c <atan+0x3c>
 8007da0:	8800759c 	.word	0x8800759c
 8007da4:	7e37e43c 	.word	0x7e37e43c
 8007da8:	e322da11 	.word	0xe322da11
 8007dac:	3f90ad3a 	.word	0x3f90ad3a
 8007db0:	24760deb 	.word	0x24760deb
 8007db4:	3fa97b4b 	.word	0x3fa97b4b
 8007db8:	a0d03d51 	.word	0xa0d03d51
 8007dbc:	3fb10d66 	.word	0x3fb10d66
 8007dc0:	c54c206e 	.word	0xc54c206e
 8007dc4:	3fb745cd 	.word	0x3fb745cd
 8007dc8:	920083ff 	.word	0x920083ff
 8007dcc:	3fc24924 	.word	0x3fc24924
 8007dd0:	5555550d 	.word	0x5555550d
 8007dd4:	3fd55555 	.word	0x3fd55555
 8007dd8:	2c6a6c2f 	.word	0x2c6a6c2f
 8007ddc:	bfa2b444 	.word	0xbfa2b444
 8007de0:	52defd9a 	.word	0x52defd9a
 8007de4:	3fadde2d 	.word	0x3fadde2d
 8007de8:	af749a6d 	.word	0xaf749a6d
 8007dec:	3fb3b0f2 	.word	0x3fb3b0f2
 8007df0:	fe231671 	.word	0xfe231671
 8007df4:	3fbc71c6 	.word	0x3fbc71c6
 8007df8:	9998ebc4 	.word	0x9998ebc4
 8007dfc:	3fc99999 	.word	0x3fc99999
 8007e00:	440fffff 	.word	0x440fffff
 8007e04:	7ff00000 	.word	0x7ff00000
 8007e08:	54442d18 	.word	0x54442d18
 8007e0c:	bff921fb 	.word	0xbff921fb
 8007e10:	3fdbffff 	.word	0x3fdbffff
 8007e14:	3ff00000 	.word	0x3ff00000
 8007e18:	3ff2ffff 	.word	0x3ff2ffff
 8007e1c:	40038000 	.word	0x40038000
 8007e20:	3ff80000 	.word	0x3ff80000
 8007e24:	bff00000 	.word	0xbff00000
 8007e28:	080082f0 	.word	0x080082f0
 8007e2c:	080082d0 	.word	0x080082d0
 8007e30:	3ff921fb 	.word	0x3ff921fb

08007e34 <fabs>:
 8007e34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007e38:	4770      	bx	lr

08007e3a <finite>:
 8007e3a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8007e3e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007e42:	0fc0      	lsrs	r0, r0, #31
 8007e44:	4770      	bx	lr
	...

08007e48 <floor>:
 8007e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e4c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8007e50:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8007e54:	2e13      	cmp	r6, #19
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4607      	mov	r7, r0
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	4605      	mov	r5, r0
 8007e60:	dc33      	bgt.n	8007eca <floor+0x82>
 8007e62:	2e00      	cmp	r6, #0
 8007e64:	da14      	bge.n	8007e90 <floor+0x48>
 8007e66:	a334      	add	r3, pc, #208	; (adr r3, 8007f38 <floor+0xf0>)
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	f7f8 f9e2 	bl	8000234 <__adddf3>
 8007e70:	2200      	movs	r2, #0
 8007e72:	2300      	movs	r3, #0
 8007e74:	f7f8 fe24 	bl	8000ac0 <__aeabi_dcmpgt>
 8007e78:	b138      	cbz	r0, 8007e8a <floor+0x42>
 8007e7a:	2c00      	cmp	r4, #0
 8007e7c:	da58      	bge.n	8007f30 <floor+0xe8>
 8007e7e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007e82:	431d      	orrs	r5, r3
 8007e84:	d001      	beq.n	8007e8a <floor+0x42>
 8007e86:	2500      	movs	r5, #0
 8007e88:	4c2d      	ldr	r4, [pc, #180]	; (8007f40 <floor+0xf8>)
 8007e8a:	4623      	mov	r3, r4
 8007e8c:	462f      	mov	r7, r5
 8007e8e:	e025      	b.n	8007edc <floor+0x94>
 8007e90:	4a2c      	ldr	r2, [pc, #176]	; (8007f44 <floor+0xfc>)
 8007e92:	fa42 f806 	asr.w	r8, r2, r6
 8007e96:	ea01 0208 	and.w	r2, r1, r8
 8007e9a:	4302      	orrs	r2, r0
 8007e9c:	d01e      	beq.n	8007edc <floor+0x94>
 8007e9e:	a326      	add	r3, pc, #152	; (adr r3, 8007f38 <floor+0xf0>)
 8007ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea4:	f7f8 f9c6 	bl	8000234 <__adddf3>
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f7f8 fe08 	bl	8000ac0 <__aeabi_dcmpgt>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d0ea      	beq.n	8007e8a <floor+0x42>
 8007eb4:	2c00      	cmp	r4, #0
 8007eb6:	bfbe      	ittt	lt
 8007eb8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007ebc:	fa43 f606 	asrlt.w	r6, r3, r6
 8007ec0:	19a4      	addlt	r4, r4, r6
 8007ec2:	2500      	movs	r5, #0
 8007ec4:	ea24 0408 	bic.w	r4, r4, r8
 8007ec8:	e7df      	b.n	8007e8a <floor+0x42>
 8007eca:	2e33      	cmp	r6, #51	; 0x33
 8007ecc:	dd0a      	ble.n	8007ee4 <floor+0x9c>
 8007ece:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007ed2:	d103      	bne.n	8007edc <floor+0x94>
 8007ed4:	f7f8 f9ae 	bl	8000234 <__adddf3>
 8007ed8:	4607      	mov	r7, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4638      	mov	r0, r7
 8007ede:	4619      	mov	r1, r3
 8007ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8007eec:	fa22 f808 	lsr.w	r8, r2, r8
 8007ef0:	ea18 0f00 	tst.w	r8, r0
 8007ef4:	d0f2      	beq.n	8007edc <floor+0x94>
 8007ef6:	a310      	add	r3, pc, #64	; (adr r3, 8007f38 <floor+0xf0>)
 8007ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efc:	f7f8 f99a 	bl	8000234 <__adddf3>
 8007f00:	2200      	movs	r2, #0
 8007f02:	2300      	movs	r3, #0
 8007f04:	f7f8 fddc 	bl	8000ac0 <__aeabi_dcmpgt>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d0be      	beq.n	8007e8a <floor+0x42>
 8007f0c:	2c00      	cmp	r4, #0
 8007f0e:	da02      	bge.n	8007f16 <floor+0xce>
 8007f10:	2e14      	cmp	r6, #20
 8007f12:	d103      	bne.n	8007f1c <floor+0xd4>
 8007f14:	3401      	adds	r4, #1
 8007f16:	ea25 0508 	bic.w	r5, r5, r8
 8007f1a:	e7b6      	b.n	8007e8a <floor+0x42>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007f22:	fa03 f606 	lsl.w	r6, r3, r6
 8007f26:	4435      	add	r5, r6
 8007f28:	42bd      	cmp	r5, r7
 8007f2a:	bf38      	it	cc
 8007f2c:	18e4      	addcc	r4, r4, r3
 8007f2e:	e7f2      	b.n	8007f16 <floor+0xce>
 8007f30:	2500      	movs	r5, #0
 8007f32:	462c      	mov	r4, r5
 8007f34:	e7a9      	b.n	8007e8a <floor+0x42>
 8007f36:	bf00      	nop
 8007f38:	8800759c 	.word	0x8800759c
 8007f3c:	7e37e43c 	.word	0x7e37e43c
 8007f40:	bff00000 	.word	0xbff00000
 8007f44:	000fffff 	.word	0x000fffff

08007f48 <scalbn>:
 8007f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8007f4e:	4604      	mov	r4, r0
 8007f50:	460d      	mov	r5, r1
 8007f52:	4617      	mov	r7, r2
 8007f54:	460b      	mov	r3, r1
 8007f56:	b996      	cbnz	r6, 8007f7e <scalbn+0x36>
 8007f58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007f5c:	4303      	orrs	r3, r0
 8007f5e:	d039      	beq.n	8007fd4 <scalbn+0x8c>
 8007f60:	4b33      	ldr	r3, [pc, #204]	; (8008030 <scalbn+0xe8>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	f7f8 fb1c 	bl	80005a0 <__aeabi_dmul>
 8007f68:	4b32      	ldr	r3, [pc, #200]	; (8008034 <scalbn+0xec>)
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	429f      	cmp	r7, r3
 8007f6e:	460d      	mov	r5, r1
 8007f70:	da0f      	bge.n	8007f92 <scalbn+0x4a>
 8007f72:	a32b      	add	r3, pc, #172	; (adr r3, 8008020 <scalbn+0xd8>)
 8007f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f78:	f7f8 fb12 	bl	80005a0 <__aeabi_dmul>
 8007f7c:	e006      	b.n	8007f8c <scalbn+0x44>
 8007f7e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007f82:	4296      	cmp	r6, r2
 8007f84:	d10a      	bne.n	8007f9c <scalbn+0x54>
 8007f86:	4602      	mov	r2, r0
 8007f88:	f7f8 f954 	bl	8000234 <__adddf3>
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	460d      	mov	r5, r1
 8007f90:	e020      	b.n	8007fd4 <scalbn+0x8c>
 8007f92:	460b      	mov	r3, r1
 8007f94:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007f98:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8007f9c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8007fa0:	19b9      	adds	r1, r7, r6
 8007fa2:	4291      	cmp	r1, r2
 8007fa4:	dd0e      	ble.n	8007fc4 <scalbn+0x7c>
 8007fa6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007faa:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007fae:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007fb2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8007fb6:	4820      	ldr	r0, [pc, #128]	; (8008038 <scalbn+0xf0>)
 8007fb8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8007fbc:	a31a      	add	r3, pc, #104	; (adr r3, 8008028 <scalbn+0xe0>)
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	e7d9      	b.n	8007f78 <scalbn+0x30>
 8007fc4:	2900      	cmp	r1, #0
 8007fc6:	dd08      	ble.n	8007fda <scalbn+0x92>
 8007fc8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007fcc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007fd0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fda:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8007fde:	da12      	bge.n	8008006 <scalbn+0xbe>
 8007fe0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007fe4:	429f      	cmp	r7, r3
 8007fe6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8007fea:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8007fee:	dcdc      	bgt.n	8007faa <scalbn+0x62>
 8007ff0:	a30b      	add	r3, pc, #44	; (adr r3, 8008020 <scalbn+0xd8>)
 8007ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8007ffa:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8007ffe:	480f      	ldr	r0, [pc, #60]	; (800803c <scalbn+0xf4>)
 8008000:	f041 011f 	orr.w	r1, r1, #31
 8008004:	e7b8      	b.n	8007f78 <scalbn+0x30>
 8008006:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800800a:	3136      	adds	r1, #54	; 0x36
 800800c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008010:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008014:	4620      	mov	r0, r4
 8008016:	4629      	mov	r1, r5
 8008018:	2200      	movs	r2, #0
 800801a:	4b09      	ldr	r3, [pc, #36]	; (8008040 <scalbn+0xf8>)
 800801c:	e7ac      	b.n	8007f78 <scalbn+0x30>
 800801e:	bf00      	nop
 8008020:	c2f8f359 	.word	0xc2f8f359
 8008024:	01a56e1f 	.word	0x01a56e1f
 8008028:	8800759c 	.word	0x8800759c
 800802c:	7e37e43c 	.word	0x7e37e43c
 8008030:	43500000 	.word	0x43500000
 8008034:	ffff3cb0 	.word	0xffff3cb0
 8008038:	8800759c 	.word	0x8800759c
 800803c:	c2f8f359 	.word	0xc2f8f359
 8008040:	3c900000 	.word	0x3c900000

08008044 <_init>:
 8008044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008046:	bf00      	nop
 8008048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800804a:	bc08      	pop	{r3}
 800804c:	469e      	mov	lr, r3
 800804e:	4770      	bx	lr

08008050 <_fini>:
 8008050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008052:	bf00      	nop
 8008054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008056:	bc08      	pop	{r3}
 8008058:	469e      	mov	lr, r3
 800805a:	4770      	bx	lr
